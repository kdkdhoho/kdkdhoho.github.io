{"version":3,"file":"component---src-templates-blog-post-js-76ba1df29747bd8b2657.js","mappings":"4PA4RA,MA1RwBA,IAA0B,IAAzB,gBAAEC,GAAiBD,EAC1C,MAAM,EAACE,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAAS,KACnC,EAACC,EAAS,EAACC,IAAeF,EAAAA,EAAAA,UAAS,IACnCG,GAASC,EAAAA,EAAAA,QAAO,MAGhBC,GAAgBC,EAAAA,EAAAA,aAAaC,IACjC,IAAKA,EAAS,MAAO,GAErB,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,UAAYJ,EACpB,MAAMK,EAAQJ,EAAQK,iBAAiB,gBAEvC,OAAOC,MAAMC,KAAKH,GAAOI,IAAIC,IAC3B,MAAMC,EAAOD,EAAKE,aAAa,QAC/B,IAAKD,EAAM,OAAO,KAElB,MAAME,EAAYF,EAAKG,UAAU,GAGjC,IACE,MAAMC,EAAYC,mBAAmBH,GAErC,OADAI,QAAQC,IAAI,UAAUL,QAAgBE,KAC/B,CAAEI,QAASN,EAAWO,QAASL,EACxC,CAAE,MAAOM,GAEP,OADAJ,QAAQK,KAAK,eAAeT,IAAaQ,GAClC,CAAEF,QAASN,EAAWO,QAASP,EACxC,IACCU,OAAOC,UACT,KAGHC,EAAAA,EAAAA,WAAU,KACR,IAAKnC,EAAiB,OAEtB,MAoEMoC,EAAQC,WApEOC,KACnBX,QAAQC,IAAI,2BACZD,QAAQC,IAAI,wBAAyB5B,GAGrC,MAAMuC,EAAe/B,EAAcR,GACnC2B,QAAQC,IAAI,oBAAqBW,GAGjC,MAAMC,EAAc5B,SAASI,iBAAiB,0BAC9CW,QAAQC,IAAI,gBACZY,EAAYC,QAAQ,CAACC,EAASC,KAC5BhB,QAAQC,IAAI,GAAGe,EAAQ,WAAWD,EAAQE,eAAeF,EAAQG,YAAYC,iBAAiBJ,EAAQK,aAIxG,MAAMC,EAAkB,GAExBT,EAAaE,QAAQQ,IAEnB,IAAIC,EAAUtC,SAASuC,eAAeF,EAAMpB,SACvCqB,IACHA,EAAUtC,SAASuC,eAAeF,EAAMnB,UAGtCoB,GACFvB,QAAQC,IAAI,OAAOqB,EAAMpB,gBAAgBoB,EAAMnB,wBAAyBoB,EAAQH,QAASG,EAAQL,YAAYC,QACzGI,EAAQE,QAAQ,0BAClBJ,EAAgBK,KAAKH,GAErBvB,QAAQK,KAAK,OAAOiB,EAAMpB,yBAA0BqB,EAAQH,UAG9DpB,QAAQK,KAAK,OAAOiB,EAAMpB,gBAAgBoB,EAAMnB,kCAKpD,MAAMwB,EAAqBrC,MAAMC,KAAKsB,GAAaP,OAAOsB,GAAKA,EAAEX,IACjEjB,QAAQC,IAAI,iBAAkB0B,EAAmBnC,IAAIoC,IAAC,CAAOX,GAAIW,EAAEX,GAAIY,KAAMD,EAAEV,YAAYC,WAG3FQ,EAAmBb,QAAQC,IACpBM,EAAgBS,SAASf,KAC5Bf,QAAQC,IAAI,2BAA2Bc,EAAQE,SAASF,EAAQG,YAAYC,WAC5EE,EAAgBK,KAAKX,MAKzBM,EAAgBU,KAAK,CAACC,EAAGC,KACvB,MAAMC,EAAQF,EAAEG,wBACVC,EAAQH,EAAEE,wBAChB,OAAOD,EAAMG,IAAMD,EAAMC,MAG3BrC,QAAQC,IAAI,cAAeoB,EAAgB7B,IAAIoC,IAAC,CAAOX,GAAIW,EAAEX,GAAIY,KAAMD,EAAEV,YAAYC,WACrFnB,QAAQC,IAAI,yBAEZvB,EAAY2C,GAGRA,EAAgBiB,OAAS,GAC3B/D,EAAY8C,EAAgB,GAAGJ,KAKI,KAEvC,MAAO,IAAMsB,aAAa9B,IACzB,CAACpC,EAAiBQ,KAGrB2B,EAAAA,EAAAA,WAAU,KACR,GAAwB,IAApB/B,EAAS6D,OAAc,OAE3B,MAAME,EAAeA,KACnB,MAAMC,EAAUC,OAAOC,YACvB,IAAIC,EAAkB,GAGlBC,EAAiB,KACjBC,EAAkBC,IAiBtB,GAfAtE,EAASqC,QAAQC,IACf,MACMiC,EADOjC,EAAQoB,wBACGE,IAGxB,GAAIW,GAAc,KAAOA,IAAe,IAAK,CAC3C,MAAMC,EAAWC,KAAKC,IAAIH,EAAa,KACnCC,EAAWH,IACbA,EAAkBG,EAClBJ,EAAiB9B,EAErB,KAIG8B,EACH,IAAK,IAAIO,EAAI3E,EAAS6D,OAAS,EAAGc,GAAK,EAAGA,IAAK,CAC7C,MAAMrC,EAAUtC,EAAS2E,GAIzB,GAHarC,EAAQoB,wBACEE,IAAMI,GAEZA,EAAU,IAAK,CAC9BI,EAAiB9B,EACjB,KACF,CACF,EAIG8B,GAAkBpE,EAAS,KAC9BoE,EAAiBpE,EAAS,IAGxBoE,IACFD,EAAkBC,EAAe5B,IAG/B2B,IAAoBtE,IACtB0B,QAAQC,IAAI,iBAAiB3B,QAAesE,KAC5CrE,EAAYqE,KAKhB,IAAIS,GAAU,EACd,MAAMC,EAAkBA,KACjBD,IACHE,sBAAsB,KACpBf,IACAa,GAAU,IAEZA,GAAU,IAUd,OANAX,OAAOc,iBAAiB,SAAUF,EAAiB,CAAEG,SAAS,IAC9Df,OAAOc,iBAAiB,SAAUF,EAAiB,CAAEG,SAAS,IAG9DjB,IAEO,KACLE,OAAOgB,oBAAoB,SAAUJ,GACrCZ,OAAOgB,oBAAoB,SAAUJ,KAEtC,CAAC7E,EAAUH,IAGd,MAAMqF,GAAiB7E,EAAAA,EAAAA,aAAasB,IAClC,GAAyB,MAArBA,EAAEwD,OAAOxC,QAAiB,OAE9BhB,EAAEyD,iBAEF,MAAMnE,EAAOU,EAAEwD,OAAOjE,aAAa,QACnC,IAAKD,IAASA,EAAKoE,WAAW,KAAM,OAEpC,MAAMlE,EAAYF,EAAKG,UAAU,GACjCG,QAAQC,IAAI,cAAcL,KAG1B,IAAImE,EAAgB9E,SAASuC,eAAe5B,GAE5C,IAAKmE,EACH,IACE,MAAMjE,EAAYC,mBAAmBH,GACrCI,QAAQC,IAAI,iBAAiBH,KAC7BiE,EAAgB9E,SAASuC,eAAe1B,EAC1C,CAAE,MAAOM,GACPJ,QAAQK,KAAK,eAAeT,IAAaQ,EAC3C,CAGF,GAAI2D,EAAe,CACjB,MAAMC,EAAYD,EAAc5B,wBAAwBE,IAAMK,OAAOC,YAAc,IAEnFD,OAAOuB,SAAS,CACd5B,IAAK2B,EACLE,SAAU,WAIZ3F,EAAYwF,EAAc9C,GAC5B,MACEjB,QAAQK,KAAK,2BAA2BT,MAEzC,IAGGuE,EAA2BC,EAAAA,QAAc,KAC7C,IAAK/F,EAAiB,OAAOA,EAE7B,IAAIgG,EAAYhG,EAOhB,GAJAgG,EAAYA,EAAUC,QAAQ,+BAAgC,IAC9DD,EAAYA,EAAUC,QAAQ,eAAgB,IAG1ChG,EAAU,CAEZ,IAAIiG,GAAa,EAEjB,IACE,MAAMC,EAAkBC,mBAAmBnG,GAGrCoG,EAAe,IAAIC,OAAO,kBAAkBH,EAAgBF,QAAQ,sBAAuB,oBAAqB,KAClHD,EAAUO,MAAMF,KAClBL,EAAYA,EAAUC,QAAQI,EAAc,uBAC5C1E,QAAQC,IAAI,wBAAwBuE,KACpCD,GAAa,EAEjB,CAAE,MAAOnE,GACPJ,QAAQK,KAAK,eAAe/B,IAAY8B,EAC1C,CAGA,IAAKmE,EAAY,CACf,MAAMM,EAAYvG,EAASgG,QAAQ,sBAAuB,QACpDQ,EAAQ,IAAIH,OAAO,kBAAkBE,cAAuB,KAClER,EAAYA,EAAUC,QAAQQ,EAAO,uBACrC9E,QAAQC,IAAI,uBAAuB3B,IACrC,CACF,CAEA,OAAO+F,GACN,CAAChG,EAAiBC,IAErB,OAAKD,EAGH+F,EAAAA,cAAA,SAAOW,UAAU,gBAAgBC,IAAKrG,GACpCyF,EAAAA,cAAA,MAAIW,UAAU,aAAY,MAC1BX,EAAAA,cAAA,OACEW,UAAU,cACVE,QAAStB,EACTuB,wBAAyB,CAAEC,OAAQhB,MARZ,MCtQ/B,MAoFaiB,EAAOC,IAAyC,IAAtCC,MAAQC,eAAgBC,IAAQH,EACrD,OACEjB,EAAAA,cAACqB,EAAAA,EAAG,CACFC,MAAOF,EAAKG,YAAYD,MACxBE,YAAaJ,EAAKG,YAAYC,aAAeJ,EAAKK,WAKxD,MA7FyBzH,IAGlB,IAAD0H,EAAA,IAFJR,MAAM,SAAES,EAAQ,KAAEC,EAAI,KAAEC,EAAMV,eAAgBC,GAAM,SACpDU,GACD9H,EACC,MAAM+H,GAA6B,QAAjBL,EAAAG,EAAKG,oBAAY,IAAAN,OAAA,EAAjBA,EAAmBJ,QAAS,QAwB9C,OAtBAtB,EAAAA,UAAgB,KACd,MAAMiC,EAAcpH,SAASC,cAAc,OAC3CmH,EAAYtB,UAAY,kBACxB9F,SAASqH,KAAKC,YAAYF,GAE1B,MAAMG,EAAiBA,KACrB,MAEMC,EAFY/D,OAAOC,aACP1D,SAASqH,KAAKI,aAAehE,OAAOiE,aACN,IAChDN,EAAYO,MAAMC,MAAQJ,EAAgB,KAK5C,OAFA/D,OAAOc,iBAAiB,SAAUgD,GAE3B,KACL9D,OAAOgB,oBAAoB,SAAU8C,GACjCvH,SAASqH,KAAKQ,SAAST,IACzBpH,SAASqH,KAAKS,YAAYV,KAG7B,IAGDjC,EAAAA,cAAC4C,EAAAA,EAAM,CAACd,SAAUA,EAAUR,MAAOS,GACjC/B,EAAAA,cAAA,OAAKW,UAAU,oBACbX,EAAAA,cAAA,OAAKW,UAAU,uBACbX,EAAAA,cAAA,WACEW,UAAU,YACVkC,WAAS,EACTC,SAAS,6BAET9C,EAAAA,cAAA,cACEA,EAAAA,cAAA,UAAKoB,EAAKG,YAAYD,OACtBtB,EAAAA,cAAA,KAAGW,UAAU,aAAaS,EAAKG,YAAYwB,MAC3C/C,EAAAA,cAAA,SAAIoB,EAAKG,YAAYyB,MAAQ5B,EAAKG,YAAYyB,KAAK9E,OAAS,GAC1D8B,EAAAA,cAAA,OAAKW,UAAU,kBACZS,EAAKG,YAAYyB,KAAK5H,IAAI6H,GACzBjD,EAAAA,cAAA,QAAMkD,IAAKD,EAAKtC,UAAU,OAAM,IAC5BsC,OAMZjD,EAAAA,cAAA,WACEc,wBAAyB,CAAEC,OAAQK,EAAK+B,MACxCC,SAAS,gBAEXpD,EAAAA,cAAA,WACAA,EAAAA,cAAA,cACEA,EAAAA,cAACqD,EAAAA,EAAG,SAITjC,EAAKnH,iBAAmB+F,EAAAA,cAACsD,EAAe,CAACrJ,gBAAiBmH,EAAKnH,mBAElE+F,EAAAA,cAAA,OAAKW,UAAU,iBACbX,EAAAA,cAAA,UACEA,EAAAA,cAAA,UACG2B,GACC3B,EAAAA,cAACuD,EAAAA,KAAI,CAACC,GAAI7B,EAAS8B,OAAOC,KAAMC,IAAI,QACjChC,EAASJ,YAAYD,QAI5BtB,EAAAA,cAAA,UACG4B,GACC5B,EAAAA,cAACuD,EAAAA,KAAI,CAACC,GAAI5B,EAAK6B,OAAOC,KAAMC,IAAI,QAC7B/B,EAAKL,YAAYD,W","sources":["webpack://gatsby-starter-blog/./src/components/toc.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from 'react'\n\nconst TableOfContents = ({ tableOfContents }) => {\n  const [activeId, setActiveId] = useState('')\n  const [headings, setHeadings] = useState([])\n  const tocRef = useRef(null)\n\n  // TOC에서 링크 ID 추출하기 (URL 디코딩 포함)\n  const extractTocIds = useCallback((tocHtml) => {\n    if (!tocHtml) return []\n    \n    const tempDiv = document.createElement('div')\n    tempDiv.innerHTML = tocHtml\n    const links = tempDiv.querySelectorAll('a[href^=\"#\"]')\n    \n    return Array.from(links).map(link => {\n      const href = link.getAttribute('href')\n      if (!href) return null\n      \n      const encodedId = href.substring(1)\n      \n      // URL 디코딩 시도\n      try {\n        const decodedId = decodeURIComponent(encodedId)\n        console.log(`ID 변환: ${encodedId} -> ${decodedId}`)\n        return { encoded: encodedId, decoded: decodedId }\n      } catch (e) {\n        console.warn(`URL 디코딩 실패: ${encodedId}`, e)\n        return { encoded: encodedId, decoded: encodedId }\n      }\n    }).filter(Boolean)\n  }, [])\n\n  // 헤딩 요소들을 찾고 저장\n  useEffect(() => {\n    if (!tableOfContents) return\n\n    const findHeadings = () => {\n      console.log('=== TOC Debug Start ===')\n      console.log('TableOfContents HTML:', tableOfContents)\n      \n      // TOC에서 언급된 ID들을 추출\n      const tocIdObjects = extractTocIds(tableOfContents)\n      console.log('TOC에서 추출된 ID 객체들:', tocIdObjects)\n\n      // 페이지의 모든 헤딩 요소들 확인\n      const allHeadings = document.querySelectorAll('h1, h2, h3, h4, h5, h6')\n      console.log('페이지의 모든 헤딩들:')\n      allHeadings.forEach((heading, index) => {\n        console.log(`${index + 1}. ID: \"${heading.id}\", Text: \"${heading.textContent.trim()}\", Tag: ${heading.tagName}`)\n      })\n\n      // 실제 DOM에서 해당 ID를 가진 헤딩 요소들 찾기\n      const headingElements = []\n      \n      tocIdObjects.forEach(idObj => {\n        // 인코딩된 ID와 디코딩된 ID 모두 시도\n        let element = document.getElementById(idObj.encoded)\n        if (!element) {\n          element = document.getElementById(idObj.decoded)\n        }\n        \n        if (element) {\n          console.log(`ID \"${idObj.encoded}\" 또는 \"${idObj.decoded}\"에 해당하는 요소 찾음:`, element.tagName, element.textContent.trim())\n          if (element.matches('h1, h2, h3, h4, h5, h6')) {\n            headingElements.push(element)\n          } else {\n            console.warn(`ID \"${idObj.encoded}\"는 헤딩 요소가 아닙니다:`, element.tagName)\n          }\n        } else {\n          console.warn(`ID \"${idObj.encoded}\" 또는 \"${idObj.decoded}\"에 해당하는 요소를 찾을 수 없습니다`)\n        }\n      })\n\n      // 추가로 TOC ID가 없지만 실제 존재하는 헤딩들도 찾기\n      const allHeadingsWithIds = Array.from(allHeadings).filter(h => h.id)\n      console.log('ID가 있는 모든 헤딩들:', allHeadingsWithIds.map(h => ({ id: h.id, text: h.textContent.trim() })))\n      \n      // TOC에 없지만 실제로 존재하는 헤딩들을 포함\n      allHeadingsWithIds.forEach(heading => {\n        if (!headingElements.includes(heading)) {\n          console.log(`TOC에 없지만 실제 존재하는 헤딩 추가: ${heading.id} - \"${heading.textContent.trim()}\"`)\n          headingElements.push(heading)\n        }\n      })\n      \n      // 문서에서의 순서대로 정렬\n      headingElements.sort((a, b) => {\n        const rectA = a.getBoundingClientRect()\n        const rectB = b.getBoundingClientRect()\n        return rectA.top - rectB.top\n      })\n      \n      console.log('최종 감지된 헤딩들:', headingElements.map(h => ({ id: h.id, text: h.textContent.trim() })))\n      console.log('=== TOC Debug End ===')\n      \n      setHeadings(headingElements)\n      \n      // 첫 번째 헤딩을 초기 활성 상태로 설정\n      if (headingElements.length > 0) {\n        setActiveId(headingElements[0].id)\n      }\n    }\n\n    // DOM 로드 완료 후 헤딩 찾기\n    const timer = setTimeout(findHeadings, 500)\n    \n    return () => clearTimeout(timer)\n  }, [tableOfContents, extractTocIds])\n\n  // 스크롤 이벤트 처리\n  useEffect(() => {\n    if (headings.length === 0) return\n\n    const handleScroll = () => {\n      const scrollY = window.pageYOffset\n      let currentActiveId = ''\n\n      // 현재 화면에서 가장 가까운 헤딩 찾기\n      let closestHeading = null\n      let closestDistance = Infinity\n\n      headings.forEach(heading => {\n        const rect = heading.getBoundingClientRect()\n        const elementTop = rect.top\n        \n        // 헤딩이 화면 상단 근처에 있는 경우 우선 고려\n        if (elementTop <= 200 && elementTop >= -100) {\n          const distance = Math.abs(elementTop - 100)\n          if (distance < closestDistance) {\n            closestDistance = distance\n            closestHeading = heading\n          }\n        }\n      })\n\n      // 가까운 헤딩이 없으면 스크롤 위치 기반으로 찾기\n      if (!closestHeading) {\n        for (let i = headings.length - 1; i >= 0; i--) {\n          const heading = headings[i]\n          const rect = heading.getBoundingClientRect()\n          const offsetTop = rect.top + scrollY\n          \n          if (offsetTop <= scrollY + 150) {\n            closestHeading = heading\n            break\n          }\n        }\n      }\n\n      // 여전히 없으면 첫 번째 헤딩\n      if (!closestHeading && headings[0]) {\n        closestHeading = headings[0]\n      }\n\n      if (closestHeading) {\n        currentActiveId = closestHeading.id\n      }\n\n      if (currentActiveId !== activeId) {\n        console.log(`Active ID 변경: ${activeId} -> ${currentActiveId}`)\n        setActiveId(currentActiveId)\n      }\n    }\n\n    // 스크롤 이벤트 등록 (디바운스 적용)\n    let ticking = false\n    const throttledScroll = () => {\n      if (!ticking) {\n        requestAnimationFrame(() => {\n          handleScroll()\n          ticking = false\n        })\n        ticking = true\n      }\n    }\n\n    window.addEventListener('scroll', throttledScroll, { passive: true })\n    window.addEventListener('resize', throttledScroll, { passive: true })\n    \n    // 초기 실행\n    handleScroll()\n\n    return () => {\n      window.removeEventListener('scroll', throttledScroll)\n      window.removeEventListener('resize', throttledScroll)\n    }\n  }, [headings, activeId])\n\n  // TOC 링크 클릭 처리 (URL 디코딩 포함)\n  const handleTocClick = useCallback((e) => {\n    if (e.target.tagName !== 'A') return\n    \n    e.preventDefault()\n    \n    const href = e.target.getAttribute('href')\n    if (!href || !href.startsWith('#')) return\n\n    const encodedId = href.substring(1)\n    console.log(`TOC 링크 클릭: ${encodedId}`)\n    \n    // URL 디코딩 시도\n    let targetElement = document.getElementById(encodedId)\n    \n    if (!targetElement) {\n      try {\n        const decodedId = decodeURIComponent(encodedId)\n        console.log(`디코딩된 ID로 재시도: ${decodedId}`)\n        targetElement = document.getElementById(decodedId)\n      } catch (e) {\n        console.warn(`URL 디코딩 실패: ${encodedId}`, e)\n      }\n    }\n    \n    if (targetElement) {\n      const offsetTop = targetElement.getBoundingClientRect().top + window.pageYOffset - 100\n      \n      window.scrollTo({\n        top: offsetTop,\n        behavior: 'smooth'\n      })\n      \n      // 즉시 활성화 (실제 DOM ID 사용)\n      setActiveId(targetElement.id)\n    } else {\n      console.warn(`클릭한 링크의 대상 요소를 찾을 수 없음: ${encodedId}`)\n    }\n  }, [])\n\n  // TOC HTML에서 active 클래스 적용 (URL 인코딩 고려)\n  const processedTableOfContents = React.useMemo(() => {\n    if (!tableOfContents) return tableOfContents\n\n    let processed = tableOfContents\n\n    // 모든 링크에서 active 클래스 제거\n    processed = processed.replace(/\\s*class=\"[^\"]*active[^\"]*\"/g, '')\n    processed = processed.replace(/\\s*class=\"\"/g, '')\n\n    // 현재 활성 ID에만 active 클래스 추가\n    if (activeId) {\n      // 인코딩된 형태로도 찾기\n      let foundMatch = false\n      \n      try {\n        const encodedActiveId = encodeURIComponent(activeId)\n        \n        // 인코딩된 ID로 먼저 시도\n        const encodedRegex = new RegExp(`(<a[^>]*href=\"#${encodedActiveId.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}\"[^>]*)(>)`, 'g')\n        if (processed.match(encodedRegex)) {\n          processed = processed.replace(encodedRegex, '$1 class=\"active\"$2')\n          console.log(`Active 클래스 적용 (인코딩): ${encodedActiveId}`)\n          foundMatch = true\n        }\n      } catch (e) {\n        console.warn(`URL 인코딩 실패: ${activeId}`, e)\n      }\n      \n      // 인코딩된 형태로 찾지 못했으면 원본 ID로 시도\n      if (!foundMatch) {\n        const escapedId = activeId.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n        const regex = new RegExp(`(<a[^>]*href=\"#${escapedId}\"[^>]*)(>)`, 'g')\n        processed = processed.replace(regex, '$1 class=\"active\"$2')\n        console.log(`Active 클래스 적용 (원본): ${activeId}`)\n      }\n    }\n\n    return processed\n  }, [tableOfContents, activeId])\n\n  if (!tableOfContents) return null\n\n  return (\n    <aside className=\"toc-container\" ref={tocRef}>\n      <h3 className=\"toc-title\">목차</h3>\n      <div \n        className=\"toc-content\"\n        onClick={handleTocClick}\n        dangerouslySetInnerHTML={{ __html: processedTableOfContents }} \n      />\n    </aside>\n  )\n}\n\nexport default TableOfContents","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport TableOfContents from \"../components/toc\"\n\nconst BlogPostTemplate = ({\n  data: { previous, next, site, markdownRemark: post },\n  location,\n}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`\n\n  React.useEffect(() => {\n    const progressBar = document.createElement('div')\n    progressBar.className = 'scroll-progress'\n    document.body.appendChild(progressBar)\n\n    const updateProgress = () => {\n      const scrollTop = window.pageYOffset\n      const docHeight = document.body.scrollHeight - window.innerHeight\n      const scrollPercent = (scrollTop / docHeight) * 100\n      progressBar.style.width = scrollPercent + '%'\n    }\n\n    window.addEventListener('scroll', updateProgress)\n    \n    return () => {\n      window.removeEventListener('scroll', updateProgress)\n      if (document.body.contains(progressBar)) {\n        document.body.removeChild(progressBar)\n      }\n    }\n  }, [])\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"blog-post-layout\">\n        <div className=\"blog-post-container\">\n          <article\n            className=\"blog-post\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h1>{post.frontmatter.title}</h1>\n              <p className=\"post-date\">{post.frontmatter.date}</p>\n              <p>{post.frontmatter.tags && post.frontmatter.tags.length > 0 && (\n                <div className=\"tags-container\">\n                  {post.frontmatter.tags.map(tag => (\n                    <span key={tag} className=\"tag\">\n                      #{tag}\n                    </span>\n                  ))}\n                </div>\n              )}</p>\n            </header>\n            <section\n              dangerouslySetInnerHTML={{ __html: post.html }}\n              itemProp=\"articleBody\"\n            />\n            <hr />\n            <footer>\n              <Bio />\n            </footer>\n          </article>\n        </div>\n        {post.tableOfContents && <TableOfContents tableOfContents={post.tableOfContents} />}\n      </div>\n      <nav className=\"blog-post-nav\">\n        <ul>\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"이전 글\">\n                {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"다음 글\">\n                {next.frontmatter.title}\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport const Head = ({ data: { markdownRemark: post } }) => {\n  return (\n    <Seo\n      title={post.frontmatter.title}\n      description={post.frontmatter.description || post.excerpt}\n    />\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"YYYY년 M월 D일\")\n        description\n        tags\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"names":["_ref","tableOfContents","activeId","setActiveId","useState","headings","setHeadings","tocRef","useRef","extractTocIds","useCallback","tocHtml","tempDiv","document","createElement","innerHTML","links","querySelectorAll","Array","from","map","link","href","getAttribute","encodedId","substring","decodedId","decodeURIComponent","console","log","encoded","decoded","e","warn","filter","Boolean","useEffect","timer","setTimeout","findHeadings","tocIdObjects","allHeadings","forEach","heading","index","id","textContent","trim","tagName","headingElements","idObj","element","getElementById","matches","push","allHeadingsWithIds","h","text","includes","sort","a","b","rectA","getBoundingClientRect","rectB","top","length","clearTimeout","handleScroll","scrollY","window","pageYOffset","currentActiveId","closestHeading","closestDistance","Infinity","elementTop","distance","Math","abs","i","ticking","throttledScroll","requestAnimationFrame","addEventListener","passive","removeEventListener","handleTocClick","target","preventDefault","startsWith","targetElement","offsetTop","scrollTo","behavior","processedTableOfContents","React","processed","replace","foundMatch","encodedActiveId","encodeURIComponent","encodedRegex","RegExp","match","escapedId","regex","className","ref","onClick","dangerouslySetInnerHTML","__html","Head","_ref2","data","markdownRemark","post","Seo","title","frontmatter","description","excerpt","_site$siteMetadata","previous","next","site","location","siteTitle","siteMetadata","progressBar","body","appendChild","updateProgress","scrollPercent","scrollHeight","innerHeight","style","width","contains","removeChild","Layout","itemScope","itemType","date","tags","tag","key","html","itemProp","Bio","TableOfContents","Link","to","fields","slug","rel"],"sourceRoot":""}