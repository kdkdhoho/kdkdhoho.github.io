{"componentChunkName":"component---src-templates-post-jsx","path":"/july-2nd-3rd-4th/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","excerpt":"7월 8일부터 23일까지 했던 것들과 느낀 점들을 정리하고, 이를 기반으로 앞으로의 방향성을 잡기 위한 회고록 면접 7월 11일, 16일, 22일, 23일 면접을 봤다.\n때문에 7월은 면접을 위한 시간으로 가득했다고 과언이 아니다.\n총 세 곳의 면접을 보게 되었고 각 기업의 면접을 끝나고 느낀 점들이 하나씩은 있다. What? Why? How? Resul…","html":"<p>7월 8일부터 23일까지 했던 것들과 느낀 점들을 정리하고, 이를 기반으로 앞으로의 방향성을 잡기 위한 회고록</p>\n<h2>면접</h2>\n<p>7월 11일, 16일, 22일, 23일 면접을 봤다.<br>\n때문에 7월은 면접을 위한 시간으로 가득했다고 과언이 아니다.<br>\n총 세 곳의 면접을 보게 되었고 각 기업의 면접을 끝나고 느낀 점들이 하나씩은 있다.</p>\n<h3>What? Why? How? Result?</h3>\n<p>이번 시간동안 배운 것중 가장 핵심이다.<br>\n내가 한 경험에 <strong>What? Why? How? Result?</strong> 이 반드시 필요하고, 면접에서 어필할 것은 이 네 가지가 전부라는 것이다.<br>\n어쩌면 이렇게 느낀 이유의 목적이 면접일 수 있다. 물론 지금 상황에선 아예 틀린 말은 아니지만,<br>\n면접관들은 비즈니스맨이기에 그들이 궁금한 것도 이 네 가지가 전부라고 생각한다.<br>\n그리고 실무는 사실상 이 네 가지로 움직이는 게 아닐까 생각한다.</p>\n<p>돌이켜보면 최근들어 Why 와 Result가 부족했다고 생각한다.<br>\nWhy와 Result를 채우는 쪽으로 지향해보자.</p>\n<p>결과적으로 앞으로 프로젝트를 할 때, 혹은 개발을 할 때, 공부를 할 때, 이 네 가지를 계속해서 의식하고 구조화하는 것이 중요해보인다.<br>\n그리고 내가 했던 경험에 대해 모두 이 네 가지로 잘 정리하는 시간이 필요해보인다.</p>\n<h3>그래도 경쟁력이 있다는 사실</h3>\n<p>23일, C사의 2차 면접을 봤다.<br>\n면접 서두에 면접관께서 이런 말씀을 해주셨다. \"지원자가 1,200명 정도 되는데 2차 면접까지 오는 사람은 얼마 없다. 따라서 지원자께서 경쟁력이 충분히 있다고 생각한다.\"<br>\n면접이라는 상황에서 면접관이 내게 어떤 의도로 말씀하셨는지는 정확히 알 수 없다.<br>\n다만 분명한 사실은 <strong>경쟁력이 있다는 사실</strong>이다.<br></p>\n<p>면접 중에 우아한테크코스의 경쟁률에 대해서도 여쭤보셨다.<br>\n당시 기억을 떠올리며 \"5기 백엔드 기준, 1,200명 중 100명\" 이라고 답변했다. (정확히는 1,500명 중 100명이다.)<br>\n이 말을 하며 다시 한번 느낄 수 있었다. '지금까지 꾸준히 높은 경쟁률을 뚫고 있구나.'<br></p>\n<p>신입으로서 채용 시장이 너무 추운 건 사실이다.<br>\n그럼에도 나는 경쟁력 있는 신입이라는 사실은 이러한 경험들로 증명이 된다고 생각한다.<br>\n따라서, 만약 이번 채용 과정에서 모두 쓴 맛을 보더라도 포기하지 않았으면 좋겠다.<br>\n잠깐 재정비하는 시간이 필요할지언정 계속해서 시도하여 마침내 좋은 결과를 맺었으면 좋겠다.</p>\n<h3>넓이보단 깊이</h3>\n<p>16일, S사의 1차 면접을 봤다.<br>\n7일 간 진행한 과제 테스트를 기반으로 많은 질문을 받았다.<br>\n그런데 내 예상과 달리 사용한 기술을 알고 썼는지? 안다면 얼마나 아는지? 에 관한 질문을 받았다.<br>\n사실, 과제에 사용한 기술이나 개념은 익숙하거나 능숙한 것들이 아니었다.<br>\n문제를 해결하기 위해 어디서 주워들은 것들을 사용해 해결하게 되었다.<br>\n결국 답변을 속 시원히 하지 못했다.<br></p>\n<p>결과는 예상했던 대로 탈락이었지만, 깊이가 부족했다는 사실을 뼈저리게 느꼈다.<br>\n동시에 'Why?'가 결여되었다고 느꼈다.<br>\n우테코를 계기로 그렇게 스스로 강조했던 'Why?' 인데, 너무 해이해졌나보다.<br></p>\n<h2>앞으로</h2>\n<p>다시 한번 확장보단 깊이에 초점을 두어보자.<br>\n그리고 Why 와 Result를 지향하는 방향성을 가지자. </p>","frontmatter":{"title":"[회고] 07.08 ~ 07.23","date":"July 24, 2024","update":null,"tags":["retrospective"],"series":null},"fields":{"slug":"/july-2nd-3rd-4th/","readingTime":{"minutes":5.33}}},"seriesList":{"edges":[{"node":{"id":"a30ff988-ea74-5562-b241-90fbff73a3da","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"title":"키스소프트 현장실습 회고"}}},{"node":{"id":"aedd8f5b-dd45-5a14-9b57-3a48cdc0b641","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?"}}},{"node":{"id":"d41198ca-d162-523b-84f8-128b247a19b4","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"[셀럽잇] HTTPS 적용기"}}},{"node":{"id":"3b94cbd6-f64a-5d82-96a2-0761602c250b","fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},{"node":{"id":"c418073e-50be-5fe1-807d-478c9c47f640","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"title":"무중단 배포 이해하기"}}},{"node":{"id":"c5760ea9-e137-5edf-8244-3a93e25b067b","fields":{"slug":"/unit-test/"},"frontmatter":{"title":"단위 테스트 이해하기"}}},{"node":{"id":"8ae82b3f-5b72-555c-89fe-9939dcf8377c","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"title":"JUnit과 AssertJ 활용법"}}},{"node":{"id":"91a7a622-00f8-5cca-b6c1-e4f7db7ee31e","fields":{"slug":"/about-tdd/"},"frontmatter":{"title":"TDD 이해하기"}}},{"node":{"id":"10e0dab4-d2e7-52df-8daa-31bfef1b08b6","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"title":"static을 더 잘 사용하기"}}},{"node":{"id":"c773b0a0-9610-5605-bdb9-9089df57f52b","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}}},{"node":{"id":"0bf99b61-98a4-5c40-b8ce-05a918d212f7","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"title":"Garbage Collection 튜닝에 대해"}}},{"node":{"id":"61bd95c2-424a-54c8-96d9-bec4c8a4f58c","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},{"node":{"id":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}}},{"node":{"id":"c2d7615d-6232-5fce-8794-f4c790106bb5","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"title":"2023년 회고록"}}},{"node":{"id":"def28d41-907f-5432-8060-ed5429114882","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP"}}},{"node":{"id":"9bf8ca89-e021-526b-a7b5-2cce0b1e366f","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기"}}},{"node":{"id":"01318426-7520-5a57-92ff-c917e1483247","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"title":"[Spring] @Controller와 @RestController 비교하기"}}},{"node":{"id":"bc68fa05-ec4a-5e12-a9b8-4e58769887df","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기"}}},{"node":{"id":"122a1e9c-6fe5-5e7f-b797-a31f54d086b0","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"title":"CPU 아키텍처란?"}}},{"node":{"id":"c23a12ff-7b48-57ef-91ed-81f5386d680a","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"title":"[github] Github Repository에 Issue, PR Template 적용하기"}}},{"node":{"id":"b1dc584d-3c69-5ae8-82a8-09b015fa3d02","fields":{"slug":"/oauth-test/"},"frontmatter":{"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기"}}},{"node":{"id":"9f43b8a7-b5ce-5766-b984-3ed0775d698f","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI"}}},{"node":{"id":"e1b2a9fb-d6e3-5f65-9f50-d3a30c2518d1","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"title":"[Java] JDBC 파헤쳐보기"}}},{"node":{"id":"81b7fb10-f532-5f48-a797-379c3bb99bee","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준"}}},{"node":{"id":"adfb7cc4-25f1-5b31-8060-e40d763b0afe","fields":{"slug":"/sovle-concurrency-problem/"},"frontmatter":{"title":"[ListyWave] 리스트 수정 시, 동시성 이슈 발생 확인 및 해결기"}}},{"node":{"id":"5ecb4a12-dc98-589f-94e0-695fb2d84fab","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"title":"[MySQL] 바이너리 로그로 데이터 복구하기"}}},{"node":{"id":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}}},{"node":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS"}}},{"node":{"id":"7b9b6854-62e7-5f25-afbf-d5459fa5d021","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},{"node":{"id":"d77e8b24-f01d-5673-8c55-d93e2d110c4f","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기"}}},{"node":{"id":"b4550a40-b215-5e9a-a6a7-8c27bfb63e25","fields":{"slug":"/continuous-deploy-using-github-actions-and-docker/"},"frontmatter":{"title":"[Infra] Github Actions와 Docker를 이용해 배포 자동화 구축하기"}}},{"node":{"id":"e38bb1ed-1a51-5947-a1d2-52aaae42ac97","fields":{"slug":"/build-monitoring-system/"},"frontmatter":{"title":"[Infra] Prometheus와 Grafana, 그리고 Docker를 이용해 모니터링 대시보드 구축하기"}}},{"node":{"id":"961e4fc3-1d57-55a3-99fd-9e1233cef1dd","fields":{"slug":"/june-3rd/"},"frontmatter":{"title":"[회고] 06.10 ~ 06.16"}}},{"node":{"id":"fcade266-d38c-5c36-a3b7-87d56d9be862","fields":{"slug":"/june-4th-and-5th/"},"frontmatter":{"title":"[회고] 06.17 ~ 06.30"}}},{"node":{"id":"7b64a367-9192-557d-b45d-0e3bc68d44d3","fields":{"slug":"/thread-in-jvm/"},"frontmatter":{"title":"Java Thread 1 - Java의 Thread에 대해 알아보자"}}},{"node":{"id":"9e5a98c2-ba89-5b36-8e72-0028211a2c5b","fields":{"slug":"/status-and-control-thread-in-java/"},"frontmatter":{"title":"Java Thread 2 - Java Thread의 상태와 행동을 제어하는 방법"}}},{"node":{"id":"45a781cf-0e04-559c-a853-d1609dab1bd4","fields":{"slug":"/synchronize-threads/"},"frontmatter":{"title":"Java Thread 3 - Thread 동기화하기"}}},{"node":{"id":"236f7305-5647-51fe-800e-61577d25cd0c","fields":{"slug":"/july-1st/"},"frontmatter":{"title":"[회고] 07.01 ~ 07.07"}}},{"node":{"id":"abad5436-5cba-50a3-8fda-72440c646a78","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 설계 원칙: SOLID"}}},{"node":{"id":"f113bb3f-df7e-589a-b3c1-378c812ac8da","fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}}},{"node":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}}},{"node":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},{"node":{"id":"4a801b76-317f-5129-a330-84fc989993c8","fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},{"node":{"id":"549069af-32e1-578d-a8c0-7524f6305a7d","fields":{"slug":"/execute-and-executeUpdate-of-jdbc/"},"frontmatter":{"title":"[JDBC] execute(String)과 execute(). executeUpdate(String)와 executeUpdate()의 차이"}}}]},"previous":{"fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}},"next":{"fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},"pageContext":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","series":null,"previousPostId":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","nextPostId":"4a801b76-317f-5129-a330-84fc989993c8"}},"staticQueryHashes":[],"slicesMap":{}}