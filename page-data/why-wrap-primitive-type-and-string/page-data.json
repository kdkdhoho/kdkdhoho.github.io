{"componentChunkName":"component---src-templates-post-jsx","path":"/why-wrap-primitive-type-and-string/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"50eb9a45-26ac-517f-991c-9140da539386","excerpt":"세 줄 요약 코드의 가독성이 좋아진다.  코드를 객체지향으로 짤 수 있다. 따라서 유지보수가 쉽다. 원시값과 문자열을 포장하지 않았을 때 이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까? 적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다. 물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추…","html":"<h2>세 줄 요약</h2>\n<ol>\n<li>코드의 가독성이 좋아진다. </li>\n<li>코드를 객체지향으로 짤 수 있다.</li>\n<li>따라서 유지보수가 쉽다.</li>\n</ol>\n<h2>원시값과 문자열을 포장하지 않았을 때</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까?</p>\n<p>적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다.</p>\n<p>물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> players <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> playCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> playCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그렇다면 아래 코드를 한번 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Players</span> players <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Players</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PlayCount</span> playCount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PlayCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> playCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>분명 변수명은 같지만, 타입이 주는 힘이 느껴진다.</p>\n<h2>반복되는 행위를 수행할 수 있다</h2>\n<p>만약 위 코드에서 <code class=\"language-text\">List&lt;String> players</code>와 <code class=\"language-text\">int playCount</code>가 넓은 범위에서 사용되면서, 동시에 각 변수를 사용하는 데 있어 반복되는 행위가 있다면 어떨까?</p>\n<p>가령, 다양한 곳에서 각 Player들에게 playCount만큼 게임을 Play하는 행위가 이뤄져야 한다면 각 변수가 존재하는 메서드마다 실행 코드를 작성해줘야 할 것이다.</p>\n<p>하지만 값을 포장하여 새로운 객체를 만든다면, 객체 간의 협력을 통해 충분히 수행할 수 있을 것이다.</p>\n<p>이는 유지보수 관점에서 큰 강점이다!</p>\n<hr>\n<p>추가로, 만약 playCount가 몇 회 이하여야 한다는 요구사항이 있을 경우를 생각해보자.</p>\n<p>해당 경우에도 <code class=\"language-text\">PlayCount</code> 객체에서 애초에 객체를 생성할 때 검증을 해주면 된다.</p>\n<p>그러면 해당 객체를 사용하는 모든 곳에서 검증을 해주지 않아도 된다!</p>\n<h2>일급 컬렉션</h2>\n<p>일급 컬렉션은 컬렉션을 감싼 객체이다.</p>\n<p>사실, 일급 컬렉션도 값을 포장한 객체이므로 위에서 언급한 장점들이 모두 적용된다고 볼 수 있다.</p>","frontmatter":{"title":"모든 원시값과 문자열을 포장한다. 왜?","date":"December 13, 2023","update":null,"tags":["java","oop","clean-code"],"series":"Why? 시리즈"},"fields":{"slug":"/why-wrap-primitive-type-and-string/","readingTime":{"minutes":2.75}}},"seriesList":{"edges":[{"node":{"id":"e1be180a-113d-5df8-9bd4-3dd5d8bb4d1b","fields":{"slug":"/why-seperate-domain-and-view/"},"frontmatter":{"title":"Domain과 View를 분리한다. 왜?"}}},{"node":{"id":"9091e058-99be-5ff8-ae14-4489eba8e413","fields":{"slug":"/why-use-final/"},"frontmatter":{"title":"final 키워드를 사용해 값의 변경을 막아라. 왜?"}}},{"node":{"id":"35d8f587-ab7e-50fa-a624-8d68aec98522","fields":{"slug":"/why-use-collection-instead-of-array/"},"frontmatter":{"title":"배열 대신 컬렉션을 쓴다. 왜?"}}},{"node":{"id":"50eb9a45-26ac-517f-991c-9140da539386","fields":{"slug":"/why-wrap-primitive-type-and-string/"},"frontmatter":{"title":"모든 원시값과 문자열을 포장한다. 왜?"}}}]},"previous":{"fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}},"next":{"fields":{"slug":"/04-mysql-engine-architecture/"},"frontmatter":{"title":"MySQL 엔진 아키텍처"}}},"pageContext":{"id":"50eb9a45-26ac-517f-991c-9140da539386","series":"Why? 시리즈","previousPostId":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","nextPostId":"69b6441a-edde-5385-b6a3-0df3608f6657"}},"staticQueryHashes":[],"slicesMap":{}}