{"componentChunkName":"component---src-templates-blog-post-js","path":"/spring/test/transactional-event-listener-test-trouble-shooting/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"44e1ab21-096d-50a4-a075-df3f7e2ac6d9","excerpt":"개요 게시글에 댓글 작성 시, 게시글 작성자에게 알람을 생성하도록 하는 기능을 구현해야 했다.\n이때, 댓글과 알람의 결합도를 낮추기 위해 을 사용했다.\n코드는 아래와 같다. 여기서 와 에 대해 짚고 넘어가고 싶은데, 이 아닌 을 적용한 이유는, 댓글 생성 로직이 Commit…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p>게시글에 댓글 작성 시, 게시글 작성자에게 알람을 생성하도록 하는 기능을 구현해야 했다.<br>\n이때, 댓글과 알람의 결합도를 낮추기 위해 <code class=\"language-text\">ApplicationEventPublisher</code>을 사용했다.<br>\n코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommentCreateResponse</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> listId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> loginUserId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>loginUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>listId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Comment</span> comment <span class=\"token operator\">=</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommentContent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Comment</span> saved <span class=\"token operator\">=</span> commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        applicationEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CommentCreateResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>saved<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TransactionalEventListener</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmEvent</span> alarmEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        alarmEvent<span class=\"token punctuation\">.</span><span class=\"token function\">validateDifferentPublisherAndReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>alarmEvent<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">@TransactionalEventListener</code>와 <code class=\"language-text\">@Transactional(propagation = Propagation.REQUIRES_NEW)</code>에 대해 짚고 넘어가고 싶은데,</p>\n<p><code class=\"language-text\">@EventListener</code>이 아닌 <code class=\"language-text\">@TransactionalEventListener</code>을 적용한 이유는, 댓글 생성 로직이 Commit 된 후에 알람 생성 로직을 수행하도록 하기 위해서다.<br></p>\n<blockquote>\n<p><code class=\"language-text\">@EventListener</code>는 이벤트가 발행되자마자 로직을 실행한다.<br>\n반면 <code class=\"language-text\">@TransactionalEventListener</code>은 부모 트랜잭션이 Commit 된 이후에 실행된다.</p>\n</blockquote>\n<p>트랜잭션 전파 속성을 <code class=\"language-text\">REQUIRES_NEW</code>로 설정한 이유는, <code class=\"language-text\">save()</code> 메서드는 부모 트랜잭션이 Commit 된 이후에 실행이 되어야 하는데, <code class=\"language-text\">REQUIRED</code>로 설정하면<br>\nCommit이 된 트랜잭션에 합류하게 되고 그대로 종료하게 되므로, 결국 알람이 저장되지 않기 때문이다.</p>\n<p>위 로직에 대한 통합 테스트 코드를 작성하기 위해 아래와 같이 코드를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 리스트에_댓글을_남길_경우_작성자에게_알람이_생성된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given: 동호가 리스트를 생성한다.</span>\n    <span class=\"token class-name\">User</span> listWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>동호<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>가장_좋아하는_견종<span class=\"token function\">_TOP3</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when: 정수가 댓글을 남긴다.</span>\n    <span class=\"token class-name\">User</span> commentWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>정수<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"첫 댓글!\"</span><span class=\"token punctuation\">,</span> commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then: 동호의 알람을 조회해서 검증한다.</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FindAlarmResponse</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getAlarms</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSendUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 알람이 아무것도 존재하지 않았고, JPA 쿼리 로그를 보면 알람 데이터가 INSERT 되지 않는다.<br></p>\n<h2 id=\"원인-파악\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85\" aria-label=\"원인 파악 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원인 파악</h2>\n<p>전체적인 로직을 하나씩 다시 살펴보자.<br></p>\n<p><code class=\"language-text\">CommentService#create()</code>이 호출되고 <code class=\"language-text\">applicationEventPublisher.publishEvent(AlarmEvent.comment(list, saved));</code>을 호출한다.<br>\n그리고 메서드는 종료한다.<br>\n그러면 테스트 코드의 검증 부분으로 넘어가게 되고, 동시에 <code class=\"language-text\">AlarmService#save()</code>가 호출될 것이다.<br></p>\n<p>하지만 우리가 바라는 것은 <code class=\"language-text\">CommentService#create()</code>이 모두 종료되고, <code class=\"language-text\">AlarmService#save()</code>가 호출되고 나서야 검증 부분으로 넘어가는 것이다.<br>\n따라서 <code class=\"language-text\">commentService.create(list.getId(), \"첫 댓글!\", commentWriter.getId());</code> 이후에 강제로 트랜잭션을 커밋해줘야 한다.</p>\n<h2 id=\"해결\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EA%B2%B0\" aria-label=\"해결 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해결</h2>\n<p>스프링의 <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/TestTransaction.html\">TestTransaction</a>을 통해 테스트 트랜잭션을 수동으로 제어할 수 있다.</p>\n<p><code class=\"language-text\">TestTransaction.flagForCommit()</code>과 <code class=\"language-text\">TestTransaction.end()</code>을 이용하여 해결해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 리스트에_댓글을_남길_경우_작성자에게_알람이_생성된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">User</span> listWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>동호<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>가장_좋아하는_견종<span class=\"token function\">_TOP3</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">User</span> commentWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>정수<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"첫 댓글!\"</span><span class=\"token punctuation\">,</span> commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">TestTransaction</span><span class=\"token punctuation\">.</span><span class=\"token function\">flagForCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 진행 중인 테스트 트랜잭션이 종료되면 커밋하도록 설정한다.</span>\n    <span class=\"token class-name\">TestTransaction</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 진행 중인 테스트 트랜잭션을 종료한다.</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FindAlarmResponse</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getAlarms</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSendUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리가 의도한 대로 <code class=\"language-text\">commentService.create(list.getId(), \"첫 댓글!\", commentWriter.getId());</code> 실행 이후에, 해당 트랜잭션을 커밋하기 위해<br>\n다음 라인에 <code class=\"language-text\">TestTransaction.flagForCommit();</code>과 <code class=\"language-text\">TestTransaction.end();</code>을 호출해주었다.<br>\n각 코드를 호출하면, 현재 진행 중인 테스트 트랜잭션 컨텍스트가 종료되면 Commit하도록 설정을 변경하고, 강제로 종료시킨다.<br>\n결과적으로 <code class=\"language-text\">CommentService#create</code> 메서드는 커밋이 되고, 자연스레 <code class=\"language-text\">AlarmService#save()</code>도 호출되어 의도한 대로 테스트가 수행된다.</p>\n<p>아래는 테스트 결과 로그인데, EntityManager의 Session ID를 보면 1954816877가 댓글을 저장한다.<br>\n저장이 끝나고 Commit하고, 이어서 645470836가 Open된다. 동시에 1954816877은 트랜잭션 전파로 인해 Suspendinge된다.<br>\n그리고 645470836가 알람을 저장하고, 645470836 - 1954816877 순으로 Closing된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2024-09-26T18:43:55.139+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(1954816877&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.140+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Participating in existing transaction\n2024-09-26T18:43:55.142+09:00 DEBUG 54024 --- [           main] org.hibernate.SQL                        : \n    insert \n    into\n        comment\n        (content, created_date, is_deleted, list_id, updated_date, user_id, id) \n    values\n        (?, ?, ?, ?, ?, ?, default)\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:VARCHAR) &lt;- [첫 댓글!]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP) &lt;- [2024-09-26T18:43:55.140749]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:VARCHAR) &lt;- [false]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:TIMESTAMP) &lt;- [2024-09-26T18:43:55.140749]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:BIGINT) &lt;- [2]\n2024-09-26T18:43:55.145+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Initiating transaction commit\n2024-09-26T18:43:55.146+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Committing JPA transaction on EntityManager [SessionImpl(1954816877&lt;open>)]\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(1954816877&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Suspending current transaction, creating new transaction with name [com.listywave.alarm.application.service.AlarmService.save]\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Opened new EntityManager [SessionImpl(645470836&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@7ce660fc]\n2024-09-26T18:43:55.156+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(645470836&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.156+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Participating in existing transaction\n2024-09-26T18:43:55.158+09:00 DEBUG 54024 --- [           main] org.hibernate.SQL                        : \n    insert \n    into\n        alarm\n        (comment_id, created_date, is_checked, list_id, receive_user_id, type, send_user_id, id) \n    values\n        (?, ?, ?, ?, ?, ?, ?, default)\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP) &lt;- [2024-09-26T18:43:55.156967]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:VARCHAR) &lt;- [false]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:VARCHAR) &lt;- [COMMENT]\n2024-09-26T18:43:55.159+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:BIGINT) &lt;- [2]\n2024-09-26T18:43:55.160+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Initiating transaction commit\n2024-09-26T18:43:55.160+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Committing JPA transaction on EntityManager [SessionImpl(645470836&lt;open>)]\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Closing JPA EntityManager [SessionImpl(645470836&lt;open>)] after transaction\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Resuming suspended transaction after completion of inner transaction\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Closing JPA EntityManager [SessionImpl(1954816877&lt;open>)] after transaction\n2024-09-26T18:43:55.212+09:00 DEBUG 54024 --- [           main] tor$SharedEntityManagerInvocationHandler : Creating new EntityManager for shared EntityManager invocation</code></pre></div>\n<h2 id=\"결과\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EA%B3%BC\" aria-label=\"결과 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결과</h2>\n<p>결과적으로, 테스트 중간에 강제로 커밋을 수행하여 성공적으로 <code class=\"language-text\">@TransactionalEventListener</code>에 해당하는 메서드를 테스트할 수 있게 되었다.<br></p>","tableOfContents":"<ul>\n<li><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></li>\n<li><a href=\"#%EC%9B%90%EC%9D%B8-%ED%8C%8C%EC%95%85\">원인 파악</a></li>\n<li><a href=\"#%ED%95%B4%EA%B2%B0\">해결</a></li>\n<li><a href=\"#%EA%B2%B0%EA%B3%BC\">결과</a></li>\n</ul>","frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법","date":"2024년 9월 26일","description":"TestTransaction를 이용해 테스트 중간에 트랜잭션을 강제로 커밋하기","tags":["Spring","TestTransaction"]}},"previous":{"fields":{"slug":"/자료구조-알고리즘/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/"},"frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법"}},"next":{"fields":{"slug":"/자료구조-알고리즘/dijkstra/"},"frontmatter":{"title":"다익스트라 알고리즘"}}},"pageContext":{"id":"44e1ab21-096d-50a4-a075-df3f7e2ac6d9","previousPostId":"884add30-5589-5817-baef-ae60abcdfd03","nextPostId":"d67e28fa-6690-5ab1-839f-31083e3ab145"}},"staticQueryHashes":["1475414628","2841359383"],"slicesMap":{}}