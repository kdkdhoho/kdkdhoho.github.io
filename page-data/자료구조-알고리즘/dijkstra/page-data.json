{"componentChunkName":"component---src-templates-blog-post-js","path":"/자료구조-알고리즘/dijkstra/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"d67e28fa-6690-5ab1-839f-31083e3ab145","excerpt":"…","html":"<h2 id=\"다익스트라-알고리즘\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"다익스트라 알고리즘 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다익스트라 알고리즘</h2>\n<p>특정 노드에서 다른 노드까지의 최단 거리를 구하는 알고리즘이다.<br>\n유향인지 무향인지는 상관없지만 가중치가 음수가 하나라도 존재하는 순간, 적용하지 못한다.<br>\n알고리즘의 기본 원리 상으로 시작 노드르 기준으로 다른 노드까지의 최단 거리를 <strong>더하면서 갱신</strong>하는 구조이기 때문에<br>\n음수 가중치가 존재하는 순간 올바른 계산이 불가능해지기 떄문이다.</p>\n<h2 id=\"기본-원리\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%9B%90%EB%A6%AC\" aria-label=\"기본 원리 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 원리</h2>\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/5/57/Dijkstra_Animation.gif\" alt=\"다익스트라 알고리즘.gif (출처: 위키피디아)\">\n<p>특정 노드를 시작으로 매 round가 수행된다.<br>\n이 round는, 한 노드에서 이동할 수 있는 다른 노드까지의 최단 경로를 갱신하는 과정이 수행된다.<br>\n다음 노드로의 확장을 위해, 최단 경로가 갱신된 노드로부터 다시 한번 round를 수행한다.<br>\n위 과정을 반복하다보면 결국 모든 노드를 거치게 되고, 결과적으로 시작 노드를 기점으로 다른 모든 노드까지의 최단 경로가 기록되게 된다. (모든 노드가 연결되어 있다는 가정하에)</p>\n<h2 id=\"시간-복잡도\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"시간 복잡도 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시간 복잡도</h2>\n<p>다익스트라는 구현하는 데 있어 기본형과 우선순위 큐를 사용한 개선된 구현 방법이 있다.</p>\n<h3 id=\"기본형\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95\" aria-label=\"기본형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본형</h3>\n<p>기본형의 경우, 매 round마다 아직 방문하지 않았으며 최단 경로가 갱신된 노드를 찾는 코드가 포함된다.</p>\n<p><a href=\"https://www.acmicpc.net/problem/1753\">최단경로 문제</a>를 기준으로 코드를 작성하면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">INF <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span>\n\nn<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstart <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ndist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nvisited <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        graph<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    dijkstra<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n        curr <span class=\"token operator\">=</span> not_visited_and_min_dist_node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> curr <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">break</span>\n\n        <span class=\"token keyword\">for</span> nxt<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">&lt;</span> dist<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                dist<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight\n\n        visited<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">not_visited_and_min_dist_node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    min_dist <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span>\n    result <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> visited<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> min_dist<span class=\"token punctuation\">:</span>\n            min_dist <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            result <span class=\"token operator\">=</span> i\n\n    <span class=\"token keyword\">return</span> result\n\n\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>결국 모든 노드를 기준으로 최단 경로를 갱신하게 되는데, 이때 매 round마다 for문으로 조건에 맞는 노드를 찾는다.<br>\n따라서 시간 복잡도는, 노드의 개수를 V라고 했을 때 O(V^2)가 된다.<br>\n(원래는 O(E + V^2)이지만, 어떤 그래프이든 O(E)의 상한값을 O(V^2)로 치환할 수 있어 포함하지 않는다.)</p>\n<h3 id=\"최적화형\" style=\"position:relative;\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94%ED%98%95\" aria-label=\"최적화형 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화형</h3>\n<p>우선순위 큐를 사용하여, 다음 round를 수행할 노드를 O(1) 만에 추출한다.<br>\n마찬가지로 동일한 문제를 기준으로 코드를 작성해보면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> heapq\n\nINF <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span>\n\nn<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nstart <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\ndist <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> w <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        graph<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    dijkstra<span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> it <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> INF<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"INF\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dist<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">while</span> q<span class=\"token punctuation\">:</span>\n        w<span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> w <span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">continue</span>\n\n        <span class=\"token keyword\">for</span> nxt<span class=\"token punctuation\">,</span> weight <span class=\"token keyword\">in</span> graph<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> dist<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight<span class=\"token punctuation\">:</span>\n                dist<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dist<span class=\"token punctuation\">[</span>curr<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> weight\n                heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>nxt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nxt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># O(V)</span>\n\n\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>기본형은 본래 O(E + V^2) 였다.<br>\nround 마다 최단 경로를 갱신할 노드를 찾는 데에 모든 노드를 조회하기 때문에 V^2가 되었는데,<br>\n우선 순위 큐(최소 힙)을 사용하면 이를 찾는 데에 logV 만큼 걸린다.<br>\n따라서 O(E + VlogV)가 된다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\">다익스트라 알고리즘</a></p>\n</li>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%9B%90%EB%A6%AC\">기본 원리</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\">시간 복잡도</a></p>\n<ul>\n<li><a href=\"#%EA%B8%B0%EB%B3%B8%ED%98%95\">기본형</a></li>\n<li><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94%ED%98%95\">최적화형</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"다익스트라 알고리즘","date":"2024년 10월 30일","description":"다익스트라 알고리즘의 특징, 원리, 기본형, 최적화형, 구현","tags":["algorithm","dijkstra"]}},"previous":{"fields":{"slug":"/spring/test/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}},"next":{"fields":{"slug":"/영어/첫-번째-1-1-튜터링-복습/"},"frontmatter":{"title":"링글 1:1 튜터링 복습"}}},"pageContext":{"id":"d67e28fa-6690-5ab1-839f-31083e3ab145","previousPostId":"44e1ab21-096d-50a4-a075-df3f7e2ac6d9","nextPostId":"b2748010-01a9-5423-9555-766626f36572"}},"staticQueryHashes":["1475414628","2841359383"],"slicesMap":{}}