{"componentChunkName":"component---src-templates-blog-post-js","path":"/자료구조-알고리즘/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"884add30-5589-5817-baef-ae60abcdfd03","excerpt":"개요 1300:K번째 수나 1637:날카로운 눈 문제를 풀면서 '일정하게 증가하는 수열에서 특정 값(x)보다 같거나 작은 값의 개수를 세는' 경우가 존재했다.\n풀다보니 위 로직이 공식처럼 딱 들어맞는 것을 발견했고 이를 정리하고자 한다. 코드 우선 코드로 살펴보자.\n아래 코드는 163…","html":"<h2 id=\"개요\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<p><a href=\"https://www.acmicpc.net/problem/1300\">1300:K번째 수</a>나 <a href=\"https://www.acmicpc.net/problem/1637\">1637:날카로운 눈</a> 문제를 풀면서 '일정하게 증가하는 수열에서 특정 값(x)보다 같거나 작은 값의 개수를 세는' 경우가 존재했다.<br>\n풀다보니 위 로직이 공식처럼 딱 들어맞는 것을 발견했고 이를 정리하고자 한다.</p>\n<h2 id=\"코드\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드</h2>\n<p>우선 코드로 살펴보자.<br>\n아래 코드는 <a href=\"https://www.acmicpc.net/problem/1637\">1637:날카로운 눈</a> 문제를 해결하며 적용한 메서드를 간소화 한 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># x: 기준이 되는 수</span>\n<span class=\"token comment\"># a: 수열의 시작값</span>\n<span class=\"token comment\"># c: 수열의 최댓값</span>\n<span class=\"token comment\"># b: 수열이 증가하는 범위</span>\n<span class=\"token comment\"># x보다 작거나 같은 수의 개수를 구하는 함수이다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_equal_or_lower</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 찾으려는 수가 수열의 최소값보다 작다면, 결과는 0이다. </span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># x, c 중에서 작은 값을 고른다.</span>\n    <span class=\"token comment\"># 주어진 수열(a부터 c까지의 b만큼 증가하는 수열)의 범위의 끝을 설정한다.</span>\n    <span class=\"token comment\"># 탐색 범위를 좁히는 것이다.</span>\n    max_val <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># max_val이 탐색 범위의 최솟값(a) 미만이면 결과는 0이다. </span>\n    <span class=\"token keyword\">if</span> max_val <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        \n    length <span class=\"token operator\">=</span> max_val <span class=\"token operator\">-</span> a  <span class=\"token comment\"># a부터 max_val까지의 길이를 구한다.</span>\n    count <span class=\"token operator\">=</span> length <span class=\"token operator\">//</span> b  <span class=\"token comment\"># 길이를 b로 나눈다. 이는 즉, 시작값(a)부터 끝값(max_val)까지 b만큼 점프해서 얼만큼 움직이는지 세는 것이다.</span>\n    result <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 맨 처음 값(a)는 점프에 포함되지 않았으므로 1을 더해 값을 보정한다.</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>각 코드에 대한 설명은 주석으로 설명했다.<br>\n그럼 이제 예시를 통해 이해해보자.</p>\n<h2 id=\"예시\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C\" aria-label=\"예시 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시</h2>\n<h3 id=\"예시-1-a1-c10-b1\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-1-a1-c10-b1\" aria-label=\"예시 1 a1 c10 b1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 1: a=1, c=10, b=1</h3>\n<p>다음과 같은 수열이 있다고 가정해보자.<br>\n시작값(a): 1, 최댓값(c): 10, 증가비(1): 1이다.<br>\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n<p>위 수열에서 7보다 같거나 작은 숫자는 [1, 2, 3, 4, 5, 6, 7] 이다.</p>\n<p>우선 찾으려는 범위를 먼저 정해보자.<br>\n수열의 최댓값(c)과 기준이 되는 수(x) 중, 더 작은 값은 x이다.<br>\n따라서 수열 [1, 2, 3, 4, 5, 6, 7] 안에서 7보다 작은 수를 찾아야 하는 것이다.<br></p>\n<p>여기서부터 핵심인데, 시작 지점인 첫 번째 인덱스(0)로부터 마지막 인덱스(6)까지 b만큼 증가해서 몇 번만에 갈 수 있는지 세면 된다.<br>\n위 수열에서는 b가 1이기 때문에 6번 이동하면 될 것이다.<br>\n그리고 첫 번째 인덱스에 해당하는 값은 횟수에 포함되지 않았으니 +1을 해주어 보정을 해준다.</p>\n<h3 id=\"예시-2-a3-c23-b4\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%8B%9C-2-a3-c23-b4\" aria-label=\"예시 2 a3 c23 b4 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예시 2: a=3, c=23, b=4</h3>\n<p>이번에는 [3, 7, 11, 15, 19, 23] 의 수열이다.<br>\n위 수열에서 기준값 x를 18로 설정해보자.</p>\n<p>우선, 탐색 범위를 설정하자.<br>\n탐색 범위의 시작값은 3이고, 끝값은 <code class=\"language-text\">min(18, 23)</code> 이므로 18가 된다.<br>\n즉, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] 내에서 찾게 되는 것이다.<br></p>\n<p>이때에도 마찬가지로 3부터 18까지 b만큼 증가해서 몇 번만에 도착하는지를 세보자.<br>\nb는 4 이므로 3부터 시작해서 [7, 11, 15]를 통해 3번만에 도착할 수 있다.<br>\n여기서 맨 첫 번째 값인 3이 제외되었으니 +1을 해준다.<br>\n결과적으로 [3, 7, 11, 15] 의 수열이 도출되고 총 개수는 4가 된다.<br></p>\n<p>놀랍게도 탐색하는 범위는 3부터 18까지였지만, 시작값부터 b만큼 증가하며 끝값까지 도달하기 위한 숫자들을 보니 모두 수열 [3, 7, 11, 15, 19, 23]에 포함되는 값들이 된다.</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EA%B0%9C%EC%9A%94\">개요</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%BD%94%EB%93%9C\">코드</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%98%88%EC%8B%9C\">예시</a></p>\n<ul>\n<li><a href=\"#%EC%98%88%EC%8B%9C-1-a1-c10-b1\">예시 1: a=1, c=10, b=1</a></li>\n<li><a href=\"#%EC%98%88%EC%8B%9C-2-a3-c23-b4\">예시 2: a=3, c=23, b=4</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법","date":"2024년 9월 7일","description":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법","tags":["algorithm"]}},"previous":{"fields":{"slug":"/자료구조-알고리즘/difference-sqrtN-and-logN/"},"frontmatter":{"title":"O(sqrt(N))과 O(log2(N))의 차이"}},"next":{"fields":{"slug":"/spring/test/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}}},"pageContext":{"id":"884add30-5589-5817-baef-ae60abcdfd03","previousPostId":"5f442d85-ec0b-5f95-aa2a-f9baa945e8c1","nextPostId":"44e1ab21-096d-50a4-a075-df3f7e2ac6d9"}},"staticQueryHashes":["1475414628","2841359383"],"slicesMap":{}}