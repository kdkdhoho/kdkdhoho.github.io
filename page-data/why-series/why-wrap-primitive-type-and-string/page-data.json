{"componentChunkName":"component---src-templates-blog-post-js","path":"/why-series/why-wrap-primitive-type-and-string/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"82b5460e-8849-569f-a103-1eb29ce1160e","excerpt":"…","html":"<h2 id=\"세-줄-요약\" style=\"position:relative;\"><a href=\"#%EC%84%B8-%EC%A4%84-%EC%9A%94%EC%95%BD\" aria-label=\"세 줄 요약 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세 줄 요약</h2>\n<ol>\n<li>코드의 가독성이 좋아진다.</li>\n<li>코드를 객체지향으로 짤 수 있다.</li>\n<li>따라서 유지보수가 쉽다.</li>\n</ol>\n<h2 id=\"원시값과-문자열을-포장하지-않았을-때\" style=\"position:relative;\"><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%EC%9E%A5%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%98%EC%9D%84-%EB%95%8C\" aria-label=\"원시값과 문자열을 포장하지 않았을 때 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>원시값과 문자열을 포장하지 않았을 때</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까?</p>\n<p>적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다.</p>\n<p>물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> players <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> playCount <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> playCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>그렇다면 아래 코드를 한번 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Players</span> players <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Players</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doggy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dazzle\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0chil\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">PlayCount</span> playCount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PlayCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RacingGame</span><span class=\"token punctuation\">(</span>players<span class=\"token punctuation\">,</span> playCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>분명 변수명은 같지만, 타입이 주는 힘이 느껴진다.</p>\n<h2 id=\"반복되는-행위를-수행할-수-있다\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5%EB%90%98%EB%8A%94-%ED%96%89%EC%9C%84%EB%A5%BC-%EC%88%98%ED%96%89%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"반복되는 행위를 수행할 수 있다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복되는 행위를 수행할 수 있다</h2>\n<p>만약 위 코드에서 <code class=\"language-text\">List&lt;String> players</code>와 <code class=\"language-text\">int playCount</code>가 넓은 범위에서 사용되면서, 동시에 각 변수를 사용하는 데 있어 반복되는 행위가 있다면 어떨까?</p>\n<p>가령, 다양한 곳에서 각 Player들에게 playCount만큼 게임을 Play하는 행위가 이뤄져야 한다면 각 변수가 존재하는 메서드마다 실행 코드를 작성해줘야 할 것이다.</p>\n<p>하지만 값을 포장하여 새로운 객체를 만든다면, 객체 간의 협력을 통해 충분히 수행할 수 있을 것이다.</p>\n<p>이는 유지보수 관점에서 큰 강점이다!</p>\n<hr>\n<p>추가로, 만약 playCount가 몇 회 이하여야 한다는 요구사항이 있을 경우를 생각해보자.</p>\n<p>해당 경우에도 <code class=\"language-text\">PlayCount</code> 객체에서 애초에 객체를 생성할 때 검증을 해주면 된다.</p>\n<p>그러면 해당 객체를 사용하는 모든 곳에서 검증을 해주지 않아도 된다!</p>\n<h2 id=\"일급-컬렉션\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B8%89-%EC%BB%AC%EB%A0%89%EC%85%98\" aria-label=\"일급 컬렉션 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일급 컬렉션</h2>\n<p>일급 컬렉션은 컬렉션을 감싼 객체이다.</p>\n<p>사실, 일급 컬렉션도 값을 포장한 객체이므로 위에서 언급한 장점들이 모두 적용된다고 볼 수 있다.</p>","tableOfContents":"<ul>\n<li><a href=\"#%EC%84%B8-%EC%A4%84-%EC%9A%94%EC%95%BD\">세 줄 요약</a></li>\n<li><a href=\"#%EC%9B%90%EC%8B%9C%EA%B0%92%EA%B3%BC-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%9D%84-%ED%8F%AC%EC%9E%A5%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%98%EC%9D%84-%EB%95%8C\">원시값과 문자열을 포장하지 않았을 때</a></li>\n<li><a href=\"#%EB%B0%98%EB%B3%B5%EB%90%98%EB%8A%94-%ED%96%89%EC%9C%84%EB%A5%BC-%EC%88%98%ED%96%89%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\">반복되는 행위를 수행할 수 있다</a></li>\n<li><a href=\"#%EC%9D%BC%EA%B8%89-%EC%BB%AC%EB%A0%89%EC%85%98\">일급 컬렉션</a></li>\n</ul>","frontmatter":{"title":"모든 원시값과 문자열을 포장한다. 왜?","date":"2023년 12월 13일","description":"원시값과 문자열을 포장하면 좋은 점 + 일급 컬렉션","tags":["java","oop","clean-code"]}},"previous":{"fields":{"slug":"/why-series/why-use-collection-instead-of-array/"},"frontmatter":{"title":"배열 대신 컬렉션을 쓴다. 왜?"}},"next":{"fields":{"slug":"/database/real-mysql-book-study/04-mysql-engine-architecture/"},"frontmatter":{"title":"MySQL 엔진 아키텍처"}}},"pageContext":{"id":"82b5460e-8849-569f-a103-1eb29ce1160e","previousPostId":"3c3fee0b-39c2-5c2b-9116-5a28cb7168cb","nextPostId":"1e53b2f6-f045-5b28-9a80-c2a26a703f77"}},"staticQueryHashes":["1475414628","2841359383"],"slicesMap":{}}