{"componentChunkName":"component---src-templates-post-jsx","path":"/covariant-invariant-and-pecs/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","excerpt":"들어가며 제네릭을 공부하다보면 배열과 잘 어울리기 어렵다는 내용과 함께 자주 등장하는 용어인, 공변과 불공변, 그리고 실체화가 있다. 잘 사용하지 않는 단어인, 공변과 불공변, 그리고 실체화가 각각 어떤 의미를 가지는지 알아보고\n왜 제네릭과 배열은 잘 어울리지 못하는지에 대해 알아보자. 또한, 제네릭을 이용해 범용성 있는 API(public 메서드)를 작…","html":"<h2>들어가며</h2>\n<p>제네릭을 공부하다보면 배열과 잘 어울리기 어렵다는 내용과 함께 자주 등장하는 용어인, <strong>공변</strong>과 <strong>불공변</strong>, 그리고 <strong>실체화</strong>가 있다.</p>\n<p>잘 사용하지 않는 단어인, 공변과 불공변, 그리고 실체화가 <strong>각각 어떤 의미</strong>를 가지는지 알아보고<br>\n<strong>왜 제네릭과 배열은 잘 어울리지 못하는지</strong>에 대해 알아보자.</p>\n<p>또한, 제네릭을 이용해 범용성 있는 API(public 메서드)를 작성하기 위해 알아야 하는 <strong>PECS</strong>에 대해서도 알아보자.</p>\n<br>\n<br>\n<hr>\n<h2>1. 공변과 불공변, 그리고 실체화</h2>\n<h3>1-1. 공변과 불공변</h3>\n<p><strong>배열은 공변</strong>이다.<br>\n공변이라는 뜻은, <code class=\"language-text\">Sub</code> 클래스가 <code class=\"language-text\">Super</code> 클래스의 하위 타입이라면 <code class=\"language-text\">Sub[]</code>는 <code class=\"language-text\">Super[]</code>의 하위 타입이 된다는 의미다.<br>\n즉, <strong>함께 변한다</strong>는 의미로 해석된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Fruit</span> fruit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Fruit</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> fruits <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span></code></pre></div>\n<br>\n<p>반면, <strong>제네릭은 불공변</strong>이다.<br>\n마찬가지로 <code class=\"language-text\">Sub</code>가 <code class=\"language-text\">Super</code>의 하위타입이라 해도, <code class=\"language-text\">&lt;Sub></code>는 <code class=\"language-text\">&lt;Super></code>의 하위 타입이 아니다.<br>\n전혀 다른 타입이 된다.<br>\n즉, <strong>함께 변하지 않는다</strong>는 의미로 해석된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴파일 에러. 제네릭 타입이 서로 다르다.</span></code></pre></div>\n<h3>1-2. 실체화</h3>\n<p>배열과 제네릭의 또 다른 차이로는 <strong>런타임 시에 실체화</strong>가 된다는 것이다.</p>\n<p>배열의 경우, 런타임에 타입 정보가 존재해야 한다. 즉, 배열은 어떤 타입인지 이미 알고 있다.<br>\n제네릭의 경우, 런타임에 타입 정보가 없다. 컴파일 시에 타입을 검사하고 <strong>소거</strong>하여 런타임에는 타입에 대한 정보가 없다.</p>\n<h2>2. 패러다임 차이</h2>\n<p>이렇게 <strong>배열과 제네릭은 패러다임의 차이가 존재</strong>한다.<br>\n이로 인해 둘을 어울리기 쉽지 않다.</p>\n<p>한 사례로, <strong>제네릭 배열은 생성하지 못한다</strong>.</p>\n<h3>2-1. 만약 제네릭 배열의 생성이 가능하다면</h3>\n<p>만약 제네릭 배열이 생성 가능한 상황을 가정해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> stringList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 매개변수화 타입이 List&lt;String>인 제네릭 배열 선언</span>\nstringList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제네릭 배열 생성</span>\n\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 매개변수화 타입이 List&lt;Integer>인 리스트 초기화</span>\n<span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> stringList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// stringList 배열을 Object[]로 업캐스팅. 배열의 공변성 때문에 가능.</span>\nobject<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> intList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Object[]에 List&lt;Integer> 타입의 변수 할당. 제네릭의 소거 때문에 가능.</span>\n\n<span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> stringList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 제네릭 정보로 인해 컴파일러는 자동으로 String으로 캐스팅한다. 이때, ClassCastException 발생</span></code></pre></div>\n<p>위에서 언급한 제네릭과 배열의 특징을 다시 상기해보자.<br>\n제네릭은 컴파일 타임에 타임 체크와 캐스팅을 강제한다.<br>\n반면, 배열은 그렇지 않으며 공변한다.<br></p>\n<p><strong>제네릭이 배열에 포함된다면, 제네릭은 결국 기능을 상실하게 되고 런타임에 <code class=\"language-text\">ClassCastException</code>이 발생할 수 있게 되는 것</strong>이다.<br></p>\n<h3>2-2. 제네릭 배열의 선언은 가능하다?</h3>\n<p>제네릭 배열이 <strong>생성은 불가</strong>하지만, <strong>선언은 가능</strong>하다.<br>\n예를 들어, 가변인자 타입으로 제네릭을 받을 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> ints<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// 가변인자의 타입이 List&lt;Integer>로, 제네릭 타입이다.</span></code></pre></div>\n<p>하지만 제네릭 배열을 사용하는 것은 <strong>Heap Pollution</strong>을 일으킬 수 있다고 친절하게 경고를 한다.<br>\n약간 모순처럼 느껴지지만 이를 허용하는 이유는 <strong>편리성</strong> 때문이라고 한다.<br>\n대신 반드시 안정성도 함께 챙겨야 한다!</p>\n<p>제네릭 타입 배열(가변인자)를 선언하고 사용할 때, 안정성은 어떻게 챙길 수 있을까?</p>\n<p>우선 <em>Heap Pollution</em>에 대해 이해해보자.</p>\n<p>Heap Pollution은 <strong>매개변수화된 타입의 변수(ints)가 타입이 다른 객체(ex. List<String>)를 참조하면 발생</strong>하는 것이다.<br>\n말이 조금 어려운데 코드로 이해해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">firstValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> intLists<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> intLists<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> strList <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> strList<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 힙 오염 발생!</span>\n\n    <span class=\"token keyword\">return</span> intLists<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에서 봤던 제네릭 배열을 생성했을 때 생기는 문제와 동일하다.<br>\n결국 배열의 공변성 때문에 제네릭의 타입 강제성이 사라지게 되어 런타임 시에 제네릭 타입이 다른 매개변수화된 타입이 배열에 할당되는 것이다.</p>\n<p>따라서 위 문제만 사전에 완벽히 차단한다면, 안정성을 챙기게 되는 것이다.<br>\n메서드 내부에서는 가변인자 배열에 새로운 값을 저장하지 말고, 배열의 참조가 메서드 외부로 유출되지 않는다면 안정성을 보장할 수 있다.<br>\n안전하다고 판단되면 <code class=\"language-text\">@SafeVarargs</code> 어노테이션을 붙여주어 메서드를 사용하는 코드 쪽에서도 불필요한 경고를 제거해주자.</p>\n<h2>3. PECS</h2>\n<p>PECS는 <em>Producer-Extends, Consumer-Super</em> 의 약자로, 와일드카드로 제네릭 타입을 제한할 때 사용하는 공식이다.</p>\n<p>생산자는 <code class=\"language-text\">extends</code>를, 소비자는 <code class=\"language-text\">super</code>를 사용하라는 뜻인데, 생산자와 소비자는 각각 무엇을 의미하는 것이며 이 공식이 왜 탄생했을까?</p>\n<h3>3-1. 제네릭은 불공변하기 때문이다</h3>\n<p>위에서 언급했듯이, 제네릭은 불공변하다.<br>\n때문에 유연성이 다소 부족할 수 있는데, 이를 개선하기 위해 PECS가 탄생했다.<br>\n유연성이 부족한 상황을 코드로 살펴보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Stack</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Stack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 코드가 있다.<br>\n얼핏 보면, 문제는 없어보인다.</p>\n<p>하지만 <code class=\"language-text\">Stack&lt;Number> stack</code>에 <code class=\"language-text\">Iterable&lt;Integer> ints</code>를 인자로 넘기면 컴파일 오류가 발생한다.<br>\n가능할 것 같은데 왜 실패할까?</p>\n<p><code class=\"language-text\">Stack&lt;Number> stack</code>의 메서드 시그니처는 <code class=\"language-text\">pushAll(Iterable&lt;Number> src)</code>와 같을 것이다.<br>\n이때, 제네릭의 불공변 때문에 <code class=\"language-text\">Iterable&lt;Integer></code>과 <code class=\"language-text\">Iterable&lt;Number></code>는 다르다.<br>\n이러한 상황들 때문에 제네릭은 유연성이 다소 부족한 것이다.</p>\n<p>자바는 이런 상황을 보다 유연하게 만들기 위해 와일드카드를 지원하는 것이다.</p>\n<p>그럼 이제 <code class=\"language-text\">pushAll(Iterable&lt;E>)</code> 메서드를 와일드카드를 이용해 유연하게 만들면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pushAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e <span class=\"token operator\">:</span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>드디어 <code class=\"language-text\">Iterable&lt;Integer></code> 타입도 안전하게 파라미터로 전달할 수 있게 되었다.<br>\n참고로 매개변수가 클래스에 값을 <strong>생산</strong>하고 있다.</p>\n<br>\n<p>그럼 반대로 값을 모두 뽑아 옮기는 <code class=\"language-text\">popAll()</code> 메서드도 만들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">popAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 메서드도 얼핏 보면 문제 없어보인다.<br>\n하지만 <code class=\"language-text\">Stack&lt;Integer> stack</code>의 모든 원소를 <code class=\"language-text\">Collection&lt;Number></code> 로 옮기려고 하면 컴파일 에러가 발생한다.<br>\n왜냐하면, <code class=\"language-text\">Integer</code> 타입을, <code class=\"language-text\">Collection&lt;Number></code>에 추가하려고 했기 때문이다.<br>\n제네릭의 불공변 때문에 <code class=\"language-text\">Integer</code>와 <code class=\"language-text\">Number</code>는 다르다.</p>\n<p>이제 이를 와일드카드로 해결해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">popAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>드디어 <code class=\"language-text\">Collection&lt;Number></code> 타입도 파라미터로 전달할 수 있게 됐다.<br>\n참고로 매개변수가 제네릭 클래스의 값을 <strong>소비</strong>하고 있다.</p>\n<br>\n<p>이처럼 제네릭 메서드의 유연함을 강화하기 위해 PECS는 탄생했다.<br>\n생산자는 <code class=\"language-text\">extends</code>, 소비자는 <code class=\"language-text\">super</code>를 사용한다.<br>\n메서드 <strong>매개변수가 제네릭 클래스에 값을 생산하면 생산자</strong>.<br>\n메서드 <strong>매개변수가 제네릭 클래스의 값을 소비하면 소비자</strong>라는 의미로 이름을 붙인다.</p>\n<p>처음 생산자, 소비자 단어를 접하면 한번에 이해가 잘 되지 않을 수 있다.<br>\n이럴 땐 파라미터 관점에서 제네릭 클래스의 값을 생산하거나 소비하는 관점으로 보면 조금은 와닿을 수 있다.   </p>","frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS","date":"April 23, 2024","update":null,"tags":["java","공변, 불공변","PECS"],"series":null},"fields":{"slug":"/covariant-invariant-and-pecs/","readingTime":{"minutes":10.77}}},"seriesList":{"edges":[{"node":{"id":"a30ff988-ea74-5562-b241-90fbff73a3da","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"title":"키스소프트 현장실습 회고"}}},{"node":{"id":"aedd8f5b-dd45-5a14-9b57-3a48cdc0b641","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?"}}},{"node":{"id":"d41198ca-d162-523b-84f8-128b247a19b4","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"[셀럽잇] HTTPS 적용기"}}},{"node":{"id":"3b94cbd6-f64a-5d82-96a2-0761602c250b","fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},{"node":{"id":"c418073e-50be-5fe1-807d-478c9c47f640","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"title":"무중단 배포 이해하기"}}},{"node":{"id":"c5760ea9-e137-5edf-8244-3a93e25b067b","fields":{"slug":"/unit-test/"},"frontmatter":{"title":"단위 테스트 이해하기"}}},{"node":{"id":"8ae82b3f-5b72-555c-89fe-9939dcf8377c","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"title":"JUnit과 AssertJ 활용법"}}},{"node":{"id":"91a7a622-00f8-5cca-b6c1-e4f7db7ee31e","fields":{"slug":"/about-tdd/"},"frontmatter":{"title":"TDD 이해하기"}}},{"node":{"id":"10e0dab4-d2e7-52df-8daa-31bfef1b08b6","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"title":"static을 더 잘 사용하기"}}},{"node":{"id":"c773b0a0-9610-5605-bdb9-9089df57f52b","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}}},{"node":{"id":"0bf99b61-98a4-5c40-b8ce-05a918d212f7","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"title":"Garbage Collection 튜닝에 대해"}}},{"node":{"id":"61bd95c2-424a-54c8-96d9-bec4c8a4f58c","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},{"node":{"id":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}}},{"node":{"id":"c2d7615d-6232-5fce-8794-f4c790106bb5","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"title":"2023년 회고록"}}},{"node":{"id":"def28d41-907f-5432-8060-ed5429114882","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP"}}},{"node":{"id":"9bf8ca89-e021-526b-a7b5-2cce0b1e366f","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기"}}},{"node":{"id":"01318426-7520-5a57-92ff-c917e1483247","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"title":"[Spring] @Controller와 @RestController 비교하기"}}},{"node":{"id":"bc68fa05-ec4a-5e12-a9b8-4e58769887df","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기"}}},{"node":{"id":"122a1e9c-6fe5-5e7f-b797-a31f54d086b0","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"title":"CPU 아키텍처란?"}}},{"node":{"id":"c23a12ff-7b48-57ef-91ed-81f5386d680a","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"title":"[github] Github Repository에 Issue, PR Template 적용하기"}}},{"node":{"id":"b1dc584d-3c69-5ae8-82a8-09b015fa3d02","fields":{"slug":"/oauth-test/"},"frontmatter":{"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기"}}},{"node":{"id":"9f43b8a7-b5ce-5766-b984-3ed0775d698f","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI"}}},{"node":{"id":"e1b2a9fb-d6e3-5f65-9f50-d3a30c2518d1","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"title":"[Java] JDBC 파헤쳐보기"}}},{"node":{"id":"81b7fb10-f532-5f48-a797-379c3bb99bee","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준"}}},{"node":{"id":"adfb7cc4-25f1-5b31-8060-e40d763b0afe","fields":{"slug":"/sovle-concurrency-problem/"},"frontmatter":{"title":"[ListyWave] 리스트 수정 시, 동시성 이슈 발생 확인 및 해결기"}}},{"node":{"id":"5ecb4a12-dc98-589f-94e0-695fb2d84fab","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"title":"[MySQL] 바이너리 로그로 데이터 복구하기"}}},{"node":{"id":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}}},{"node":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS"}}},{"node":{"id":"7b9b6854-62e7-5f25-afbf-d5459fa5d021","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},{"node":{"id":"d77e8b24-f01d-5673-8c55-d93e2d110c4f","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기"}}},{"node":{"id":"b4550a40-b215-5e9a-a6a7-8c27bfb63e25","fields":{"slug":"/continuous-deploy-using-github-actions-and-docker/"},"frontmatter":{"title":"[Infra] Github Actions와 Docker를 이용해 배포 자동화 구축하기"}}},{"node":{"id":"e38bb1ed-1a51-5947-a1d2-52aaae42ac97","fields":{"slug":"/build-monitoring-system/"},"frontmatter":{"title":"[Infra] Prometheus와 Grafana, 그리고 Docker를 이용해 모니터링 대시보드 구축하기"}}},{"node":{"id":"961e4fc3-1d57-55a3-99fd-9e1233cef1dd","fields":{"slug":"/june-3rd/"},"frontmatter":{"title":"[회고] 06.10 ~ 06.16"}}},{"node":{"id":"fcade266-d38c-5c36-a3b7-87d56d9be862","fields":{"slug":"/june-4th-and-5th/"},"frontmatter":{"title":"[회고] 06.17 ~ 06.30"}}},{"node":{"id":"7b64a367-9192-557d-b45d-0e3bc68d44d3","fields":{"slug":"/thread-in-jvm/"},"frontmatter":{"title":"Java Thread 1 - Java의 Thread에 대해 알아보자"}}},{"node":{"id":"9e5a98c2-ba89-5b36-8e72-0028211a2c5b","fields":{"slug":"/status-and-control-thread-in-java/"},"frontmatter":{"title":"Java Thread 2 - Java Thread의 상태와 행동을 제어하는 방법"}}},{"node":{"id":"45a781cf-0e04-559c-a853-d1609dab1bd4","fields":{"slug":"/synchronize-threads/"},"frontmatter":{"title":"Java Thread 3 - Thread 동기화하기"}}},{"node":{"id":"236f7305-5647-51fe-800e-61577d25cd0c","fields":{"slug":"/july-1st/"},"frontmatter":{"title":"[회고] 07.01 ~ 07.07"}}},{"node":{"id":"abad5436-5cba-50a3-8fda-72440c646a78","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 설계 원칙: SOLID"}}},{"node":{"id":"f113bb3f-df7e-589a-b3c1-378c812ac8da","fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}}},{"node":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}}},{"node":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},{"node":{"id":"4a801b76-317f-5129-a330-84fc989993c8","fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},{"node":{"id":"549069af-32e1-578d-a8c0-7524f6305a7d","fields":{"slug":"/execute-and-executeUpdate-of-jdbc/"},"frontmatter":{"title":"[JDBC] execute(String)과 execute(). executeUpdate(String)와 executeUpdate()의 차이"}}},{"node":{"id":"e0484580-3f9a-597b-bdb4-386532933e65","fields":{"slug":"/log-and-disk/"},"frontmatter":{"title":"EC2 CPU 사용량이 급격히 늘어난 문제 해결"}}},{"node":{"id":"3b97179a-f8a3-521b-a603-cfa1453ea898","fields":{"slug":"/august-1st/"},"frontmatter":{"title":"[회고] 07.29 ~ 08.04"}}},{"node":{"id":"5e74fe27-5b86-593d-bade-e5c49c12e0fc","fields":{"slug":"/august-2st/"},"frontmatter":{"title":"[회고] 08.05 ~ 08.11"}}},{"node":{"id":"82a59d7d-5e43-514c-90b4-af486ef16006","fields":{"slug":"/difference-sqrtN-and-logN/"},"frontmatter":{"title":"O(sqrt(N))과 O(log2(N))의 차이"}}},{"node":{"id":"e3cbab1b-4b2b-5107-8b23-51731a167d08","fields":{"slug":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/"},"frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법"}}},{"node":{"id":"4a31fa04-183a-59a7-95bf-2136289c3d78","fields":{"slug":"/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}}}]},"previous":{"fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}},"next":{"fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},"pageContext":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","series":null,"previousPostId":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","nextPostId":"7b9b6854-62e7-5f25-afbf-d5459fa5d021"}},"staticQueryHashes":[],"slicesMap":{}}