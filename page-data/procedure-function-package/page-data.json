{"componentChunkName":"component---src-templates-post-jsx","path":"/procedure-function-package/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","excerpt":"DB의 프로시저(Procedure), 함수(Function), 패키지(Package)에 대해 간단히 알아보자.\n그리고 프로시저와 함수의 차이에 대해서도 알아보자. 프로시저 DB 프로시저는 데이터베이스에 저장된 일련의 쿼리와 절차적 코드를 포함하는 프로그램이다.\n주로, 데이터베이스 내 복잡한 작업을 자동화하거나 반복적인 작업을 처리하는 데 사용된다. 주요 …","html":"<p>DB의 프로시저(Procedure), 함수(Function), 패키지(Package)에 대해 간단히 알아보자.<br>\n그리고 프로시저와 함수의 차이에 대해서도 알아보자.</p>\n<h2>프로시저</h2>\n<p>DB 프로시저는 <strong>데이터베이스에 저장된 일련의 쿼리와 절차적 코드를 포함하는 프로그램</strong>이다.<br>\n주로, 데이터베이스 내 복잡한 작업을 자동화하거나 반복적인 작업을 처리하는 데 사용된다.</p>\n<h3>주요 특징</h3>\n<ol>\n<li>모듈성: 프로시저는 독립적인 모듈로서 여러 곳에서 재사용될 수 있다.</li>\n<li>성능 향상: SQL 쿼리를 미리 컴파일해 저장하기에 실행 시 더 빠르게 처리된다.</li>\n<li>반환 값 없음: 프로시저는 반환 값이 없어도 된다. 혹, 반환값이 있을 경우 <code class=\"language-text\">OUT</code> 매개변수를 이용해 반환한다.</li>\n<li>에러 처리: 프로시저 내에서 에러를 처리할 수 있다. </li>\n</ol>\n<h3>사용 예시 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 프로시저 호출</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> update_employee_salary {\n    <span class=\"token comment\">-- 파라미터 1</span>\n    <span class=\"token operator\">IN</span> employee_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">-- 파라미터 2</span>\n    <span class=\"token operator\">IN</span> new_salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n}\n<span class=\"token comment\">-- 실행부</span>\n<span class=\"token keyword\">BEGIN</span>\n    <span class=\"token keyword\">UPDATE</span> employees\n    <span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> new_salary\n    <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> employee_id<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 프로시저 호출</span>\n<span class=\"token keyword\">CALL</span> update_employee_salary<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>함수</h2>\n<p>DB 함수는 <strong>특정 작업을 수행하고 하나의 값을 반환하는 쿼리 블록</strong>이다.<br>\n주로 데이터를 계산하거나 변환하는 데 사용된다.</p>\n<h3>주요 특징</h3>\n<ol>\n<li>반환 값 필수: 함수는 항상 하나의 값을 반환해야 한다.</li>\n<li>호출 방식: 쿼리 내에서 호출될 수 있으며, SELECT 문 등에서 사용될 수 있다.</li>\n<li>트랜젝션 제어 불가: 트랜잭션을 제어하는 COMMIT, ROLLBACK 명령어가 포함될 수 없다.</li>\n</ol>\n<h3>사용 예시 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- 함수 선언</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> get_employee_salary {\n    <span class=\"token comment\">-- 파라미터</span>\n    employee_id <span class=\"token keyword\">INT</span>\n} <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">-- 실행부</span>\n<span class=\"token keyword\">BEGIN</span>\n    <span class=\"token keyword\">DECLARE</span> employee_salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">INTO</span> employee_salary\n    <span class=\"token keyword\">FROM</span> employees\n    <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> employee_id\n    <span class=\"token keyword\">RETURN</span> employee_salary<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>패키지</h2>\n<p>DB 패키지는 <strong>프로시저, 함수, 변수, 커서 등 DB 객체를 그룹화한 논리적인 단위</strong>이다.<br>\nHeader와 Body로 나뉜다.</p>\n<h3>주요 특징</h3>\n<ol>\n<li>관련 프로시저와 함수를 논리적인 한 단위로 묶음으로써 큰 단위의 모듈을 구축할 수 있다.</li>\n<li>패키지가 처음 호출될 때 메모리에 로드되므로 이후 이후의 호출에는 더 빠르게 실행된다.</li>\n</ol>\n<h3>사용 예시 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token comment\">-- Header부</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> PACKAGE employee_pkg <span class=\"token operator\">IS</span>\n    <span class=\"token keyword\">PROCEDURE</span> update_salary<span class=\"token punctuation\">(</span>employee_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> new_salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    FUNTION get_salary<span class=\"token punctuation\">(</span>employee_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURN</span> <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">;</span>\n}\n\n<span class=\"token comment\">-- Body부</span>\n<span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> PACKAGE BODY employee_pkg <span class=\"token operator\">IS</span>\n    <span class=\"token keyword\">PROCEDURE</span> update_salary<span class=\"token punctuation\">(</span>employee_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span> new_salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">IS</span>\n    <span class=\"token keyword\">BEGIN</span>\n        <span class=\"token keyword\">UPDATE</span> employees\n        <span class=\"token keyword\">SET</span> salary <span class=\"token operator\">=</span> new_salary\n        <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> employee_id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">END</span> update_salary<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">FUNCTION</span> get_salary<span class=\"token punctuation\">(</span>employee_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURN</span> <span class=\"token keyword\">DECIMAL</span> <span class=\"token operator\">IS</span>\n        employee_salary <span class=\"token keyword\">DECIMAL</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">BEGIN</span>\n        <span class=\"token keyword\">SELECT</span> salary <span class=\"token keyword\">INTO</span> employee_salary\n        <span class=\"token keyword\">FROM</span> employees\n        <span class=\"token keyword\">WHERE</span> id <span class=\"token operator\">=</span> employee_id\n        <span class=\"token keyword\">RETURN</span> employee_salary<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">END</span> get_salary\n<span class=\"token keyword\">END</span> employee_pkg<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">-- 패키지 내 프로시저 호출</span>\n<span class=\"token keyword\">EXEC</span> employee_pkg<span class=\"token punctuation\">.</span>update_salary<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20000.00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">-- 패키지 내 함수 호출</span>\n<span class=\"token keyword\">SELECT</span> employee_pkg<span class=\"token punctuation\">.</span>get_salary<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">FROM</span> dual<span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해","date":"July 22, 2024","update":null,"tags":["DB"],"series":null},"fields":{"slug":"/procedure-function-package/","readingTime":{"minutes":3.685}}},"seriesList":{"edges":[{"node":{"id":"a30ff988-ea74-5562-b241-90fbff73a3da","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"title":"키스소프트 현장실습 회고"}}},{"node":{"id":"aedd8f5b-dd45-5a14-9b57-3a48cdc0b641","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?"}}},{"node":{"id":"d41198ca-d162-523b-84f8-128b247a19b4","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"[셀럽잇] HTTPS 적용기"}}},{"node":{"id":"3b94cbd6-f64a-5d82-96a2-0761602c250b","fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},{"node":{"id":"c418073e-50be-5fe1-807d-478c9c47f640","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"title":"무중단 배포 이해하기"}}},{"node":{"id":"c5760ea9-e137-5edf-8244-3a93e25b067b","fields":{"slug":"/unit-test/"},"frontmatter":{"title":"단위 테스트 이해하기"}}},{"node":{"id":"8ae82b3f-5b72-555c-89fe-9939dcf8377c","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"title":"JUnit과 AssertJ 활용법"}}},{"node":{"id":"91a7a622-00f8-5cca-b6c1-e4f7db7ee31e","fields":{"slug":"/about-tdd/"},"frontmatter":{"title":"TDD 이해하기"}}},{"node":{"id":"10e0dab4-d2e7-52df-8daa-31bfef1b08b6","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"title":"static을 더 잘 사용하기"}}},{"node":{"id":"c773b0a0-9610-5605-bdb9-9089df57f52b","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}}},{"node":{"id":"0bf99b61-98a4-5c40-b8ce-05a918d212f7","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"title":"Garbage Collection 튜닝에 대해"}}},{"node":{"id":"61bd95c2-424a-54c8-96d9-bec4c8a4f58c","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},{"node":{"id":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}}},{"node":{"id":"c2d7615d-6232-5fce-8794-f4c790106bb5","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"title":"2023년 회고록"}}},{"node":{"id":"def28d41-907f-5432-8060-ed5429114882","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP"}}},{"node":{"id":"9bf8ca89-e021-526b-a7b5-2cce0b1e366f","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기"}}},{"node":{"id":"01318426-7520-5a57-92ff-c917e1483247","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"title":"[Spring] @Controller와 @RestController 비교하기"}}},{"node":{"id":"bc68fa05-ec4a-5e12-a9b8-4e58769887df","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기"}}},{"node":{"id":"122a1e9c-6fe5-5e7f-b797-a31f54d086b0","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"title":"CPU 아키텍처란?"}}},{"node":{"id":"c23a12ff-7b48-57ef-91ed-81f5386d680a","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"title":"[github] Github Repository에 Issue, PR Template 적용하기"}}},{"node":{"id":"b1dc584d-3c69-5ae8-82a8-09b015fa3d02","fields":{"slug":"/oauth-test/"},"frontmatter":{"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기"}}},{"node":{"id":"9f43b8a7-b5ce-5766-b984-3ed0775d698f","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI"}}},{"node":{"id":"e1b2a9fb-d6e3-5f65-9f50-d3a30c2518d1","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"title":"[Java] JDBC 파헤쳐보기"}}},{"node":{"id":"81b7fb10-f532-5f48-a797-379c3bb99bee","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준"}}},{"node":{"id":"adfb7cc4-25f1-5b31-8060-e40d763b0afe","fields":{"slug":"/sovle-concurrency-problem/"},"frontmatter":{"title":"[ListyWave] 리스트 수정 시, 동시성 이슈 발생 확인 및 해결기"}}},{"node":{"id":"5ecb4a12-dc98-589f-94e0-695fb2d84fab","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"title":"[MySQL] 바이너리 로그로 데이터 복구하기"}}},{"node":{"id":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}}},{"node":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS"}}},{"node":{"id":"7b9b6854-62e7-5f25-afbf-d5459fa5d021","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},{"node":{"id":"d77e8b24-f01d-5673-8c55-d93e2d110c4f","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기"}}},{"node":{"id":"b4550a40-b215-5e9a-a6a7-8c27bfb63e25","fields":{"slug":"/continuous-deploy-using-github-actions-and-docker/"},"frontmatter":{"title":"[Infra] Github Actions와 Docker를 이용해 배포 자동화 구축하기"}}},{"node":{"id":"e38bb1ed-1a51-5947-a1d2-52aaae42ac97","fields":{"slug":"/build-monitoring-system/"},"frontmatter":{"title":"[Infra] Prometheus와 Grafana, 그리고 Docker를 이용해 모니터링 대시보드 구축하기"}}},{"node":{"id":"961e4fc3-1d57-55a3-99fd-9e1233cef1dd","fields":{"slug":"/june-3rd/"},"frontmatter":{"title":"[회고] 06.10 ~ 06.16"}}},{"node":{"id":"fcade266-d38c-5c36-a3b7-87d56d9be862","fields":{"slug":"/june-4th-and-5th/"},"frontmatter":{"title":"[회고] 06.17 ~ 06.30"}}},{"node":{"id":"7b64a367-9192-557d-b45d-0e3bc68d44d3","fields":{"slug":"/thread-in-jvm/"},"frontmatter":{"title":"Java Thread 1 - Java의 Thread에 대해 알아보자"}}},{"node":{"id":"9e5a98c2-ba89-5b36-8e72-0028211a2c5b","fields":{"slug":"/status-and-control-thread-in-java/"},"frontmatter":{"title":"Java Thread 2 - Java Thread의 상태와 행동을 제어하는 방법"}}},{"node":{"id":"45a781cf-0e04-559c-a853-d1609dab1bd4","fields":{"slug":"/synchronize-threads/"},"frontmatter":{"title":"Java Thread 3 - Thread 동기화하기"}}},{"node":{"id":"236f7305-5647-51fe-800e-61577d25cd0c","fields":{"slug":"/july-1st/"},"frontmatter":{"title":"[회고] 07.01 ~ 07.07"}}},{"node":{"id":"abad5436-5cba-50a3-8fda-72440c646a78","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 설계 원칙: SOLID"}}},{"node":{"id":"f113bb3f-df7e-589a-b3c1-378c812ac8da","fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}}},{"node":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}}},{"node":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},{"node":{"id":"4a801b76-317f-5129-a330-84fc989993c8","fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},{"node":{"id":"549069af-32e1-578d-a8c0-7524f6305a7d","fields":{"slug":"/execute-and-executeUpdate-of-jdbc/"},"frontmatter":{"title":"[JDBC] execute(String)과 execute(). executeUpdate(String)와 executeUpdate()의 차이"}}},{"node":{"id":"e0484580-3f9a-597b-bdb4-386532933e65","fields":{"slug":"/log-and-disk/"},"frontmatter":{"title":"EC2 CPU 사용량이 급격히 늘어난 문제 해결"}}},{"node":{"id":"3b97179a-f8a3-521b-a603-cfa1453ea898","fields":{"slug":"/august-1st/"},"frontmatter":{"title":"[회고] 07.29 ~ 08.04"}}}]},"previous":{"fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}},"next":{"fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},"pageContext":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","series":null,"previousPostId":"f113bb3f-df7e-589a-b3c1-378c812ac8da","nextPostId":"ac276a35-d955-59ae-9f71-28ad65030c42"}},"staticQueryHashes":[],"slicesMap":{}}