{"componentChunkName":"component---src-templates-post-jsx","path":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"e3cbab1b-4b2b-5107-8b23-51731a167d08","excerpt":"개요 1300:K번째 수나 1637:날카로운 눈 문제를 풀면서 '일정하게 증가하는 수열에서 특정 값(x)보다 같거나 작은 값의 개수를 세는' 경우가 존재했다.\n풀다보니 위 로직이 공식처럼 딱 들어맞는 것을 발견했고 이를 정리하고자 한다. 코드 우선 코드로 살펴보자.\n아래 코드는 1637:날카로운 눈 문제를 해결하며 적용한 메서드를 간소화 한 코드다. 각 …","html":"<h2>개요</h2>\n<p><a href=\"https://www.acmicpc.net/problem/1300\">1300:K번째 수</a>나 <a href=\"https://www.acmicpc.net/problem/1637\">1637:날카로운 눈</a> 문제를 풀면서 '일정하게 증가하는 수열에서 특정 값(x)보다 같거나 작은 값의 개수를 세는' 경우가 존재했다.<br>\n풀다보니 위 로직이 공식처럼 딱 들어맞는 것을 발견했고 이를 정리하고자 한다.</p>\n<h2>코드</h2>\n<p>우선 코드로 살펴보자.<br>\n아래 코드는 <a href=\"https://www.acmicpc.net/problem/1637\">1637:날카로운 눈</a> 문제를 해결하며 적용한 메서드를 간소화 한 코드다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># x: 기준이 되는 수</span>\n<span class=\"token comment\"># a: 수열의 시작값</span>\n<span class=\"token comment\"># c: 수열의 최댓값</span>\n<span class=\"token comment\"># b: 수열이 증가하는 범위</span>\n<span class=\"token comment\"># x보다 작거나 같은 수의 개수를 구하는 함수이다.</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">count_equal_or_lower</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 찾으려는 수가 수열의 최소값보다 작다면, 결과는 0이다. </span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token comment\"># x, c 중에서 작은 값을 고른다.</span>\n    <span class=\"token comment\"># 주어진 수열(a부터 c까지의 b만큼 증가하는 수열)의 범위의 끝을 설정한다.</span>\n    <span class=\"token comment\"># 탐색 범위를 좁히는 것이다.</span>\n    max_val <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token comment\"># max_val이 탐색 범위의 최솟값(a) 미만이면 결과는 0이다. </span>\n    <span class=\"token keyword\">if</span> max_val <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        \n    length <span class=\"token operator\">=</span> max_val <span class=\"token operator\">-</span> a  <span class=\"token comment\"># a부터 max_val까지의 길이를 구한다.</span>\n    count <span class=\"token operator\">=</span> length <span class=\"token operator\">//</span> b  <span class=\"token comment\"># 길이를 b로 나눈다. 이는 즉, 시작값(a)부터 끝값(max_val)까지 b만큼 점프해서 얼만큼 움직이는지 세는 것이다.</span>\n    result <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\"># 맨 처음 값(a)는 점프에 포함되지 않았으므로 1을 더해 값을 보정한다.</span>\n    <span class=\"token keyword\">return</span> result</code></pre></div>\n<p>각 코드에 대한 설명은 주석으로 설명했다.<br>\n그럼 이제 예시를 통해 이해해보자.</p>\n<h2>예시</h2>\n<h3>예시 1: a=1, c=10, b=1</h3>\n<p>다음과 같은 수열이 있다고 가정해보자.<br>\n시작값(a): 1, 최댓값(c): 10, 증가비(1): 1이다.<br>\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</p>\n<p>위 수열에서 7보다 같거나 작은 숫자는 [1, 2, 3, 4, 5, 6, 7] 이다.</p>\n<p>우선 찾으려는 범위를 먼저 정해보자.<br>\n수열의 최댓값(c)과 기준이 되는 수(x) 중, 더 작은 값은 x이다.<br>\n따라서 수열 [1, 2, 3, 4, 5, 6, 7] 안에서 7보다 작은 수를 찾아야 하는 것이다.<br></p>\n<p>여기서부터 핵심인데, 시작 지점인 첫 번째 인덱스(0)로부터 마지막 인덱스(6)까지 b만큼 증가해서 몇 번만에 갈 수 있는지 세면 된다.<br>\n위 수열에서는 b가 1이기 때문에 6번 이동하면 될 것이다.<br>\n그리고 첫 번째 인덱스에 해당하는 값은 횟수에 포함되지 않았으니 +1을 해주어 보정을 해준다.</p>\n<h3>예시 2: a=3, c=23, b=4</h3>\n<p>이번에는 [3, 7, 11, 15, 19, 23] 의 수열이다.<br>\n위 수열에서 기준값 x를 18로 설정해보자.</p>\n<p>우선, 탐색 범위를 설정하자.<br>\n탐색 범위의 시작값은 3이고, 끝값은 <code class=\"language-text\">min(18, 23)</code> 이므로 18가 된다.<br>\n즉, [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18] 내에서 찾게 되는 것이다.<br></p>\n<p>이때에도 마찬가지로 3부터 18까지 b만큼 증가해서 몇 번만에 도착하는지를 세보자.<br>\nb는 4 이므로 3부터 시작해서 [7, 11, 15]를 통해 3번만에 도착할 수 있다.<br>\n여기서 맨 첫 번째 값인 3이 제외되었으니 +1을 해준다.<br>\n결과적으로 [3, 7, 11, 15] 의 수열이 도출되고 총 개수는 4가 된다.<br></p>\n<p>놀랍게도 탐색하는 범위는 3부터 18까지였지만, 시작값부터 b만큼 증가하며 끝값까지 도달하기 위한 숫자들을 보니 모두 수열 [3, 7, 11, 15, 19, 23]에 포함되는 값들이 된다.</p>","frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법","date":"September 07, 2024","update":null,"tags":["algorithm"],"series":null},"fields":{"slug":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/","readingTime":{"minutes":5.01}}},"seriesList":{"edges":[{"node":{"id":"a30ff988-ea74-5562-b241-90fbff73a3da","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"title":"키스소프트 현장실습 회고"}}},{"node":{"id":"aedd8f5b-dd45-5a14-9b57-3a48cdc0b641","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?"}}},{"node":{"id":"d41198ca-d162-523b-84f8-128b247a19b4","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"[셀럽잇] HTTPS 적용기"}}},{"node":{"id":"3b94cbd6-f64a-5d82-96a2-0761602c250b","fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},{"node":{"id":"c418073e-50be-5fe1-807d-478c9c47f640","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"title":"무중단 배포 이해하기"}}},{"node":{"id":"c5760ea9-e137-5edf-8244-3a93e25b067b","fields":{"slug":"/unit-test/"},"frontmatter":{"title":"단위 테스트 이해하기"}}},{"node":{"id":"8ae82b3f-5b72-555c-89fe-9939dcf8377c","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"title":"JUnit과 AssertJ 활용법"}}},{"node":{"id":"91a7a622-00f8-5cca-b6c1-e4f7db7ee31e","fields":{"slug":"/about-tdd/"},"frontmatter":{"title":"TDD 이해하기"}}},{"node":{"id":"10e0dab4-d2e7-52df-8daa-31bfef1b08b6","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"title":"static을 더 잘 사용하기"}}},{"node":{"id":"c773b0a0-9610-5605-bdb9-9089df57f52b","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}}},{"node":{"id":"0bf99b61-98a4-5c40-b8ce-05a918d212f7","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"title":"Garbage Collection 튜닝에 대해"}}},{"node":{"id":"61bd95c2-424a-54c8-96d9-bec4c8a4f58c","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},{"node":{"id":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}}},{"node":{"id":"c2d7615d-6232-5fce-8794-f4c790106bb5","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"title":"2023년 회고록"}}},{"node":{"id":"def28d41-907f-5432-8060-ed5429114882","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP"}}},{"node":{"id":"9bf8ca89-e021-526b-a7b5-2cce0b1e366f","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기"}}},{"node":{"id":"01318426-7520-5a57-92ff-c917e1483247","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"title":"[Spring] @Controller와 @RestController 비교하기"}}},{"node":{"id":"bc68fa05-ec4a-5e12-a9b8-4e58769887df","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기"}}},{"node":{"id":"122a1e9c-6fe5-5e7f-b797-a31f54d086b0","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"title":"CPU 아키텍처란?"}}},{"node":{"id":"c23a12ff-7b48-57ef-91ed-81f5386d680a","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"title":"[github] Github Repository에 Issue, PR Template 적용하기"}}},{"node":{"id":"b1dc584d-3c69-5ae8-82a8-09b015fa3d02","fields":{"slug":"/oauth-test/"},"frontmatter":{"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기"}}},{"node":{"id":"9f43b8a7-b5ce-5766-b984-3ed0775d698f","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI"}}},{"node":{"id":"e1b2a9fb-d6e3-5f65-9f50-d3a30c2518d1","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"title":"[Java] JDBC 파헤쳐보기"}}},{"node":{"id":"81b7fb10-f532-5f48-a797-379c3bb99bee","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준"}}},{"node":{"id":"adfb7cc4-25f1-5b31-8060-e40d763b0afe","fields":{"slug":"/sovle-concurrency-problem/"},"frontmatter":{"title":"[ListyWave] 리스트 수정 시, 동시성 이슈 발생 확인 및 해결기"}}},{"node":{"id":"5ecb4a12-dc98-589f-94e0-695fb2d84fab","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"title":"[MySQL] 바이너리 로그로 데이터 복구하기"}}},{"node":{"id":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}}},{"node":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS"}}},{"node":{"id":"7b9b6854-62e7-5f25-afbf-d5459fa5d021","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},{"node":{"id":"d77e8b24-f01d-5673-8c55-d93e2d110c4f","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기"}}},{"node":{"id":"b4550a40-b215-5e9a-a6a7-8c27bfb63e25","fields":{"slug":"/continuous-deploy-using-github-actions-and-docker/"},"frontmatter":{"title":"[Infra] Github Actions와 Docker를 이용해 배포 자동화 구축하기"}}},{"node":{"id":"e38bb1ed-1a51-5947-a1d2-52aaae42ac97","fields":{"slug":"/build-monitoring-system/"},"frontmatter":{"title":"[Infra] Prometheus와 Grafana, 그리고 Docker를 이용해 모니터링 대시보드 구축하기"}}},{"node":{"id":"961e4fc3-1d57-55a3-99fd-9e1233cef1dd","fields":{"slug":"/june-3rd/"},"frontmatter":{"title":"[회고] 06.10 ~ 06.16"}}},{"node":{"id":"fcade266-d38c-5c36-a3b7-87d56d9be862","fields":{"slug":"/june-4th-and-5th/"},"frontmatter":{"title":"[회고] 06.17 ~ 06.30"}}},{"node":{"id":"7b64a367-9192-557d-b45d-0e3bc68d44d3","fields":{"slug":"/thread-in-jvm/"},"frontmatter":{"title":"Java Thread 1 - Java의 Thread에 대해 알아보자"}}},{"node":{"id":"9e5a98c2-ba89-5b36-8e72-0028211a2c5b","fields":{"slug":"/status-and-control-thread-in-java/"},"frontmatter":{"title":"Java Thread 2 - Java Thread의 상태와 행동을 제어하는 방법"}}},{"node":{"id":"45a781cf-0e04-559c-a853-d1609dab1bd4","fields":{"slug":"/synchronize-threads/"},"frontmatter":{"title":"Java Thread 3 - Thread 동기화하기"}}},{"node":{"id":"236f7305-5647-51fe-800e-61577d25cd0c","fields":{"slug":"/july-1st/"},"frontmatter":{"title":"[회고] 07.01 ~ 07.07"}}},{"node":{"id":"abad5436-5cba-50a3-8fda-72440c646a78","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 설계 원칙: SOLID"}}},{"node":{"id":"f113bb3f-df7e-589a-b3c1-378c812ac8da","fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}}},{"node":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}}},{"node":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},{"node":{"id":"4a801b76-317f-5129-a330-84fc989993c8","fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},{"node":{"id":"549069af-32e1-578d-a8c0-7524f6305a7d","fields":{"slug":"/execute-and-executeUpdate-of-jdbc/"},"frontmatter":{"title":"[JDBC] execute(String)과 execute(). executeUpdate(String)와 executeUpdate()의 차이"}}},{"node":{"id":"e0484580-3f9a-597b-bdb4-386532933e65","fields":{"slug":"/log-and-disk/"},"frontmatter":{"title":"EC2 CPU 사용량이 급격히 늘어난 문제 해결"}}},{"node":{"id":"3b97179a-f8a3-521b-a603-cfa1453ea898","fields":{"slug":"/august-1st/"},"frontmatter":{"title":"[회고] 07.29 ~ 08.04"}}},{"node":{"id":"5e74fe27-5b86-593d-bade-e5c49c12e0fc","fields":{"slug":"/august-2st/"},"frontmatter":{"title":"[회고] 08.05 ~ 08.11"}}},{"node":{"id":"82a59d7d-5e43-514c-90b4-af486ef16006","fields":{"slug":"/difference-sqrtN-and-logN/"},"frontmatter":{"title":"O(sqrt(N))과 O(log2(N))의 차이"}}},{"node":{"id":"e3cbab1b-4b2b-5107-8b23-51731a167d08","fields":{"slug":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/"},"frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법"}}},{"node":{"id":"4a31fa04-183a-59a7-95bf-2136289c3d78","fields":{"slug":"/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}}},{"node":{"id":"f8d4a11d-bb7c-54ba-b752-6f9b50909eb0","fields":{"slug":"/dijkstra/"},"frontmatter":{"title":"다익스트라 알고리즘"}}}]},"previous":{"fields":{"slug":"/difference-sqrtN-and-logN/"},"frontmatter":{"title":"O(sqrt(N))과 O(log2(N))의 차이"}},"next":{"fields":{"slug":"/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}}},"pageContext":{"id":"e3cbab1b-4b2b-5107-8b23-51731a167d08","series":null,"previousPostId":"82a59d7d-5e43-514c-90b4-af486ef16006","nextPostId":"4a31fa04-183a-59a7-95bf-2136289c3d78"}},"staticQueryHashes":[],"slicesMap":{}}