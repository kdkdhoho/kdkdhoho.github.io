{"componentChunkName":"component---src-templates-blog-post-js","path":"/java/garbage-collection/garbage-collection-tuning/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"0f0febf5-3618-59c6-acdd-bc8ce567472e","excerpt":"GC에서 고려할 성능 GC의 주요 측정 기준은 처리량과 지연 시간이다. 처리량은 오랜 시간동안 측정하며, (GC에 소요되지 않는 시간 / 전체 시간) * 100을 의미한다. 지연 시간은 애플리케이션의 응답 속도이다. 즉, GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC…","html":"<h2>GC에서 고려할 성능</h2>\n<p>GC의 주요 측정 기준은 <strong>처리량</strong>과 <strong>지연 시간</strong>이다.</p>\n<p>처리량은 오랜 시간동안 측정하며, <strong>(GC에 소요되지 않는 시간 / 전체 시간) * 100</strong>을 의미한다.</p>\n<p>지연 시간은 애플리케이션의 응답 속도이다.</p>\n<p>즉, <strong>GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC 튜닝에서 고려할 포인트</strong>가 되는 것이다.</p>\n<blockquote>\n<p><del>GC 튜닝에 대한 내용은 언젠가 알아보자</del></p>\n</blockquote>\n<p>하지만 프로그램 특징에 따라 더 중요하게 여겨지는 기준은 달라질 것이다.</p>\n<p>가령 웹서버의 경우 처리량은 네트워크 지연 현상에 가려질 수 있기에 지연 시간은 중요하게 생각하지 않을 수 있다.</p>\n<p>하지만 GUI와 같은 실시간성이 아주 중요한 서비스의 경우, 처리량보다 지연 시간이 더 큰 가치가 될 것이다.</p>\n<p>따라서 애플리케이션 특징에 따라 우선 순위를 두는 것이 좋다.</p>\n<h2>Young, Old Generation 영역의 크기에 따른 비교</h2>\n<p>처리량과 지연 시간은 Young Genration과 Old Generation 영역의 크기 비율을 어떻게 가져가냐에 따라 달라진다.</p>\n<p><em>Young Generation</em>의 비율이 커질수록 GC가 발생하는 빈도는 낮아지기에 처리량은 증가할 수 있다.<br>\n하지만 그만큼 <em>Old Generation</em>의 비율이 작아지고, 이는 <em>Major Collection</em>의 빈도가 증가하여 지연 시간에 부정적인 영향을 끼칠 것이다.</p>\n<p>반대로 <em>Young Generation</em>의 비율이 작아질수록 <em>Minor Collection</em>의 빈도가 증가하고, 이는 처리량에 부정적 영향을 끼친다.<br>\n하지만 그만큼 <em>Old Genration</em>의 비율이 커지고, 이는 <em>Major Collection</em>의 빈도가 줄어들어 지연 시간에 긍정적 영향을 끼칠 것이다.</p>\n<p>// TODO: 아래 링크 보고 정리해보자</p>\n<blockquote>\n<p>보다 자세한 내용은 <a href=\"https://docs.oracle.com/en/java/javase/17/gctuning/factors-affecting-garbage-collection-performance.html#GUID-5508674B-F32D-4B02-9002-D0D8C7CDDC75\">이 링크</a>를 참고</p>\n</blockquote>\n<p>// TODO: 아래 링크로부터 이어서 글 작성\n<a href=\"https://docs.oracle.com/en/java/javase/17/gctuning/garbage-collector-implementation.html#GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E\">https://docs.oracle.com/en/java/javase/17/gctuning/garbage-collector-implementation.html#GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E</a></p>\n<h2>유의사항</h2>\n<h3>1. GC로 인한 Stop-the-world를 최소화하자</h3>\n<h3>2. GC는 무적이 아니다.</h3>\n<p><a href=\"https://techblog.woowahan.com/2628/\">https://techblog.woowahan.com/2628/</a>\n<a href=\"https://www.baeldung.com/jvm-garbage-collectors\">https://www.baeldung.com/jvm-garbage-collectors</a></p>\n<h3>2. 무적의 GC는 없다.</h3>\n<p><a href=\"https://www.youtube.com/watch?v=FMUpVA0Vvjw\">https://www.youtube.com/watch?v=FMUpVA0Vvjw</a>\n<a href=\"https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17\">https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17</a></p>\n<h2>번외</h2>\n<p>Java 17 vs Java 11의 GC 성능 차이: <a href=\"https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a\">https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a</a>, <a href=\"https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html#:~:text=Java%2017%20is%208.66%25%20faster,than%20the%20G1%20Garbage%20Collector\">https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html#:~:text=Java%2017%20is%208.66%25%20faster,than%20the%20G1%20Garbage%20Collector</a></p>\n<blockquote>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://youtu.be/FMUpVA0Vvjw?feature=shared\">https://youtu.be/FMUpVA0Vvjw?feature=shared</a> <br></li>\n<li><a href=\"https://youtu.be/vZRmCbl871I?feature=shared\">https://youtu.be/vZRmCbl871I?feature=shared</a> <br></li>\n<li><a href=\"https://mangkyu.tistory.com/118\">https://mangkyu.tistory.com/118</a> <br></li>\n<li><a href=\"https://docs.oracle.com/en/java/javase/17/gctuning/available-collectors.html#GUID-45794DA6-AB96-4856-A96D-FDE5F7DEE498\">https://docs.oracle.com/en/java/javase/17/gctuning/available-collectors.html#GUID-45794DA6-AB96-4856-A96D-FDE5F7DEE498</a> <br></li>\n<li><a href=\"https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17\">https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17</a> <br></li>\n<li><a href=\"https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a\">https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a</a> <br></li>\n<li><a href=\"https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html\">https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html</a> <br></li>\n<li><a href=\"https://www.baeldung.com/jvm-garbage-collectors\">https://www.baeldung.com/jvm-garbage-collectors</a> <br></li>\n</ul>\n</blockquote>","frontmatter":{"title":"Garbage Collection 튜닝에 대해","date":"December 09, 2023","description":"Garbage Collection 튜닝에 대해"}},"previous":{"fields":{"slug":"/java/garbage-collection/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}},"next":{"fields":{"slug":"/java/garbage-collection/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},"pageContext":{"id":"0f0febf5-3618-59c6-acdd-bc8ce567472e","previousPostId":"a117e9db-7d1e-5211-869d-ef2e8080ec26","nextPostId":"147e464a-d86d-5bb2-b0ff-15f162f3f9a8"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}