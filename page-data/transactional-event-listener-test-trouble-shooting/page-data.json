{"componentChunkName":"component---src-templates-post-jsx","path":"/transactional-event-listener-test-trouble-shooting/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"4a31fa04-183a-59a7-95bf-2136289c3d78","excerpt":"개요 게시글에 댓글 작성 시, 게시글 작성자에게 알람을 생성하도록 하는 기능을 구현해야 했다.\n이때, 댓글과 알람의 결합도를 낮추기 위해 을 사용했다.\n코드는 아래와 같다. 여기서 와 에 대해 짚고 넘어가고 싶은데, 이 아닌 을 적용한 이유는, 댓글 생성 로직이 Commit 된 후에 알람 생성 로직을 수행하도록 하기 위해서다.  는 이벤트가 발행되자마자 …","html":"<h2>개요</h2>\n<p>게시글에 댓글 작성 시, 게시글 작성자에게 알람을 생성하도록 하는 기능을 구현해야 했다.<br>\n이때, 댓글과 알람의 결합도를 낮추기 위해 <code class=\"language-text\">ApplicationEventPublisher</code>을 사용했다.<br>\n코드는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CommentService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">CommentCreateResponse</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> listId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span> loginUserId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>loginUserId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getById</span><span class=\"token punctuation\">(</span>listId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Comment</span> comment <span class=\"token operator\">=</span> <span class=\"token class-name\">Comment</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommentContent</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Comment</span> saved <span class=\"token operator\">=</span> commentRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        applicationEventPublisher<span class=\"token punctuation\">.</span><span class=\"token function\">publishEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">comment</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> saved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">CommentCreateResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>saved<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AlarmService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@TransactionalEventListener</span>\n    <span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRES_NEW</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmEvent</span> alarmEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        alarmEvent<span class=\"token punctuation\">.</span><span class=\"token function\">validateDifferentPublisherAndReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>alarmEvent<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">@TransactionalEventListener</code>와 <code class=\"language-text\">@Transactional(propagation = Propagation.REQUIRES_NEW)</code>에 대해 짚고 넘어가고 싶은데,</p>\n<p><code class=\"language-text\">@EventListener</code>이 아닌 <code class=\"language-text\">@TransactionalEventListener</code>을 적용한 이유는, 댓글 생성 로직이 Commit 된 후에 알람 생성 로직을 수행하도록 하기 위해서다.<br> </p>\n<blockquote>\n<p><code class=\"language-text\">@EventListener</code>는 이벤트가 발행되자마자 로직을 실행한다.<br>\n반면 <code class=\"language-text\">@TransactionalEventListener</code>은 부모 트랜잭션이 Commit 된 이후에 실행된다.</p>\n</blockquote>\n<p>트랜잭션 전파 속성을 <code class=\"language-text\">REQUIRES_NEW</code>로 설정한 이유는, <code class=\"language-text\">save()</code> 메서드는 부모 트랜잭션이 Commit 된 이후에 실행이 되어야 하는데, <code class=\"language-text\">REQUIRED</code>로 설정하면<br>\nCommit이 된 트랜잭션에 합류하게 되고 그대로 종료하게 되므로, 결국 알람이 저장되지 않기 때문이다.</p>\n<p>위 로직에 대한 통합 테스트 코드를 작성하기 위해 아래와 같이 코드를 작성했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 리스트에_댓글을_남길_경우_작성자에게_알람이_생성된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given: 동호가 리스트를 생성한다.</span>\n    <span class=\"token class-name\">User</span> listWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>동호<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>가장_좋아하는_견종<span class=\"token function\">_TOP3</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when: 정수가 댓글을 남긴다.</span>\n    <span class=\"token class-name\">User</span> commentWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>정수<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"첫 댓글!\"</span><span class=\"token punctuation\">,</span> commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// then: 동호의 알람을 조회해서 검증한다.</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FindAlarmResponse</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getAlarms</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSendUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>하지만 알람이 아무것도 존재하지 않았고, JPA 쿼리 로그를 보면 알람 데이터가 INSERT 되지 않는다.<br></p>\n<h2>원인 파악</h2>\n<p>전체적인 로직을 하나씩 다시 살펴보자.<br></p>\n<p><code class=\"language-text\">CommentService#create()</code>이 호출되고 <code class=\"language-text\">applicationEventPublisher.publishEvent(AlarmEvent.comment(list, saved));</code>을 호출한다.<br>\n그리고 메서드는 종료한다.<br>\n그러면 테스트 코드의 검증 부분으로 넘어가게 되고, 동시에 <code class=\"language-text\">AlarmService#save()</code>가 호출될 것이다.<br></p>\n<p>하지만 우리가 바라는 것은 <code class=\"language-text\">CommentService#create()</code>이 모두 종료되고, <code class=\"language-text\">AlarmService#save()</code>가 호출되고 나서야 검증 부분으로 넘어가는 것이다.<br>\n따라서 <code class=\"language-text\">commentService.create(list.getId(), \"첫 댓글!\", commentWriter.getId());</code> 이후에 강제로 트랜잭션을 커밋해줘야 한다.</p>\n<h2>해결</h2>\n<p>스프링의 <a href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/test/context/transaction/TestTransaction.html\">TestTransaction</a>을 통해 테스트 트랜잭션을 수동으로 제어할 수 있다.</p>\n<p><code class=\"language-text\">TestTransaction.flagForCommit()</code>과 <code class=\"language-text\">TestTransaction.end()</code>을 이용하여 해결해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> 리스트에_댓글을_남길_경우_작성자에게_알람이_생성된다<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// given</span>\n    <span class=\"token class-name\">User</span> listWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>동호<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">ListEntity</span> list <span class=\"token operator\">=</span> listRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>가장_좋아하는_견종<span class=\"token function\">_TOP3</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// when</span>\n    <span class=\"token class-name\">User</span> commentWriter <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>정수<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commentService<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"첫 댓글!\"</span><span class=\"token punctuation\">,</span> commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">TestTransaction</span><span class=\"token punctuation\">.</span><span class=\"token function\">flagForCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 진행 중인 테스트 트랜잭션이 종료되면 커밋하도록 설정한다.</span>\n    <span class=\"token class-name\">TestTransaction</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 현재 진행 중인 테스트 트랜잭션을 종료한다.</span>\n\n    <span class=\"token comment\">// then</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FindAlarmResponse</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> alarmRepository<span class=\"token punctuation\">.</span><span class=\"token function\">getAlarms</span><span class=\"token punctuation\">(</span>listWriter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AlarmType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMMENT</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSendUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEqualTo</span><span class=\"token punctuation\">(</span>commentWriter<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>우리가 의도한 대로 <code class=\"language-text\">commentService.create(list.getId(), \"첫 댓글!\", commentWriter.getId());</code> 실행 이후에, 해당 트랜잭션을 커밋하기 위해<br>\n다음 라인에 <code class=\"language-text\">TestTransaction.flagForCommit();</code>과 <code class=\"language-text\">TestTransaction.end();</code>을 호출해주었다.<br>\n각 코드를 호출하면, 현재 진행 중인 테스트 트랜잭션 컨텍스트가 종료되면 Commit하도록 설정을 변경하고, 강제로 종료시킨다.<br>\n결과적으로 <code class=\"language-text\">CommentService#create</code> 메서드는 커밋이 되고, 자연스레 <code class=\"language-text\">AlarmService#save()</code>도 호출되어 의도한 대로 테스트가 수행된다.</p>\n<p>아래는 테스트 결과 로그인데, EntityManager의 Session ID를 보면 1954816877가 댓글을 저장한다.<br>\n저장이 끝나고 Commit하고, 이어서 645470836가 Open된다. 동시에 1954816877은 트랜잭션 전파로 인해 Suspendinge된다.<br>\n그리고 645470836가 알람을 저장하고, 645470836 - 1954816877 순으로 Closing된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2024-09-26T18:43:55.139+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(1954816877&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.140+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Participating in existing transaction\n2024-09-26T18:43:55.142+09:00 DEBUG 54024 --- [           main] org.hibernate.SQL                        : \n    insert \n    into\n        comment\n        (content, created_date, is_deleted, list_id, updated_date, user_id, id) \n    values\n        (?, ?, ?, ?, ?, ?, default)\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:VARCHAR) &lt;- [첫 댓글!]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP) &lt;- [2024-09-26T18:43:55.140749]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:VARCHAR) &lt;- [false]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:TIMESTAMP) &lt;- [2024-09-26T18:43:55.140749]\n2024-09-26T18:43:55.142+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:BIGINT) &lt;- [2]\n2024-09-26T18:43:55.145+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Initiating transaction commit\n2024-09-26T18:43:55.146+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Committing JPA transaction on EntityManager [SessionImpl(1954816877&lt;open>)]\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(1954816877&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Suspending current transaction, creating new transaction with name [com.listywave.alarm.application.service.AlarmService.save]\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Opened new EntityManager [SessionImpl(645470836&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.155+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Exposing JPA transaction as JDBC [org.springframework.orm.jpa.vendor.HibernateJpaDialect$HibernateConnectionHandle@7ce660fc]\n2024-09-26T18:43:55.156+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Found thread-bound EntityManager [SessionImpl(645470836&lt;open>)] for JPA transaction\n2024-09-26T18:43:55.156+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Participating in existing transaction\n2024-09-26T18:43:55.158+09:00 DEBUG 54024 --- [           main] org.hibernate.SQL                        : \n    insert \n    into\n        alarm\n        (comment_id, created_date, is_checked, list_id, receive_user_id, type, send_user_id, id) \n    values\n        (?, ?, ?, ?, ?, ?, ?, default)\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (2:TIMESTAMP) &lt;- [2024-09-26T18:43:55.156967]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (3:VARCHAR) &lt;- [false]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (4:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (5:BIGINT) &lt;- [1]\n2024-09-26T18:43:55.158+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (6:VARCHAR) &lt;- [COMMENT]\n2024-09-26T18:43:55.159+09:00 TRACE 54024 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (7:BIGINT) &lt;- [2]\n2024-09-26T18:43:55.160+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Initiating transaction commit\n2024-09-26T18:43:55.160+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Committing JPA transaction on EntityManager [SessionImpl(645470836&lt;open>)]\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Closing JPA EntityManager [SessionImpl(645470836&lt;open>)] after transaction\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Resuming suspended transaction after completion of inner transaction\n2024-09-26T18:43:55.161+09:00 DEBUG 54024 --- [           main] o.s.orm.jpa.JpaTransactionManager        : Closing JPA EntityManager [SessionImpl(1954816877&lt;open>)] after transaction\n2024-09-26T18:43:55.212+09:00 DEBUG 54024 --- [           main] tor$SharedEntityManagerInvocationHandler : Creating new EntityManager for shared EntityManager invocation</code></pre></div>\n<h2>결과</h2>\n<p>결과적으로, 테스트 중간에 강제로 커밋을 수행하여 성공적으로 <code class=\"language-text\">@TransactionalEventListener</code>에 해당하는 메서드를 테스트할 수 있게 되었다.<br></p>","frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법","date":"September 26, 2024","update":null,"tags":["Spring","TestTransaction"],"series":null},"fields":{"slug":"/transactional-event-listener-test-trouble-shooting/","readingTime":{"minutes":7.67}}},"seriesList":{"edges":[{"node":{"id":"a30ff988-ea74-5562-b241-90fbff73a3da","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"title":"키스소프트 현장실습 회고"}}},{"node":{"id":"aedd8f5b-dd45-5a14-9b57-3a48cdc0b641","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?"}}},{"node":{"id":"d41198ca-d162-523b-84f8-128b247a19b4","fields":{"slug":"/apply-https/"},"frontmatter":{"title":"[셀럽잇] HTTPS 적용기"}}},{"node":{"id":"3b94cbd6-f64a-5d82-96a2-0761602c250b","fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},{"node":{"id":"c418073e-50be-5fe1-807d-478c9c47f640","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"title":"무중단 배포 이해하기"}}},{"node":{"id":"c5760ea9-e137-5edf-8244-3a93e25b067b","fields":{"slug":"/unit-test/"},"frontmatter":{"title":"단위 테스트 이해하기"}}},{"node":{"id":"8ae82b3f-5b72-555c-89fe-9939dcf8377c","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"title":"JUnit과 AssertJ 활용법"}}},{"node":{"id":"91a7a622-00f8-5cca-b6c1-e4f7db7ee31e","fields":{"slug":"/about-tdd/"},"frontmatter":{"title":"TDD 이해하기"}}},{"node":{"id":"10e0dab4-d2e7-52df-8daa-31bfef1b08b6","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"title":"static을 더 잘 사용하기"}}},{"node":{"id":"c773b0a0-9610-5605-bdb9-9089df57f52b","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"title":"JVM의 Garbage Collection과 동작 원리"}}},{"node":{"id":"0bf99b61-98a4-5c40-b8ce-05a918d212f7","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"title":"Garbage Collection 튜닝에 대해"}}},{"node":{"id":"61bd95c2-424a-54c8-96d9-bec4c8a4f58c","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"title":"Garbage Collection 알고리즘"}}},{"node":{"id":"c87443bb-4e35-55e7-94d5-a5cb70d2dbc8","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"title":"Java에서 컬렉션을 사용할 때 주의할 점"}}},{"node":{"id":"c2d7615d-6232-5fce-8794-f4c790106bb5","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"title":"2023년 회고록"}}},{"node":{"id":"def28d41-907f-5432-8060-ed5429114882","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP"}}},{"node":{"id":"9bf8ca89-e021-526b-a7b5-2cce0b1e366f","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기"}}},{"node":{"id":"01318426-7520-5a57-92ff-c917e1483247","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"title":"[Spring] @Controller와 @RestController 비교하기"}}},{"node":{"id":"bc68fa05-ec4a-5e12-a9b8-4e58769887df","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기"}}},{"node":{"id":"122a1e9c-6fe5-5e7f-b797-a31f54d086b0","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"title":"CPU 아키텍처란?"}}},{"node":{"id":"c23a12ff-7b48-57ef-91ed-81f5386d680a","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"title":"[github] Github Repository에 Issue, PR Template 적용하기"}}},{"node":{"id":"b1dc584d-3c69-5ae8-82a8-09b015fa3d02","fields":{"slug":"/oauth-test/"},"frontmatter":{"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기"}}},{"node":{"id":"9f43b8a7-b5ce-5766-b984-3ed0775d698f","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI"}}},{"node":{"id":"e1b2a9fb-d6e3-5f65-9f50-d3a30c2518d1","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"title":"[Java] JDBC 파헤쳐보기"}}},{"node":{"id":"81b7fb10-f532-5f48-a797-379c3bb99bee","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준"}}},{"node":{"id":"adfb7cc4-25f1-5b31-8060-e40d763b0afe","fields":{"slug":"/sovle-concurrency-problem/"},"frontmatter":{"title":"[ListyWave] 리스트 수정 시, 동시성 이슈 발생 확인 및 해결기"}}},{"node":{"id":"5ecb4a12-dc98-589f-94e0-695fb2d84fab","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"title":"[MySQL] 바이너리 로그로 데이터 복구하기"}}},{"node":{"id":"c375e6a2-7e6c-5607-a579-04d3ab5f3188","fields":{"slug":"/understanding-generic/"},"frontmatter":{"title":"[Java] 제네릭 이해하기"}}},{"node":{"id":"83ad74c1-0d46-5f86-92fc-998642e4367d","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS"}}},{"node":{"id":"7b9b6854-62e7-5f25-afbf-d5459fa5d021","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"title":"[Docker] 도커의 기본적인 명령어들"}}},{"node":{"id":"d77e8b24-f01d-5673-8c55-d93e2d110c4f","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기"}}},{"node":{"id":"b4550a40-b215-5e9a-a6a7-8c27bfb63e25","fields":{"slug":"/continuous-deploy-using-github-actions-and-docker/"},"frontmatter":{"title":"[Infra] Github Actions와 Docker를 이용해 배포 자동화 구축하기"}}},{"node":{"id":"e38bb1ed-1a51-5947-a1d2-52aaae42ac97","fields":{"slug":"/build-monitoring-system/"},"frontmatter":{"title":"[Infra] Prometheus와 Grafana, 그리고 Docker를 이용해 모니터링 대시보드 구축하기"}}},{"node":{"id":"961e4fc3-1d57-55a3-99fd-9e1233cef1dd","fields":{"slug":"/june-3rd/"},"frontmatter":{"title":"[회고] 06.10 ~ 06.16"}}},{"node":{"id":"fcade266-d38c-5c36-a3b7-87d56d9be862","fields":{"slug":"/june-4th-and-5th/"},"frontmatter":{"title":"[회고] 06.17 ~ 06.30"}}},{"node":{"id":"7b64a367-9192-557d-b45d-0e3bc68d44d3","fields":{"slug":"/thread-in-jvm/"},"frontmatter":{"title":"Java Thread 1 - Java의 Thread에 대해 알아보자"}}},{"node":{"id":"9e5a98c2-ba89-5b36-8e72-0028211a2c5b","fields":{"slug":"/status-and-control-thread-in-java/"},"frontmatter":{"title":"Java Thread 2 - Java Thread의 상태와 행동을 제어하는 방법"}}},{"node":{"id":"45a781cf-0e04-559c-a853-d1609dab1bd4","fields":{"slug":"/synchronize-threads/"},"frontmatter":{"title":"Java Thread 3 - Thread 동기화하기"}}},{"node":{"id":"236f7305-5647-51fe-800e-61577d25cd0c","fields":{"slug":"/july-1st/"},"frontmatter":{"title":"[회고] 07.01 ~ 07.07"}}},{"node":{"id":"abad5436-5cba-50a3-8fda-72440c646a78","fields":{"slug":"/solid/"},"frontmatter":{"title":"객체지향 설계 원칙: SOLID"}}},{"node":{"id":"f113bb3f-df7e-589a-b3c1-378c812ac8da","fields":{"slug":"/insert-dummy-data-to-db/"},"frontmatter":{"title":"[Spring] 스프링 애플리케이션 동작과 동시에 DB에 더미 데이터 삽입하기"}}},{"node":{"id":"7890e82c-9f9c-52ed-9724-2efc1ddf8aef","fields":{"slug":"/procedure-function-package/"},"frontmatter":{"title":"[DB] 프로시저, 함수, 패키지에 대해"}}},{"node":{"id":"ac276a35-d955-59ae-9f71-28ad65030c42","fields":{"slug":"/july-2nd-3rd-4th/"},"frontmatter":{"title":"[회고] 07.08 ~ 07.23"}}},{"node":{"id":"4a801b76-317f-5129-a330-84fc989993c8","fields":{"slug":"/inner-class/"},"frontmatter":{"title":"[Java] inner 클래스와 종류에 대해"}}},{"node":{"id":"549069af-32e1-578d-a8c0-7524f6305a7d","fields":{"slug":"/execute-and-executeUpdate-of-jdbc/"},"frontmatter":{"title":"[JDBC] execute(String)과 execute(). executeUpdate(String)와 executeUpdate()의 차이"}}},{"node":{"id":"e0484580-3f9a-597b-bdb4-386532933e65","fields":{"slug":"/log-and-disk/"},"frontmatter":{"title":"EC2 CPU 사용량이 급격히 늘어난 문제 해결"}}},{"node":{"id":"3b97179a-f8a3-521b-a603-cfa1453ea898","fields":{"slug":"/august-1st/"},"frontmatter":{"title":"[회고] 07.29 ~ 08.04"}}},{"node":{"id":"5e74fe27-5b86-593d-bade-e5c49c12e0fc","fields":{"slug":"/august-2st/"},"frontmatter":{"title":"[회고] 08.05 ~ 08.11"}}},{"node":{"id":"82a59d7d-5e43-514c-90b4-af486ef16006","fields":{"slug":"/difference-sqrtN-and-logN/"},"frontmatter":{"title":"O(sqrt(N))과 O(log2(N))의 차이"}}},{"node":{"id":"e3cbab1b-4b2b-5107-8b23-51731a167d08","fields":{"slug":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/"},"frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법"}}},{"node":{"id":"4a31fa04-183a-59a7-95bf-2136289c3d78","fields":{"slug":"/transactional-event-listener-test-trouble-shooting/"},"frontmatter":{"title":"@TransactionalEventListener 메서드를 테스트하기 위한 방법"}}}]},"previous":{"fields":{"slug":"/counting_the_number_of_values_lower_or_equal_to_constantly_increasing_sequence/"},"frontmatter":{"title":"일정하게 증가하는 수열에서 특정 값보다 같거나 작은 값의 개수를 세는 법"}},"next":null},"pageContext":{"id":"4a31fa04-183a-59a7-95bf-2136289c3d78","series":null,"previousPostId":"e3cbab1b-4b2b-5107-8b23-51731a167d08","nextPostId":null}},"staticQueryHashes":[],"slicesMap":{}}