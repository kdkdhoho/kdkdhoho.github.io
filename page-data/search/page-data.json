{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"세 줄 요약 코드의 가독성이 좋아진다.  코드를 객체지향으로 짤 수 있다. 따라서 유지보수가 쉽다. 원시값과 문자열을 포장하지 않았을 때 이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까? 적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다. 물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추…","fields":{"slug":"/why-wrap-primitive-type-and-string/"},"frontmatter":{"date":"December 13, 2023","title":"모든 원시값과 문자열을 포장한다. 왜?","tags":["java","oop","clean-code"]},"rawMarkdownBody":"\n## 세 줄 요약\n\n1. 코드의 가독성이 좋아진다. \n2. 코드를 객체지향으로 짤 수 있다.\n3. 따라서 유지보수가 쉽다.\n\n## 원시값과 문자열을 포장하지 않았을 때\n\n```java\nnew RacingGame(List.of(\"doggy\", \"dazzle\", \"0chil\"), 10);\n```\n\n이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까?\n\n적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다.\n\n물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추할 수 있다.\n\n```java\nList<String> players = List.of(\"doggy\", \"dazzle\", \"0chil\");\nint playCount = 10;\n\nnew RacingGame(players, playCount);\n```\n\n그렇다면 아래 코드를 한번 보자\n\n```java\nPlayers players = new Players(List.of(\"doggy\", \"dazzle\", \"0chil\"));\nPlayCount playCount = new PlayCount(10);\n\nnew RacingGame(players, playCount);\n```\n\n분명 변수명은 같지만, 타입이 주는 힘이 느껴진다.\n\n## 반복되는 행위를 수행할 수 있다\n\n만약 위 코드에서 `List<String> players`와 `int playCount`가 넓은 범위에서 사용되면서, 동시에 각 변수를 사용하는 데 있어 반복되는 행위가 있다면 어떨까?\n\n가령, 다양한 곳에서 각 Player들에게 playCount만큼 게임을 Play하는 행위가 이뤄져야 한다면 각 변수가 존재하는 메서드마다 실행 코드를 작성해줘야 할 것이다.\n\n하지만 값을 포장하여 새로운 객체를 만든다면, 객체 간의 협력을 통해 충분히 수행할 수 있을 것이다.\n\n이는 유지보수 관점에서 큰 강점이다!\n\n---\n\n추가로, 만약 playCount가 몇 회 이하여야 한다는 요구사항이 있을 경우를 생각해보자.\n\n해당 경우에도 `PlayCount` 객체에서 애초에 객체를 생성할 때 검증을 해주면 된다.\n\n그러면 해당 객체를 사용하는 모든 곳에서 검증을 해주지 않아도 된다!\n\n## 일급 컬렉션\n\n일급 컬렉션은 컬렉션을 감싼 객체이다.\n\n사실, 일급 컬렉션도 값을 포장한 객체이므로 위에서 언급한 장점들이 모두 적용된다고 볼 수 있다."},{"excerpt":"문제 상황 인스턴스 필드로 List만을 가지는 일급 컬렉션 객체가 있습니다. 필드에   키워드가 존재하기 떄문에 항상 초기화를 해줘야 합니다. 따라서 객체를 생성하려면 생성자를 List를 항상 주입받아야 합니다. 이때, 문제가 발생합니다.  위 테스트 코드를 보면 MyList 인스턴스를 생성할 때,  라는 List가 생성자 파라미터로 전달됩니다. 그렇게 …","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"date":"December 11, 2023","title":"Java에서 컬렉션을 사용할 때 주의할 점","tags":["java"]},"rawMarkdownBody":"\n## 문제 상황\n\n```java\npublic final class MyList {\n\n    private final List<String> list;\n\n    public MyList(List<String> list) {\n        this.list = list;\n    }\n\n    public void add(String value) {\n        list.add(value);\n    }\n    \n    public int size() {\n        return list.size();\n    }\n    \n    public List<String> list() {\n        return list;\n    }\n}\n```\n\n인스턴스 필드로 List만을 가지는 일급 컬렉션 객체가 있습니다.\n\n필드에 `final`  키워드가 존재하기 떄문에 항상 초기화를 해줘야 합니다.\n\n따라서 객체를 생성하려면 생성자를 List를 항상 주입받아야 합니다.\n\n이때, 문제가 발생합니다.\n\n![문제 상황](problem.png)\n\n위 테스트 코드를 보면 MyList 인스턴스를 생성할 때, `list` 라는 List가 생성자 파라미터로 전달됩니다.\n\n그렇게 `myList` 라는 이름의 인스턴스가 생성된 후, `list`에 \"c\"를 추가합니다.\n\n그런데 검증문을 보면, `myList` 인스턴스의 필드에는 `a, b, c`가 존재합니다.\n\n이 문제는 `myList`가 가지는 필드와, `list` 컬렉션이 **같은 참조 값을 가지기 때문입니다.**\n\n> 참조 값에 대한 내용은 [테코톡 - 히이로의 불변](https://www.youtube.com/watch?v=AjpJS9WrDrs) 추천드립니다\n\n결국 객체 내부의 참조값과 외부의 참조값을 끊어주는 작업이 필요합니다.\n\n이를 **방어적 복사**라고 합니다.\n\n## 방어적 복사 첫 번째 방법: 새로운 객체 할당 (new)\n\n```java\npublic final class MyList {\n\n    private final List<String> list;\n\n    public MyList(List<String> list) {\n        this.list = new ArrayList<>(list);\n    }\n}\n```\n\n메서드 파라미터로 외부의 컬렉션이 들어올 때, **새로운 컬렉션을 만들어** 그 안에 값을 복사하는 방식으로 해결할 수 있습니다.\n\n![새로운 객체 할당](defensive_copy.png)\n\n## List.copyOf()\n\n또 다른 방식으로 `List.copyOf()` 메서드가 있습니다.\n\n```java\npublic final class MyList {\n\n    private final List<String> list;\n\n    public MyList(List<String> list) {\n        this.list = List.copyOf(list);\n    }\n}\n```\n\n![List.copyOf()](list_copyof.png)\n\n하지만 이 메서드의 경우, 위 테스트 코드에서 볼 수 있듯이 값을 쓰거나 수정하거나 삭제하는 메서드에 대해서는 `UnsupportedOperationException`을 발생합니다.\n\n그 이유로는 `copyOf()` 메서드를 까보면 최종적으로 `ImmutableCollections.ListN<>()` 메서드가 호출되는데요.<br>\n`ImmutableCollections.ListN<E>`는 `AbstractImmutableList<E>`를 상속하고 있으며<br>\n`AbstractImmutableList<E>`는 아래와 같이 쓰기 작업에 대해 예외를 던지고 있기 때문입니다.\n\n![AbstractImmutableList의 쓰기 작업 메서드들](AbstractImmutableList.png)\n\n추가로 `List.copyOf()`도 새로운 객체가 생성되고 값을 복사하는 *방어적 복사*가 이루어집니다.\n\n아래 사진은 `ImmutableCollections.ListN<>()`의 생성자입니다.\n\n![List.copyOf()의 최종 실행 메서드](last_method_of_copyof.png)\n\n가변 인자로 값을 받고 새로운 객체를 만들고 모든 요소에 대해 null 체크를 하며 값을 복사합니다.\n\n결과적으로 다른 객체가 생성되어 외부 컬렉션과 참조가 끊어집니다.\n\n## Collections.unmodifiableList()\n\n이 메서드를 사용하면 읽기 전용 컬렉션을 만들 수 있습니다.\n\n```java\npublic final class MyList {\n\n    private final List<String> list;\n\n    public MyList(List<String> list) {\n        this.list = Collections.unmodifiableList(list);\n    }\n}\n```\n\n![Collections.unmodifiableList()](unmodifiable_list.png)\n\n하지만 `List.copyOf()`와 비교해서 한 가지 중요한 점이 있습니다.\n\n아래 테스트 코드처럼, 외부에 존재하는 컬렉션의 값을 수정하면 그대로 `myList`에 반영이 된다는 사실입니다.\n\n![Collections.unmodifiableList()의 약점](weekpoint_of_unmodifialeList.png)\n\n그 원인은 다음과 같습니다.\n\n![Collections.unmodifiableList()의 최종 실행 메서드](last_method_of_unmodifiableList.png)\n\n파라미터로 넘어오는 외부 컬렉션인 `list`를 아무런 조치없이 그대로 할당하는 것을 볼 수 있습니다.\n\n따라서, 내부적으로는 값의 변경이 막혀있지만, 외부의 컬렉션과는 같은 레퍼런스를 참조하고 있다는 것을 확인할 수 있습니다."},{"excerpt":"우아한테크코스의 모든 미션에 \"배열 대신 컬렉션을 사용하라\"는 요구 사항이 항상 존재한다. 그 이유를 알아보자. 두 줄 요약 Java가 이미 잘 만들어놓은 JCF가 존재한다. 제네릭을 지원한다. JCF  Java는 다양한 자료구조와 다양한 알고리즘을 지원한다. 예를 들어 동적 배열은 , 연결 리스트는  처럼 말이다. 게다가 각 자료구조에 필요한 동작들, …","fields":{"slug":"/why-use-collection-instead-of-array/"},"frontmatter":{"date":"December 11, 2023","title":"배열 대신 컬렉션을 쓴다. 왜?","tags":["java","clean-code"]},"rawMarkdownBody":"\n우아한테크코스의 모든 미션에 \"배열 대신 컬렉션을 사용하라\"는 요구 사항이 항상 존재한다.\n\n그 이유를 알아보자.\n\n## 두 줄 요약\n\n1. Java가 이미 잘 만들어놓은 [JCF](https://steady-coding.tistory.com/354)가 존재한다.\n2. 제네릭을 지원한다.\n\n## JCF\n\n![JCF 계층 구조](hierarchy-of-jcf.png)\n\nJava는 다양한 자료구조와 다양한 알고리즘을 지원한다.\n\n예를 들어 동적 배열은 `ArrayList`, 연결 리스트는 `LinkedList` 처럼 말이다.\n\n게다가 각 자료구조에 필요한 동작들, 예를 들어 중간에 값 삽입 혹은 삭제와 같은 동작들 역시 미리 제공한다.\n\n뿐만 아니라, `isEmpty()`, `sort()`, `clear()`, `contains()` 같은 메서드가 존재한다.\n\n실제로 개발하다보면 위 메서드들이 정말 많이 사용되는데, 만약 컬렉션을 사용하지 않고 배열을 사용한다면 위 메서드들을 **재발명**해야 할 것이다. ~~그러면 퇴근이 늦어질 것이다.~~\n\n따라서 상황에 따라 필요한 자료구조와 제공되는 메서드를 사용한다면 배열을 사용하는 것보다 훠어얼씬 **효율적인 개발**을 할 수 있을 것이다.\n\n추가로 `java.util.concurrent` 패키지에서 제공하는 컬렉션들을 통해 **Thread-safe한 자료구조**도 편하게 사용할 수 있다.\n\n또 `Collections` 클래스 내에 `UnmodifiableXXX` 를 통해 불변식 또한 지킬 수 있다.\n\n![Unmodifiable Collections](unmodifable-collections.png)\n\n## 제네릭을 지원한다\n\n제네릭은 JAVA가 제공하는 유연하고 안전한 기술 중 하나이다.\n\n컬렉션은 제네릭을 지원한다. 하지만 배열은 그렇지 않다.\n\n> 제네릭에 대한 이해는 [이 포스팅](https://kdkdhoho.github.io/about-generic) 참고\n\n이 제네릭을 사용한다는 것은, 개발자로 하여금 **컴파일 타임에 타입 안정성을 보장할 수 있다는 것**이다.\n\n이는 어마어마한 메리트이다. 에러가 생겨도 가장 좋은 타이밍은 **컴파일 타임**인데, 제네릭이 이를 보장한다.<br>\n~~일단 이거만으로도 배열 대신 컬렉션을 쓸 이유가 충분해보인다.~~\n"},{"excerpt":"지난 번엔 Garbage Collection과 동작 원리에 대해 알아보았다. 이번에는 어떤 GC 알고리즘이 있고, 각 알고리즘의 특징은 어떤지 알아보자. Serial Collector 단일 쓰레드를 사용하여 모든 GC 작업을 수행하므로 작업 중, 쓰레드 간 통신 오버헤드가 없다. 쓰레드 간 통신은 데이터를 전송하고 조율하는 과정을 의미한다.\n쉽게 말해 쓰…","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"date":"December 10, 2023","title":"Garbage Collection 알고리즘","tags":["java","garbage-collection"]},"rawMarkdownBody":"\n지난 번엔 [Garbage Collection과 동작 원리](https://kdkdhoho.github.io/about-garbage-collection/)에 대해 알아보았다.\n\n이번에는 어떤 GC 알고리즘이 있고, 각 알고리즘의 특징은 어떤지 알아보자.\n\n## Serial Collector\n\n단일 쓰레드를 사용하여 모든 GC 작업을 수행하므로 작업 중, 쓰레드 간 통신 오버헤드가 없다.\n\n> 쓰레드 간 통신은 데이터를 전송하고 조율하는 과정을 의미한다.<br>\n> 쉽게 말해 쓰레드 간 동기화 작업으로 인한 오버헤드가 발생한다고 이해하면 될 것 같다.\n\n결과적으로 Serial GC 쓰레드의 작업 시간이 프로그램의 응답 시간에 직접적인 영향을 준다.\n\n싱글 프로세서 환경에 적합한 알고리즘이다.<br>\n하지만 처리하는 데이터 셋의 용량이 최대 약 100MB인 경우 멀티 프로세서에서도 유용하게 쓰일 수 있다.\n\nSerial Collector는 특정 하드웨어 및 OS 구성에서 default로 선택되거나,<br>\n`-XX:+UseSerialGC` 옵션을 통해 명시적으로 사용할 수 있다.\n\nJava 8, 11, 17 버전에서 사용 가능하다.\n\n추가로 Major Collection 이후 파편화 된 메모리를 압축해 Hole을 최대화 하는 _Compaction_ 과정이 발생한다.\n\n## Parallel Collector\n\n_Throughput GC_ 라고도 부른다.\n\n*Serial Collector*와 유사하게 동작한다.\n\n하지만 Parallel Collector의 경우 멀티 쓰레드로 GC 작업을 진행한다는 점에서 큰 차이가 있다.\n\n![Serial Collector와 Parallel Collector의 차이 ([출처](https://d2.naver.com/helloworld/1329)](difference_serial_and_parallel.png)\n\n멀티 프로세서 환경에 적합한 알고리즘이다.\n\n`-XX:+UseParallelGC` 옵션을 통해 명시적으로 사용할 수 있다.\n\nJava 8, 11 17 버전에서 사용 가능하다.\n\n## CMS Collector\n\n*Concurrent Mark Sweep*의 약자이다.\n\n이름에서 유추할 수 있듯이, 필요하지 않은 객체를 Mark 하고 제거하는 Sweep 하는 과정을 다른 쓰레드와 동시에 처리한다.\n\n아래 그림을 보면 *Serial Collector* 와 비교하는 그림이 있다.\n\n그림에서 볼 수 있듯이, Initial Mark 와 Remark 시간을 제외하고는 GC 작업이 다른 쓰레드와 동시에 처리된다. \n\n![Serial Collector와 CMS Collector](cms-image.png)\n\nGC 시간이 매우 짧다는 특징이 있다. 따라서 지연 시간이 매우 중요한 시스템의 경우 고려할 수 있다.\n\n하지만, 다른 GC 방식에 비해 더 많은 CPU와 메모리를 사용하게 되고, 무엇보다 Memory Compaction이 이루어지지 않아 더 큰 문제가 발생할 수 있다.\n\nJava 9 버전부터는 Deprecated 되어 Java 8 버전에서만 사용 가능하다.\n\n## G1 Collector\n\n*Garbage First Collector* 라고도 불리는 G1 Collector는 대용량의 메모리와 멀티 프로세스 환경을 위해 탄생한 알고리즘이다.\n\n지금까지 알아본 알고리즘 중, 성능 면에서 가장 뛰어난 알고리즘이다.<br>\n따라서 **Java 9부터 Default GC로 설정되었다.**\n\nG1은 기본적으로 Young Generation 과 Old Generation 으로 영역을 구분짓는 건 동일하다.<br>\n하지만 GC 작업이 효율이 좋은 Young Generation에 집중된다.\n\n처리량 향상을 위해 일부 연산은 항상 Stop-the-world 상태에서 수행한다.<br>\n하지만 *Global Marking*과 같은 힙 전체 영역을 대상으로 하는 작업은 다른 쓰레드와 병렬적으로 수행된다.<br>\n\nG1의 가장 큰 특징은, 이전의 프로그램 동작 및 GC로 인한 Stop-the-world의 정보를 추적한다.<br>\n추적한 정보를 바탕으로 Stop-the-world 상태에서 수행한 작업의 양을 조절한다.<br>\n즉, Garbage가 가장 많이 차있는 영역과 같이 가장 효율적인 영역을 우선적으로 처리한다.<br>\n*Garbage First Collector*라고 불리는 이유가 여기에 있는 것이다.\n\nGC 작업이 수행될 때, 생존한 객체들은 다른 영역으로 복사하고 Compacting 작업이 이뤄진다.<br>\n이동이 끝난 뒤 기존 영역은 재사용된다.<br>\n\nG1 알고리즘은 기존 Heap 메모리 구조를 물리적으로 나누어 각 영역 별로 관리하던 방식과는 다르다.<br>\n아래 그림처럼 Heap 영역을 동일한 크기의 논리적인 *Region*으로 나누어 각 영역을 관리한다.\n\n![힙 영역 레이아웃](garbage_collector_heap_layout.png)\n\n위 그림에서 빨간색으로 칠해진 Region은 Young Genration, 파란색은 Old Generation이다.\n\n빨간색 중에서도 \"S\"가 존재하는 영역은 Survivor 영역이다.\n\n파란색 중에서도 \"H\"가 존재하는 영역은 *Homongous*로, 여러 영역에 걸쳐 존재하는 영역임을 의미한다.<br>\n이 영역은 애플리케이션에서 직접 할당하는 거대한 객체이다.\n\n위 구조에서 G1 Collector의 GC 작업은 크게 *Young-only* 와 *Space Reclamation* 으로 나뉜다.\n\n![G1 Collector의 진행 싸이클](garbage-collection-cycle-overview.png)\n\n- Young-only\n  1. 일반적인 Minor Collection으로 시작한다.\n  2. 이때, Old Generation의 힙 점유율이 임계값을 넘으면 Space Reclamation으로 전환한다.\n  3. 동시에 Minor Collection 대신 *Concurrent Start Minor Collection*을 수행한다.\n\n> _Concurrent Start Minor Collection_<br>\n> Minor Collection 외에도 Marking 작업을 수행한다.<br>\n> 위에서의 Marking 작업은 Space-Reclamation 작업을 위해 **Old Generation**에서 Reachable한 객체들은 유지한다.\n\n- Space-Reclamation\n  1. 이 단계에서는 여러 개의 Collection이 혼합되어 구성된다. 즉, Old Generation에 존재하는 객체들도 GC 작업에 포함된다.\n  2. G1이 더 이상 Old Generation을 작업해도, 가치있는 공간이 확보되지 않는다고 판단하면 종료된다.\n  3. 이 단계가 끝나면 Young-only 단계가 다시 시작된다.\n\n백업의 개념으로, 필요없어진 객체를 찾다가 메모리가 부족해지면 다른 Collector와 마찬가지로 *Full GC*를 수행한다.\n\n`-XX:+UseG1GC` 옵션을 통해 명시적으로 사용할 수 있다.\n\nJava 11, 17에서 사용 가능하다.\n\n> ### 참고\n> - https://youtu.be/FMUpVA0Vvjw?feature=shared <br>\n> - https://youtu.be/vZRmCbl871I?feature=shared <br>\n> - https://mangkyu.tistory.com/118 <br>\n> - https://mangkyu.tistory.com/119 <br>\n> - https://mangkyu.tistory.com/120 <br>\n> - https://docs.oracle.com/en/java/javase/17/gctuning/available-collectors.html#GUID-45794DA6-AB96-4856-A96D-FDE5F7DEE498 <br>\n> - https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17 <br>\n> - https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a <br>\n> - https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html <br>\n> - https://www.baeldung.com/jvm-garbage-collectors <br>"},{"excerpt":"GC에서 고려할 성능 GC의 주요 측정 기준은 처리량과 지연 시간이다. 처리량은 오랜 시간동안 측정하며, (GC에 소요되지 않는 시간 / 전체 시간) * 100을 의미한다. 지연 시간은 애플리케이션의 응답 속도이다. 즉, GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC 튜닝에서 고려할 포인트가 되는 것이다. GC 튜닝에 대한 내용은 언젠가 알아…","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"date":"December 09, 2023","title":"Garbage Collection 튜닝에 대해","tags":["java","garbageccollection"]},"rawMarkdownBody":"\n## GC에서 고려할 성능\n\nGC의 주요 측정 기준은 **처리량**과 **지연 시간**이다.\n\n처리량은 오랜 시간동안 측정하며, **(GC에 소요되지 않는 시간 / 전체 시간) * 100**을 의미한다.\n\n지연 시간은 애플리케이션의 응답 속도이다.\n\n즉, **GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC 튜닝에서 고려할 포인트**가 되는 것이다.\n\n> ~~GC 튜닝에 대한 내용은 언젠가 알아보자~~\n\n하지만 프로그램 특징에 따라 더 중요하게 여겨지는 기준은 달라질 것이다.\n\n가령 웹서버의 경우 처리량은 네트워크 지연 현상에 가려질 수 있기에 지연 시간은 중요하게 생각하지 않을 수 있다.\n\n하지만 GUI와 같은 실시간성이 아주 중요한 서비스의 경우, 처리량보다 지연 시간이 더 큰 가치가 될 것이다.\n\n따라서 애플리케이션 특징에 따라 우선 순위를 두는 것이 좋다.\n\n## Young, Old Generation 영역의 크기에 따른 비교\n\n처리량과 지연 시간은 Young Genration과 Old Generation 영역의 크기 비율을 어떻게 가져가냐에 따라 달라진다.\n\n*Young Generation*의 비율이 커질수록 GC가 발생하는 빈도는 낮아지기에 처리량은 증가할 수 있다.<br>\n하지만 그만큼 *Old Generation*의 비율이 작아지고, 이는 *Major Collection*의 빈도가 증가하여 지연 시간에 부정적인 영향을 끼칠 것이다.\n\n반대로 *Young Generation*의 비율이 작아질수록 *Minor Collection*의 빈도가 증가하고, 이는 처리량에 부정적 영향을 끼친다.<br>\n하지만 그만큼 *Old Genration*의 비율이 커지고, 이는 *Major Collection*의 빈도가 줄어들어 지연 시간에 긍정적 영향을 끼칠 것이다.\n\n// TODO: 아래 링크 보고 정리해보자\n> 보다 자세한 내용은 [이 링크](https://docs.oracle.com/en/java/javase/17/gctuning/factors-affecting-garbage-collection-performance.html#GUID-5508674B-F32D-4B02-9002-D0D8C7CDDC75)를 참고\n\n// TODO: 아래 링크로부터 이어서 글 작성\nhttps://docs.oracle.com/en/java/javase/17/gctuning/garbage-collector-implementation.html#GUID-A24775AB-16A3-4B86-9963-76E5AC398A3E\n\n## 유의사항\n\n### 1. GC로 인한 Stop-the-world를 최소화하자\n\n### 2. GC는 무적이 아니다.\n\nhttps://techblog.woowahan.com/2628/\nhttps://www.baeldung.com/jvm-garbage-collectors\n\n### 2. 무적의 GC는 없다.\n\nhttps://www.youtube.com/watch?v=FMUpVA0Vvjw\nhttps://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17\n\n## 번외\nJava 17 vs Java 11의 GC 성능 차이: https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a, https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html#:~:text=Java%2017%20is%208.66%25%20faster,than%20the%20G1%20Garbage%20Collector\n\n> ### 참고\n> - https://youtu.be/FMUpVA0Vvjw?feature=shared <br>\n> - https://youtu.be/vZRmCbl871I?feature=shared <br>\n> - https://mangkyu.tistory.com/118 <br>\n> - https://docs.oracle.com/en/java/javase/17/gctuning/available-collectors.html#GUID-45794DA6-AB96-4856-A96D-FDE5F7DEE498 <br>\n> - https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17 <br>\n> - https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a <br>\n> - https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html <br>\n> - https://www.baeldung.com/jvm-garbage-collectors <br>"},{"excerpt":"Garbage Collection를 알아야 하는 이유 Garbage Collection(이하 GC)을 공부하다보니, GC를 너무 믿어서는 안되겠다고 생각됐다. 우형에서 발생한 일도 그렇고 토스에서 발생한 일을 보니 모두 애플리케이션의 메모리 관련 치명적 에러는 모두 이 GC와 관련이 있었기 때문이다. 더군다나 네이버 D2 글에서도 GC에 대해 잘 알고 있…","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"date":"December 08, 2023","title":"JVM의 Garbage Collection과 동작 원리","tags":["java","garbage-collection"]},"rawMarkdownBody":"\n## Garbage Collection를 알아야 하는 이유\n\nGarbage Collection(이하 GC)을 공부하다보니, **GC를 너무 믿어서는 안되겠다**고 생각됐다.\n\n[우형에서 발생한 일](https://techblog.woowahan.com/2628/)도 그렇고 [토스에서 발생한 일](https://www.youtube.com/watch?v=w4fWgLgop5U)을 보니\n\n모두 애플리케이션의 메모리 관련 치명적 에러는 모두 이 *GC*와 관련이 있었기 때문이다.\n\n더군다나 [네이버 D2 글](https://d2.naver.com/helloworld/1329)에서도 **GC에 대해 잘 알고 있을수록 실력이 좋은 Java 개발자**라고 하셨다.\n\n실력이 좋은 Java 개발자가 되기 위해 이 GC에 대해 알아보자.\n\n## GC란?\n\nGC는 **JVM 기반 애플리케이션에서 동적으로 할당되는 메모리를 알아서 관리해주는 기술**이다.\n\n> JVM의 메모리 구조는 [static을 더 잘 사용하기](https://kdkdhoho.github.io/static-with-memory-structure/) 글 참고\n\n프로세스가 실행하다보면 필연적으로 새로운 메모리를 malloc 및 free 하게 된다.\n\nC, C++의 경우 Native하게 Memory를 직접 관리할 수 있다.\n\n하지만 우리의 JAVA는 탄생 배경부터 개발자로 하여금 OS에 직접 의존하지 않아도 되도록, 중간 계층인 JVM을 통해 시스템 자원에 접근하게 된다.\n\n따라서 malloc 되었지만 더이상 사용하지 않아 필요없어진 쓰레기 메모리들을 대신 처리해주는 역할이 필요하다.\n\n그 작업을 GC가 해주는 것이다.\n\n## GC의 장단점\n\n### 장점\n\n1. 개발자가 개발 중간중간 메모리를 관리할 필요가 없어진다.\n2. (완벽하진 않지만) 자체적으로 메모리 누수를 관리해준다.\n\n### 단점\n\n1. GC가 동작할 때 ❗️ **STOP THE WORLD** ❗️가 발생한다.\n> Stop the world: GC 쓰레드가 동작하는 순간에, 다른 쓰레드들은 동작하지 않는 현상이다.<br>\n> GC를 튜닝한다는 말은 주로 이 Stop the world 시간이 짧아지도록 한다는 말이다.\n\n## GC의 기본 동작 원리\n\n이 GC는 다양한 알고리즘이 존재한다.\n\n하지만 뒤에 나올 ZGC를 제외한 모든 알고리즘은 **Generational Collection**이라는 기술을 사용한다.\n\nGenerational Collection이란, ~~직역하면 세대로 수집한다는 의미~~ 대부분의 애플리케이션에서 경험적으로 관찰된 몇 가지 속성을 활용하여, 사용하지 않는 객체를 회수하는 데 필요한 작업을 최소화하는 기술이다.\n\n관찰된 몇 가지 속성 중 가장 핵심적인 것은 **Weak Generational Hypothesis**이다.\n\nWeak Generational Hypothesis이란 대부분의 객체는 잠깐 동안만 필요하다는 가설이다.\n\n아래 그림은 객체의 수명에 대한 분포도인데, 간단하게 X축은 객체의 수명, Y축은 분포도이다.\n\n즉, **애플리케이션에서 수명이 짧은 객체들이 훨씬 많이 분포한다**는 의미이다.\n\n![객체의 수명에 대한 분포도](distribution_for_lifetimes_of_objects.png)\n\n따라서 이러한 경험적 관찰 결과를 통해, Heap 영역에 있는 모든 객체에 대해 검사하지 않고 객체의 수명에 기반한 Collecting을 통해 보다 효율적인 방법을 모색한 것이다.\n\n> ~~객체 세상은 요절의 비율이 높다~~\n\n그렇다면 이 나이는 어떻게 측정해서 수집한다는 건지 보다 자세히 알아보자.\n\n일단 기본적으로 메모리 구조는 다음과 같다.\n\n![Serial GC의 기본적인 메모리 공간](default_arrangement_of_generations_int_the_serial_collector.png)\n\n자세히 살펴보면 Young, Old로 크게 한번 나뉜다.<br>\n쉽게 유추할 수 있듯이 상대적으로 젊은 객체는 Young, 늙은 객체는 Old에 저장된다.\n\n이제 Young을 자세히 들여다보자.<br>\n1개의 `Eden`과 2개의 `Survivor` 영역으로 나뉜다.\n\n> 각 영역 별 특징으로는 다음과 같다.\n> - Eden 영역에는 처음 생성되는 대부분의 객체가 저장된다.\n> - Survivor 영역은 적어도 하나는 항상 비어있다.\n\n이 구조를 기반으로 나이를 증가하는 과정은 다음과 같다.\n\n1. 처음 생성된 객체는 Eden 영역에 쌓인다.\n2. 쌓이다보면 모두 차게 되는데, 이때 Eden에 존재하는 객체 중 유효한 객체만이 Survivor 영역으로 이동한다.\n3. 이때!! 이동하는 객체에 나이를 증가시킨다.\n4. 마찬가지로 Survivor 영역이 모두 차게 되면, 유효한 객체만이 반대편의 Survivor 영역으로 이동한다. 바로 이때!! 나이가 증가한다.\n\n자, 그럼 위 과정을 계속해서 반복해서 GC의 동작 원리를 상세히 알아보자.\n\n1. Eden 혹은 Survivor 영역이 모두 차면 Young Generation 영역만 수집하는 **Minor Collection**이 발생한다.<br>\n   (적은 양의 객체만 참조하기에 Minor Collection은 비교적 빠르게 수행된다.)\n2. Minor Collection이 진행되면서 특정 나이가 된 객체는 Old 영역으로 이동한다.\n3. 진행되다 보면 Old Generation이 모두 차게 된다. 이때는 전체 영역을 Collecting하는 **Major Collection**이 발생한다.<br>\n   (전체 객체를 확인해야 하기에 Minor에 비해 상당한 시간이 걸린다.)\n\n## 이어서\n\n다음으로는 GC 알고리즘의 종류와 각 특징에 대해 알아보자.\n\n> ### 참고\n> - https://youtu.be/FMUpVA0Vvjw?feature=shared <br>\n> - https://youtu.be/vZRmCbl871I?feature=shared <br>\n> - https://mangkyu.tistory.com/118 <br>\n> - https://docs.oracle.com/en/java/javase/17/gctuning/available-collectors.html#GUID-45794DA6-AB96-4856-A96D-FDE5F7DEE498 <br>\n> - https://stackoverflow.com/questions/70664562/criteria-for-default-garbage-collector-hotspot-jvm-11-17 <br>\n> - https://medium.com/javarevisited/java-17-vs-java-11-exploring-the-latest-features-and-improvements-6d13290e4e1a <br>\n> - https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html <br>\n> - https://www.baeldung.com/jvm-garbage-collectors <br>"},{"excerpt":"들어가며 5주 간 JSCODE에서 진행한 운영체제 모의면접 스터디를 마치고 회고록을 작성하려고 한다. JSCODE 란? 👈 진행 방법 매 주차별로 질문 리스트가 제공된다. 스터디 참여자들은 질문 리스트에 대한 자기주도 학습을 진행한다. 매주 목요일 20시에 모여 팀별로 모의면접을 진행한다.\n답변자 1명, 질문자 2명, 관찰자 1명으로 역할 나누어 진행한다…","fields":{"slug":"/os-interview-study-retrospection/"},"frontmatter":{"date":"December 08, 2023","title":"[JSCODE] - OS 면접 스터디 회고록","tags":["retrospection"]},"rawMarkdownBody":"\n## 들어가며\n\n5주 간 JSCODE에서 진행한 운영체제 모의면접 스터디를 마치고 회고록을 작성하려고 한다.\n\n> [JSCODE 란?](https://jscode.kr/) 👈\n\n## 진행 방법\n\n1. 매 주차별로 질문 리스트가 제공된다.\n\n2. 스터디 참여자들은 질문 리스트에 대한 자기주도 학습을 진행한다.\n\n3. 매주 목요일 20시에 모여 팀별로 모의면접을 진행한다.<br>\n답변자 1명, 질문자 2명, 관찰자 1명으로 역할 나누어 진행한다.\n\n## 신청한 계기\n\n우아한테크코스가 끝나고 본격적인 취업 준비를 시작하는 과정에서 면접 준비의 필요성을 느꼈다.\n\n특히 신입으로 준비하다보니 CS 지식도 같이 준비해야 했다.\n\n준비해야 할 CS 지식에는 네트워크, DB, 운영체제가 있었는데 아무래도 혼자서 준비하기에 운영체제는 다소 힘들 것이라 생각했다.\n\n그래서 학습에 강제성을 줄 겸 면접 연습할 겸 여러모로 이득이라고 생각해서 바로 지원했다.\n\n## 좋았던 점\n\n### 1. 운영체제 지식을 전체적으로 돌아볼 수 있어 좋았다.\n\n학부생 2학년 때 처음 공부하고 한번도 공부하지 않았다. 그러다보니 가물가물했었고 사실상 운영체제 지식이 없다 해도 과언이 아니었다.\n\n그래도 이번 스터디를 통해 다시 학습을 진행했고, 특히 우아한테크코스를 통해 터득한 나만의 학습 방법과 더 넓어진 지식을 바탕으로 다시 공부하니 전엔 **보이지 않던 내용들이 보이기 시작했다.**\n\n특히 [Tomcat 구현하기 미션](https://github.com/kdkdhoho/jwp-dashboard-http)에서 쓰레드 관련 내용이 많이 나왔었는데 당시엔 잘 이해하지 못하고 넘어갔다.\n\n하지만 쓰레드 관련 내용을 학습하고 다시 보니 무슨 내용이었는지 이해하는 경험을 할 수 있었다.\n\n### 2. 말하기 연습\n\n누구에게 아는 것을 설명할 때 종종 장황하게 설명하는 버릇이 있다.\n\n그만큼 전달하고 싶은 말이 많다는 것이지만 대부분 듣는 사람 입장에선 전부 귀기울여 듣기 힘들다.\n\n그래서 핵심만 딱! 말하는 게 중요한데, 이번 면접 스터디를 통해 이를 연습할 수 있었다.\n\n특히 남에게 말로써 전달할 때 어떤 구조로 이야기할 지에 대해 조금은 터득했다.\n\n> **터득한 구조** 👇<br>\n> 질문에 대한 답을 먼저 한다.<br>\n> 그 답에 대한 과정, 방법, 이유 등이 포함되지 않아도 괜찮다.<br>\n> 위 내용들은 뒤에서 이야기해도 충분하다!\n\n## 팀에 기여한 부분\n\n### 1. 너무 식상하게 진행되지 않도록 했다.\n\n사실 같은 질문 리스트에 대해 4명이 돌아가며 질답을 하다보면, 굉장히 지루하고 식상하다.\n\n게다가 스터디를 통해 얻어가는 것도 미비할 것이라 생각했다.\n\n그래서 조금 주제넘을 수 있지만 깊은 내용에 대해 학습한 것이 있으면 이에 대해 질문했다.\n\n초반에는 팀원들이 당황하는 것이 잘 느껴졌다. 실제로 당황스럽다고도 이야기 해 주셨다. 😂\n\n그런데 시간이 갈수록 오히려 더 좋다는 말씀을 해주셨다.\n\n**실제 면접에서는 어떤 질문이 나올지 모르기 때문이다.**\n\n어쩌면 지루하고 크게 얻어가는 게 없는 면접 스터디가 될 수 있었지만 이를 막았다?고 할 수 있을 것 같다.\n\n### 2. 학습한 내용 지식 공유\n\n이제는 개념에 대해 학습할 때, 탄생하게 된 배경부터, 어떤 장단점이 있고, 어떤 대안이 있는 지에 대한 내용도 반드시 학습하고 넘어가게 되었다.\n\n스터디를 준비하면서도 마찬가지였다.\n\n그러다보니 다른 팀원들에 비해 다소 깊은 내용들까지 학습을 했고, 이를 스터디 시간에 질문까지 하다보면 자연스레 학습한 내용을 공유까지 하게 되었다.\n\n공유..! 드디어 **주도적으로 타인에게 나의 지식을 공유하여 도움이 되는 경험을 했다고 할 수 있다.**\n\n## 팀원들에게 받은 긍정적 피드백\n\n### 1. 답변이 차분하고 전달이 잘된다\n\n나는 면접볼 때 최대한 유연한 태도를 가지려고 한다.\n\n너무 딱딱하게 마치 방어하듯이 답변하는 것은 나도 힘들고 듣는 사람도 힘들다고 생각하기 때문이다.\n\n그래서 항상 답변할 땐 대화하듯이, 이야기하듯이하는데 이 점이 듣는 사람으로 하여금 듣기 편안했고<br>\n전달이 잘 되었다는 피드백을 받았다.\n\n## 팀원들에게 받은 부정적 피드백\n\n### 1. 설명이 장황하거나 너무 짧다\n\n1주차에 너무 많은 것을 학습하고 이를 설명하려다보니, 스스로 느끼기에도 설명이 너무 장황했다.\n\n어쩔 땐 너무 장황해지는 걸 막기 위해 굉장히 짧게 대답을 했다.\n\n역시나 이에 대해 많은 피드백이 날라왔다..\n\n사실 예전부터 인지하던 문제인데 오랜만에 인터뷰 자리에서 대답하려니 안좋은 습관이 다시 나왔던 것 같다.\n\n그래서 2주차를 준비할 때는 미리 어떤 식으로 답변할 지 미리 시뮬레이션하며 준비했고,\n\n이를 바탕으로 **두괄식으로 답변하기를 계속해서 연습했다.**\n\n연습한 덕인지 2주차때는 **\"1주차랑 다른 사람같다\"는 말을 들을 정도로 답변이 많이 깔끔해졌다는 피드백을 받았다.** 👍\n\n### 2. 시선처리\n\n한번은 시선처리가 좋았다는 피드백이 있었지만 한번은 시선처리가 좋지 않다는 피드백을 받았다.\n\n지금 생각해보면 자신있게 답변할 수 있는 내용에 대해 답변할 때는 시선처리가 좋았던 것 같고,\n\n자신이 없거나 조금 생각이 필요한 답변의 경우에는 시선처리가 불안하다고 생각한다.\n\n아무래도 준비를 얼마나 했냐에 따라 달라질 것 같다.\n\n## 마치며\n\n기대 이상으로 좋은 시간이었다.\n\n운영체제 스터디 뿐만 아니라 인성 면접이나, 멘토님들에게 개인적인 질문도 할 수 있었다.\n\n면접이나 이력서, 그리고 프로젝트 기반 면접 팁 같은 것들도 얻어갈 수 있었다.\n\n취준생인 나에게 투자 대비 효율이 좋았던 스터디라 생각한다.\n\n5주 간 함께 해주신 팀원들, 멘토님들 감사합니당 🙇‍♂️"},{"excerpt":"JVM의 메모리 구조 우선 static에 대해 이해하기 전에 JVM이 실행될 때 메모리에 어떻게 적재되는 지부터 살펴보자.  크게 세 공간으로 나뉜다. Heap 영역 new 키워드를 사용해 동적으로 생성한 객체의 인스턴스가 담기는 공간이다. Garbage Collection에 의해 관리된다. Stack 영역 메서드 콜 스택이나, 지역 변수 혹은 변수 파라…","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"date":"December 06, 2023","title":"static을 더 잘 사용하기","tags":["java","operating-system"]},"rawMarkdownBody":"\n## JVM의 메모리 구조\n\n우선 static에 대해 이해하기 전에 JVM이 실행될 때 메모리에 어떻게 적재되는 지부터 살펴보자.\n\n![메모리 구조](memory.jpeg)\n\n크게 세 공간으로 나뉜다.\n\n1. Heap 영역\n   - new 키워드를 사용해 **동적으로 생성한 객체의 인스턴스**가 담기는 공간이다.\n   - **Garbage Collection**에 의해 관리된다.\n\n\n\n2. Stack 영역\n   - 메서드 콜 스택이나, 지역 변수 혹은 변수 파라미터가 저장되는 공간이다.\n   - 주로 메서드와 관련이 있으며 메서드가 호출될 때 새로운 영역이 할당되고 반환될 때 영역도 반환된다.\n   - `StackOverflow`가 발생하는 이유도 메모리 관점에서 생각해보면 알 수 있다.\n\n3. Static 영역\n   - 운영체제에서의 Code, Data 영역이다.\n     - 동일한 프로세스 내에서 언제 어디서든 접근할 수 있다.\n   - 우리가 작성한 Class나 정적 변수(클래스 변수)가 이 영역에 저장된다.\n   - 이 곳에 담긴 데이터들은 프로그램이 종료되기 전까지 유지된다.\n\n## Java의 static 키워드\n\n이제 Java의 static 키워드에 대해 알아보자\n\nJava에서 static 키워드를 변수, 메서드, 클래스에 추가할 수 있다.\n\nstatic을 붙여 변수를 생성하거나 메서드나 클래스를 선언하게 되면, **프로그램 실행 시**에 **딱 한 번 생성**되어 위 메모리 구조의 **`Static` 영역에 포함**된다.\n\n따라서, 우리가 객체를 생성하지 않고도 static 변수를 참조하거나 메서드를 호출할 수 있는 것이다.\n\n## static을 많이 사용하게 된다면?\n\n이러한 static 변수, 메서드, 클래스를 많이 사용하게 되면 어떤 일이 발생할까?\n\n결론부터 말하면 **프로그램에 부작용을 초래할 확률이 증가**한다.\n\n메모리 관점에서 생각해보자.\n\n운영체제는 메모리에 Java 프로그램의 공간을 내어줄 때 무한정으로 제공하지 않는다.<br>\n따라서 제한된 영역 내에서 프로그램을 실행해야 한다.\n\n그런데 Static 영역이 Heap과 Stack 영역에 비해 더 많은 공간을 차지하게 된다면, `StackOverflow`나 `OutOfMemoryError` 가 발생할 확률이 증가한다.\n\n아무리 GC가 Heap 영역을 관리해 준다 한들, 사용할 수 있는 공간 자체가 적다면 GC의 역할에도 한계가 있을 것이다.\n\n추가로 사용되지 않음에도 static으로 선언되었다는 이유로, 불필요하게 메모리를 차지하게 될 경우도 분명 존재할 것이다.\n\n## 어느 상황에 static을 사용하면 좋을까?\n\n그렇다면 어느 상황에서 static을 적절히 사용하면 좋을까?\n\n단순히 생각해서 객체를 매번 만들 필요가 없는 경우에만 사용하면 좋을 것이다.\n\n즉, 프로그램을 실행할 때 딱 한 번만 메모리에 올려놓고 계속해서 사용하는 경우이다.\n\n다시 말해, Java 프로그램이 실행되면 딱 한 번만 메모리에 올려놓고 사용하는 경우가 될 것이다.\n\n### 상수\n\n상수는 변하지 않는 값을 의미한다.\n\n이러한 상수는 런타임으로 새로운 변수가 계속해서 만들어질 필요가 없다.\n\n가령, 회원가입 시에 1,000 포인트를 기본적으로 제공한다는 예시가 있다고 가정해보자.\n\n```java\npublic class Member {\n   private static final int WELCOME_POINT = 1_000; // 상수\n   \n   public Member(...) {\n      // ...\n      this.point = WELCOME_POINT;\n      // ...\n   }\n}\n```\n\n위 코드의 `WELCOME_POINT` 처럼, Member 객체를 만들 때마다 새로 만들어 줄 필요도 없는 값의 경우 사용하면 효율적일 것이다.\n\n#### 번외: 상수의 접근 제어자의 범위를 어떤 기준으로 지정하면 좋을까?\n\n위 예시에서는 `private`로 선언을 했는데, `public`으로 한다면 어떨까?\n\n메모리 영역에서 생각해 봤을 때 `Static` 영역으로 올라가고, 이 영역은 같은 프로세스 내의 모든 곳에서 접근이 가능하다.\n\n그렇지만 위 상수가 다른 클래스에서 범용적으로 쓰이지 않는 한, 불필요하게 public으로 열어둘 필요는 없어보인다.\n\n필요하다면 private으로 선언 후, getter를 통해 값을 반환하는 게 코드를 작성하고 이해하는 데에 훨씬 도움이 될 것이라고 생각한다.\n\n최대한 작은 범위로 설정하자.\n\n### util성 메서드 (static 메서드)\n\n흔히 **유틸성 클래스**라고 하는 곳에 존재하는 메서드들에 `static` 키워드를 붙여 사용한다.\n\n이는 인스턴스를 만들지 않고도 사용할 수 있고, 어디에서든 호출할 수 있다.\n\n다만, 인스턴스로 쓰이는 클래스에 static 메서드가 존재할 수 있는데, 이때 조심해야 할 점이 있다.\n\n바로 static 메서드는 재정의가 불가능 하다는 것이다.\n\n![클래스 상속 시](cannot-extends.png)\n\n![인터페이스 구현 시](cannot-implements.png)\n\n추가로 광범위하게 사용되는 특징을 가진 Util성 메서드인 만큼, 클래스의 변경 가능성이 증가한다는 특징이 있다.\n\n가급적 Util성 클래스에 static 메서드를 모아서 사용하도록 하자.\n\n> ## Reference\n> - [망나니 개발자 블로그](https://mangkyu.tistory.com/47)\n> - [Java의 정석](https://www.yes24.com/Product/Goods/24259565)\n> - [AT&T Israel Tech Blog](https://medium.com/att-israel/should-you-avoid-using-static-ae4b58ca1de5)"},{"excerpt":"가상 주소와 물리 주소(실주소)에 대해 설명해주세요. 가상 주소를 물리 주소(실주소)로 어떻게 변환할까요? 절대 주소 지정과 상대 주소 지정의 차이점은 뭘까요? 메모리 분할에 대해 설명해주세요. 메모리 배치 기법(메모리 관리 전략)에 대해 설명해주세요. 외부 단편화와 내부 단편화의 차이가 뭔가요? 메모리 배치 기법중 하나인 colaescing(통합)에 대…","fields":{"slug":"/os-interview-study-5week/"},"frontmatter":{"date":"December 06, 2023","title":"[JSCODE] - OS 면접 스터디 5주차","tags":["operating-system","interview"]},"rawMarkdownBody":"\n## 가상 주소와 물리 주소(실주소)에 대해 설명해주세요.\n```text\n가상 주소의 경우 프로세스마다 독립적으로 가지는 주소 공간입니다. 모두 0번지부터 시작합니다.\n물리 주소의 경우 프로세스가 실제 메모리에 올라가는 위치입니다.\n```\n\n## 가상 주소를 물리 주소(실주소)로 어떻게 변환할까요?\n```text\nMMU라는 하드웨어에 의해 변환됩니다.\nCPU가 가진 논리 주소를 MMU로 전달하게 되고, 메모리 매핑 전략에 따라 달라지는 방법을 통해 물리 주소로 변환하게 됩니다.\n\n추가)\n이 MMU는 Relocation Register와 Limit Register를 이용해 계산합니다.\nRelocation Register는 현재 사용 가능한 물리 주소의 최하위 주소 값을 가집니다.\nLimit Register는 논리 주소의 범위를 가집니다. 이 값을 통해 해당 프로세스의 물리적 주소를 벗어나지 않도록 막을 수 있습니다.\n\n추가)\nOS가 이를 계산하여 변환하지 않는 이유는, HW를 이용하는 것보다 훨씬 느리기 때문입니다.\nHW는 값만 넣어주면 빠르게 계산되어 결과를 얻을 수 있는 반면,\nOS에게 위임하게 된다면 컨텍스트 스위칭으로 인한 추가적인 오버헤드가 발생하기 때문입니다. \n```\n\n## 절대 주소 지정과 상대 주소 지정의 차이점은 뭘까요?\n```text\n절대 주소 지정은 컴파일러에 의해 만들어진 논리 주소가, 실제 메모리에 적재될 때 그대로 사용되어 적재되는 것을 의미합니다.\n상대 주소 지정은 이 논리 주소와는 상관없이 메모리에 적재될 때, 그리고 적재된 이후에 동적으로 물리 주소를 할당하는 것을 의미합니다.\n```\n\n## 메모리 분할에 대해 설명해주세요.\n```text\n프로세스를 동일한 크기의 메모리 블록으로 나누는 것을 의미합니다.\n이 페이지 분할을 통해 프로세스에서 사용되는 메모리만을 메인 메모리에 적재하여 사용할 수 있게 되어\n메모리를 효율적으로 사용할 수 있게 됩니다.\n```\n\n## 메모리 배치 기법(메모리 관리 전략)에 대해 설명해주세요.\n```text\n프로세스를 메인 메모리에 적재할 때 어떤 방식으로 적재할 것인가에 대한 방법입니다.\n\n방법으로 크게 나누면 연속 메모리 할당과 불연속 메모리 할당으로 나눌 수 있습니다.\n```\n\n```text\n[연속 메모리 할당]\n단일 프로그래밍 환경 -> 프로세스 1개를 통채로 메인 메모리에 적재\n다중 프로그래밍 환경 -> 고정 분할 방법: 메인 메모리를 여러 개의 고정된 크기로 나누고 해당 크기에 프로세스를 적재하는 방식. 내부 단편화 발생\n                -> 가변 분할 방법: 고정된 크기를 없애고 프로세스가 필요한 만큼만 메모리에 적재. 외부 단편화 발생. 최초 적합, 최적 적합, 최악 적합\n\n[불연속 메모리 할당]\n고정 분할: 페이징 ->\n가변 분할: 세그멘테이션 -> \n```\n\n## 외부 단편화와 내부 단편화의 차이가 뭔가요?\n```text\n외부 단편화는 프로세스가 적재될 수 있는 공간이지만, 그 크기가 작아 들어가지 못하는 공간입니다.\n내부 단편화는 메인 메모리 상에 일정 크기의 공간 안에 그 공간보다 더 작은 프로세스가 할당되어 생기는 공간을 의미합니다.\n\n예를 들어 설명해보면, 외부 단편화는 음식을 담을 그릇이 있지만 이 그릇에 비해 음식의 크기가 더 커서 담지 못하는 현상을 의미합니다.\n내부 단편화는 음식을 그릇에 담았지만, 음식의 크기가 그릇에 비해 매우 작아서 빈공간이 생기는 개념입니다.\n```\n\n## 메모리 배치 기법중 하나인 colaescing(통합)에 대해 설명해주세요.\n```text\n메인 메모리에 할당된 프로세스가 종료되면 해당 프로세스가 차지한 공간과 인접한 빈 공간이 있는지 확인하고\n이 공간들을 하나로 통합하는 과정입니다.\n이를 통해 외부 단편화를 최소화할 수 있습니다.\n```\n\n## 메모리 배치 기법중 하나인 compaction(압축)에 대해 설명해주세요.\n```text\n메인 메모리에 적재된 프로세스들을 최대한 한 쪽으로 모두 모으는 기법입니다.\n이를 통해 외부 단편화를 최소화할 수 있습니다.\n\n하지만 압축하는 시간동안 시스템은 모든 일을 중지해야 한다는 심각한 단점이 있습니다.\n```\n\n## 메모리 배치 기법중 하나인 버디 시스템에 대해 설명해주세요.\n```text\n메인 메모리를 항상 2^N 크기로 할당합니다. \n그 후 프로세스를 적재할 때, 가능한 공간을 절반씩 쪼개면서 들어갈 수 있는 최적의 공간을 찾아 넣습니다.\n프로세스를 적재할 때는 최대한 메모리의 낮은 위치에 적재하는 식으로 진행됩니다.\n\n외부 단편화를 최소화할 수 있습니다.\n\n만약 프로세스가 할당 해제되고 자신의 Buddy가 존재하고 비어있다면 Merge합니다.\n```\n\n## 가상 메모리에 대해 설명해주세요.\n```text\n메인 메모리에 프로세스의 모든 메모리를 올리지 않고 필요한 메모리만 올릴 수 있도록,\n필요하지 않은 부분의 경우 디스크에 일부 공간에 저장하는 개념을 의미합니다.\n\n가상 메모리를 사용하는 기법으로는 페이징과 세그멘테이션이 있습니다.\n```\n\n## 메모리 배치 기법중 하나인 페이징에 대해 설명해주세요.\n```text\n프로세스의 메모리 영역을 크기가 동일한 페이지로 나눕니다. 동시에 메인 메모리도 동일한 크기의 프레임으로 나눠 놓습니다.\n그 후 프로세스의 일부 필요한 페이지를 프레임에 적재하고 이를 페이지 테이블에 기록합니다.\n물리 주소는 이 페이지 테이블을 통해 찾을 수 있습니다.\n\n빈 프레임이 존재만 한다면 메모리 공간 어디에든 적재할 수 있어 공간을 효율적으로 사용할 수 있으며,\n외부 단편화는 발생하지 않지만 내부 단편화가 발생할 수 있다는 특징이 있습니다.\n```\n\n## 메모리 배치 기법중 하나인 세그멘테이션에 대해 설명해주세요.\n```text\n프로그램을 구성하는 논리적인 단위로 메모리를 나누게 됩니다. 이를 세그먼트라고 합니다.\n이 세그먼트가 메인 메모리에 적재되면 세그먼트 테이블에 이를 기록하고, 이 정보를 통해 물리 주소를 조회할 수 있습니다.\n보통 최초 적합이나 최소 적합 알고리즘을 사용합니다.\n```\n\n## 페이징과 세그멘테이션의 비교 (개인적으로 추가)\n```text\n페이징은 용량이 작은 메인 메모리 크기가 동시에 많이 실행될 수 있다. \n세그멘테이션은 페이징 기법의 장점에 추가로 프로그램을 논리적으로 독립된 주소 공간으로 나누고 쉽게 공유 및 보호할 수 있다.\n```\n\n## Swapping이란 무엇인가요?\n```text\n메인 메모리에 새로운 프로세스를 적재할 공간이 없을 경우, 메인 메모리에 있는 특정 프로세스를 디스크의 가상 메모리에 잠시 저장해뒀다가\n공간이 생기면 다시 가져와 실행하는 개념을 의미합니다.\n```\n\n## Swapping의 과정을 설명해 주세요.\n```text\n우선 CPU가 요청하는 논리 주소를 MMU를 통해 물리 주소로 변환하게 됩니다.\n이때 물리 주소에 원하는 메모리 블록이 없다면, 디스크에서 해당 메모리 블록을 메인 메모리에 적재해야 합니다.\n만약 메인 메모리에 공간이 없다면, 메인 메모리에 있는 특정 메모리 블록을 디스크로 이동을 하고 요구되는 메모리 블록을 메인 메모리에 적재합니다.\n만약 메인 메모리에 공간이 있다면, 바로 디스크에서 메모리 블록을 가져와 적재합니다.\n그 후 페이지 테이블을 업데이트 하는 식으로 스와핑이 진행됩니다.\n```\n\n## Swapping의 장단점을 설명해 주세요.\n```text\n장점으로는, 가상 메모리를 활용하여 필요한 메모리 블록만 메인 메모리에 올린다는 점에서 공간을 효율적으로 사용한다는 장점이 있습니다.\n하지만 단점으로, 스와핑하는 과정은 디스크 I/O 작업이 포함되기 때문에 오버헤드가 발생한다는 단점이 있습니다.\n```\n\n## 페이지 교체에 대해서 설명해주세요.\n```text\n디스크에서 페이지를 메인 메모리에 적재하려고 할 때, 빈 공간이 없어서 기존에 적재되어 있는 페이지를 디스크로 이동시키고\n디스크에 있는 페이지를 메인 메모리에 적재하는 과정을 의미합니다.\n\n대표적인 페이지 교체 알고리즘으로는, FIFO, LRU, LFU, Clock 알고리즘이 있습니다.\n```\n\n## 페이지 부재를 최소화하려면 어떻게 해야 하나요?\n```text\n상식적으로 생각을 해봤을 때, CPU가 원하는 페이지가 최대한 메인 메모리에 적재가 되어 있는 상태여야 합니다.\n이를 위해서는 적절한 페이지 교체 알고리즘을 선택하거나, 페이지의 크기도 적절히 조절을 하는 것이 도움이 될 수 있습니다.\n```\n\n## 페이지 교체 알고리즘 FIFO에 대해 설명 해주세요.\n```text\n메인 메모리에 올라간 페이지의 순서대로 스와핑 아웃을 하는 방식입니다.\n이는 아무래도 구현은 쉽지만 페이지 교체를 최소화하는 방법이 아닐 확률이 큽니다.\n```\n\n## 페이지 교체 알고리즘 LRU에 대해 설명 해주세요.\n```text\nLeast Recently Used의 약자로, 가장 오랫동안 사용되지 않은 페이지를 스와핑 아웃시키는 방식입니다.\n\n페이지의 실제 패턴을 고려했기에 더 적은 페이지 교체가 일어날 수 있습니다.\n하지만 알고리즘을 위한 추가 연산이 들어가기에 오버헤드가 발생합니다.\n```\n\n## 페이지 교체 알고리즘 LFU에 대해 설명 해주세요.\n```text\nLeast Frequently Used의 약자로, 가장 적게 사용된 페이지를 스와핑 아웃하는 방식입니다.\n\n실제 페이지 사용 패턴을 고려했기에 페이지 교체가 적게 일어날 수 있습니다.\n하지만 알고리즘을 위한 추가적인 연산이 들어가기에 오버헤드가 발생합니다.\n```\n\n## 페이지 교체 알고리즘 클럭 알고리즘에 대해 설명해주세요.\n```text\n페이지들을 시계처럼 원형 큐에 저장합니다.\n이 큐에 프레임을 저장할 때, 참조 여부를 나타내는 비트도 함께 저장합니다.\n만약 페이지가 참조되면 이 비트를 1로 바꾸게 됩니다.\n\n그리고 시계침처럼 이 원형큐를 계속해서 순회하며 바라보는 인덱스가 있는데요.\n만약 한 바퀴를 도는 동안 참조되지 않았다면 비트를 1에서 0으로 수정하고, 그 후에도 한 바퀴 도는 동안 참조되지 않으면\n해당 페이지를 교체하는 방식으로 이루어집니다.\n\n이 알고리즘은 구현이 간단하면서 동시에 페이지 교체가 적게 일어나는 방식으로 알고 있습니다.\n```\n\n## 쓰레싱에 대해 설명해주세요.\n```text\n실제 프로세스 동작보다 페이지 교체에 더 많은 시간을 쏟게 되는 현상을 의미합니다.\n\n이를 해결하기 위한 알고리즘으로 워킹 알고리즘과 페이지 부재 빈도 알고리즘이 있습니다.\n```\n\n## 워킹 알고리즘에 대해 설명해주세요.\n```text\n현재 프로세스가 실행 중인 상황에서 가장 중점적으로 사용되는 메모리 영역을 워킹 셋이라고 합니다.\n이 워킹 셋을 메모리에 동시에 적재할 수 있도록 보장하여 페이징 부재 빈도를 낮추는 방식의 알고리즘 입니다. \n```\n\n## 페이지 부재 빈도 알고리즘에 대해 설명해주세요.\n```text\n프로세스의 페이지 부재율을 주기적으로 조사하고 이 값을 근거로 해당 프로세스에 할당할 메모리 양을 동적으로 조절하는 알고리즘입니다.\n\n해당 프로세스의 페이지 부재율이 높으면, 그만큼 이 프로세스에 할당된 페이지의 양이 적다는 의미이므로 할당할 수 있는 페이지의 양을 증가합니다.\n이때 페이지 부재율이 높은 프로세스의 페이지 할당률을 낮춰 그 수를 조절한다.\n```\n\n------------------------\n\n## 이화여대 강의 정리\n\n```text\n프로세스가 메모리에 적재될 때, 메모리의 어느 위치에 적재할 지에 대한 방법(주소 바인딩)이 3가지 있다.\n\n1. Compile Time Binding\n프로세스의 가상 주소를 실제 주소로 그대로 사용한다.\n이는 프로세스 2개 이상을 동시에 메모리에 적재하기에 위험성이 있다.\n컴파일러는 절대 코드(Absolute Code)를 생성한 경우 사용되는 방법이다.\n\n2. Load Time Binding\n프로세스가 메모리에 적재될 때(Load time) 무작위로 적재가 되고, 변경되지 않는다.\n컴파일러는 재배치가능코드(Relocatable Code)를 생성한 경우 가능한 방법이다.\n\n3. Run Time Binding\n프로세스가 메모리에 적재될 때 무작위로 적재되지만, 동적으로 변경이 가능하다.\n현 시대에 흔히 사용되는 방법이다.\n```\n\n```text\n프로그래밍 언어로 변수나 메서드를 선언한다.\n그리고 컴파일하면 실행 파일(프로그램)이 생성된다.\n이 프로그램은 자체적으로 0번지부터 시작하는 메모리 주소가 있다.\n컴파일러가 이 실행 파일을 만들 때 알아서 메모리를 할당한다.\n\n프로그램이 실행되어 프로세스가 되어도 자체적인 주소 공간을 사용한다.\n이를 가상 주소라고 한다.\n실제 주소는 실제 메모리의 주소 공간을 의미한다.\n\nCPU는 PCB에 있는 Program Counter가 가리키는 주소를 바라본다.\n이때 PC가 가리키는 주소는 가상 주소이다.\n(왜? 물리 주소는 항상 바뀔 수 있고, 잘못하면 다른 프로세스의 명령어를 실행한다. 논리주소는 바뀌지 않고 매번 동일한 곳을 가리키기 때문)\n\n따라서 이 가상 주소를 통해 실제 주소를 가리키려면 변환 과정이 필요하다.\n\n이는 MMU(Memory Management Unit)라는 하드웨어에 의해 실행된다.\n(왜 운영체제가 아닌 하드웨어? 빠른 속도로 메모리에 접근해야한다. 그런데 운영체제에 의해 관리되면 오버헤드가 발생한다.)\n\n(연속 할당에서의) MMU는 논리 주소를 relocation register와 limit register를 통해 물리 주소로 변환한다.\nrelocation register는 실행하려는 프로세스의 물리적 주소의 시작 위치를 가리킨다.\nlimit register는 실행하려는 프로세스가 가지는 주소의 전체 범위를 가진다.\n따라서 논리주소 + relocation register의 값 = 물리 주소가 된다.\n이떄, limit register는 해당 프로세스가 가지는 물리적 주소의 범위를 벗어나서 명령을 실행하는 경우를 막기 위해 존재한다. \n```\n\n```text\n[Dynamic Loading]\n프로세스 전체의 메모리 공간을 실제 메모리 영역에 적재하지 않고, 해당 메모리 공간이 필요로 할 때 메모리에 적재하는 것을 의미한다.\n\n[Swapping]\n메모리에 적재되어 있는 프로세스의 일부 페이지를 디스크로 쫓아내는 것을 의미한다.\n```\n\n```text\n[Allocation of Physical Memory]\n1. 연속 할당\n하나의 프로세스가 메모리에 적재될 때, 통채로 올라가는 것을 의미한다.\n\n2. 불연속 할당\n하나의 프로세스에 대해서도 페이징 단위로 나누어 메모리에 적재하는 것을 의미한다.\n더군다나 같은 프로세스의 페이지라고 해도 메인메모리 상에서 연속적이지 않다.\n\n2-1. 페이징 기법\n프로세스의 논리 주소를 동일한 사이즈의 페이지로 나눈다.\n일부 페이지는 스왑 메모리에, 일부 페이지는 메인 메모리에 저장한다.\n주소 변환은 '페이지 테이블'을 통해 이뤄진다.\n\n페이지 테이블을 통한 주소 변환은 다음의 과정으로 이뤄진다.\n1. CPU가 가진 논리 주소로 페이지 테이블에서 물리 주소로 변환한다.\n2. CPU가 같이 가지고 있는 offset 값으로 물리 주소로부터 offset 만큼의 주소를 추가한다.\n\n그런데 이 페이지 테이블은 4byte로 나누고, 실행되는 프로세스가 32비트인 경우, 각 프로세스마다 100만 행의 페이지 테이블을 가진다.\n이때 중요한 점은 컨텍스트 스위칭이 발생할 때 이 페이지 테이블도 함께 초기화된다.\n따라서 효율측면에서 좋지 않다. 따라서 캐싱 기법을 통해 성능을 개선한다.\n```"},{"excerpt":"왜 값의 변경을 막아야 할까?  자동차 경주 피드백 중 하나이다. 왜 이런 피드백이 있는지 알아보자 final 키워드를 붙이면 좋은 점 1. 변경 가능성을 최소화한다. 즉, 코드의 예측이 쉬워진다. 사실 알잘딱깔센으로 객체나 값의 변경은 정말 필요한 곳에서 필요한 만큼 수행해야 한다. 하지만 final 키워드를 붙이지 않으면 분명한 것은 변경 가능성이 존…","fields":{"slug":"/why-use-final/"},"frontmatter":{"date":"December 05, 2023","title":"final 키워드를 사용해 값의 변경을 막아라. 왜?","tags":["java","clean-code"]},"rawMarkdownBody":"\n## 왜 값의 변경을 막아야 할까?\n\n![피드백 사진](why-use-final.png)\n\n자동차 경주 피드백 중 하나이다.\n\n왜 이런 피드백이 있는지 알아보자\n\n## final 키워드를 붙이면 좋은 점\n\n### 1. 변경 가능성을 최소화한다.\n\n즉, 코드의 **예측이 쉬워진다**.\n\n사실 알잘딱깔센으로 객체나 값의 변경은 정말 필요한 곳에서 필요한 만큼 수행해야 한다.\n\n하지만 final 키워드를 붙이지 않으면 분명한 것은 변경 가능성이 존재하는 것이고, 모종의 이유로 사이드 이펙트 발생으로 버그를 낳을 수 있다.\n\n그럼 퇴근이 늦어질 것이다.\n\n### 2. Thread-Safe한 값이 된다.\n\n동시성 이슈이 발생하는 과정에는 반드시 값이 **변경**하는 과정이 존재한다.\n\n그런데 애초에 값을 변경하지 못하게 한다면 동시성 이슈는 일어날 일이 없다.\n\n그럼 퇴근이 빨라질 것이다.\n\n> **유의해야 할 점** ❗️ <br>\n> `StringBuilder`나 `List`, `Map`, `Set` 과 같은 컬렉션들은 값이 **변경**한다.\n> ```java\n>>public String foo() {\n>    final StringBuilder sb = new StringBuilder();\n>    \n>    sb.append(\"a\");\n>    sb.append(\"b\");\n>    \n>    return sb.toString();\n> }\n> ```\n> \n> 위 객체들은 내부적으로 쓰기 작업을 모두 허용한다.<br>\n> **final 키워드는 사실 메모리 Level에서 값의 재할당을 불가능하게 막아줄 뿐이다.**\n\n### 3. 성능의 사소한 이점\n\n이건 우테코에서 배운건데 신기해서 공유한다.\n\n아래 두 코드는 바이트 코드 레벨에서 차이가 존재한다.\n\n```java\npublic void example1() {\n    String a = \"a\";\n    String b = \"b\";\n    System.out.println(a + b);\n}\n\npublic void example2() {\n    final String a = \"a\";\n    final String b = \"b\";\n    System.out.println(a + b);\n}\n```\n\n![바이트 코드단의 결과](result_of_bytecode.png)\n\n왼쪽 빨간 영역은 `example1()`의 결과, 오른쪽은 `example2()`의 결과이다.\n\n프로그래밍 언어 관점에서는 아무 것도 아닌 것처럼 보이지만, 컴퓨터 관점에서 실행하는 코드의 양은 꽤 차이가 난다.\n\n### 4. GC 성능을 높일 수 있다.\n\nGC 성능을 높일 수 있다고 하는데, 이는 GC에 대해 알아보고 작성하자.\n\n## final 키워드를 붙이면 안좋은 점\n\n### 1. 값을 변경하려면 새로운 객체를 생성해야 한다.\n\n이는 메모리를 추가적으로 사용하게 된다.\n\n근데 사실 GC가 있으니 크게 문제되어 보이지 않는다.\n\nGC를 믿어보자.\n\n### 2. 코드가 다소 지저분해진다.\n\nfinal 키워드를 통해 불변을 지키려면 가급적 불변을 지켜야하는 곳에는 모두 붙여줘야 할 것이다.\n\n어디는 해주고 어디는 안해주면 그게 더 혼란스러울테니까.\n\n그러면 인스턴스 변수 뿐만 아니라, 메서드 파라미터나 메서드 내의 지역변수에도 붙여줘야 할 것이다.\n\n하지만 이는 코드를 작성하는 과정에서도 그렇고 읽는 데에도 은근 거슬린다.\n\n아래는 진행했던 프로젝트의 메서드 중 하나이다.\n\n![final 키워드 붙이기 전](before_final.png)\n\n![final 키워드 붙인 후](after_final.png)\n\n은근 차이가 있어보인다.\n\n> 사실 셀럽잇 프로젝트할 때 이거 때문에 안붙였는데 불변을 지키지 않아 생기는 문제는 없었다. 😶\n\n## 결론\n\n프로그래밍에서 불변을 진리처럼 여기는 것 같다.\n\n하지만 늘 그랫듯 개발에는 **정답**은 없다.\n\nfinal 키워드를 통한 불변식을 지키는 것도 마찬가지이다.\n \n조금 더 넓은 범위에서 이해해보면, 사실 프로그래밍 언어가 제공하는 기능을 통해 프로그램의 안정성을 도모하는 것이다.\n\n프로그램이 안정적이면 개발자는 조금 더 퇴근을 빨리하거나 꿀잠을 잘 수 있다.\n\n하지만 개발하는 과정에서 final 키워드로 인해 눈이 조금이라도 피곤하고 머리가 아프다면 붙이지 않는 것이다.\n\n근데 나라면 더 빠른 퇴근과 편안한 잠을 위해 final 키워드를 붙이는 데에 손을 들고 싶다."},{"excerpt":"들어가며 흔히 Domain과 View는 분리해야 한다고 한다. 대표적인 디자인 패턴으로 MVC 패턴이 있다. 같이 작성하면 개발도 빨리 할 수 있고 코드 작성에도 편한데, 왜 분리하라고 할까? 결론 결론부터 말하자면, Domain 객체를 잦은 변경으로부터 보호하기 위해서이다. 왜 Domain을 보호해야 할까? 이를 알아보기 위해서는 우선 Domain이 무…","fields":{"slug":"/why-seperate-domain-and-view/"},"frontmatter":{"date":"December 04, 2023","title":"Domain과 View를 분리한다. 왜?","tags":["design-pattern","mvc-pattern","clean-code"]},"rawMarkdownBody":"\n## 들어가며\n\n흔히 Domain과 View는 분리해야 한다고 한다.\n\n대표적인 디자인 패턴으로 MVC 패턴이 있다.\n\n같이 작성하면 개발도 빨리 할 수 있고 코드 작성에도 편한데, 왜 분리하라고 할까?\n\n## 결론\n\n결론부터 말하자면, Domain 객체를 잦은 변경으로부터 보호하기 위해서이다.\n\n## 왜 Domain을 보호해야 할까?\n\n이를 알아보기 위해서는 우선 Domain이 무엇을 의미하는 **용어**인지 이해해보자.\n\n### Domain이란?\n\n흔히 **소프트웨어로 해결하고자 하는 문제 영역**이라고 한다.\n\n우리에게 친숙한 서비스로 생각해봤을 때<br>\n카카오톡이 해결하고자 하는 문제 영역은 채팅이다.<br>\n배달의 민족이 해결하고자 하는 문제 영역은 배달 주문이다.\n\n우리가 개발하는 이유에 대해서 생각해 봤을 때에도 결국 어떠한 문제를 해결을 위해서이다.\n\n그렇기에 **Domain은 프로그램에 있어 가장 본질적인**, 그리고 **우리의 밥줄이 되는 코드**라고 할 수 있다.\n\n## View\n\n이제 View에 대해 알아보자.\n\nView는 쉽게 말해 사용자에게 보여지는 코드이다.\n\nView는 어떤 특징을 가질까?\n\n개인적인 경험으로 View는 Domain에 비해 엄청난 변경이 발생한다.\n\n페이지를 추가하거나,<br>\n메인 페이지 개편을 하거나,<br>\n처음엔 웹페이지로만 만들었다가 웹앱으로 만들었다가..\n> 심지어 웹페이지랑 웹앱은 따로 관리해야 한다고도 한다 😂\n\n더 다양한 상황의 변경이 일어난다.\n\n혹여나 웹 서비스가 성공해서 앱으로도 제공하려면, 앱 전용 View도 작성해야 할 것이다.\n\n## 다시 돌아와서\n\n이제 다시 돌아와서 \"왜 Domain과 View를 분리해야 할까?\" 라는 질문보다,\n\n반대로 \"Domain과 View가 공존한다면? 혹은 Domain이 View에 강력하게 결합되어 있다면?\" 이라는 질문을 하고 싶다.\n\n이에 대한 답으로, 변경 가능성이 매우 높은 View가 변할 때마다 Domain도 그에 따라 변화에 대응해야 한다.\n\n따라서 결론으로, **우리의 밥줄인 Domain을 변경하는 상황을 최소화하는 노력** 중 하나라고 이해하면 될 것 같다.\n\n## 이해를 돕는 좋은 예시\n\n사실 위 내용은 어느 블로그에서나 할 수 있는 이야기이다.\n\n그렇기에 개인적으로 Domain과 View의 분리가 와닿았던 사례에 대해 소개하고자 한다.\n\n아래 그림을 보자.\n\n![recommend-example.png](recommend-example.png)\n\n*RacingCar* 라는 이름의 게임이다.\n\n패키지 구조를 보면 `android`, `console`, `domain`, `ios`, `web` 으로 크게 나뉘어져있다.\n\n그리고 위 사진을 보면, `domain` 패키지 안에는 자동차 경주 게임을 진행할 때 정말 꼭 있어야 하는 필수 객체들이 존재한다.\n\n그리고 동시에 `console`과 `web` 패키지를 보자.\n\n각 View의 속성에 따라 객체들이 다르게 존재하는 것을 볼 수 있다.\n\n따라서 위 게임은 콘솔 환경에서도, 웹 환경에서도 **Domain 객체의 변경이 일어나지 않는다.**\n\n만약, 패키지 구분없이 `console`과 `web`의 실행 환경을 동시에 해야 하는 요구 사항이 있다면 패키지는 어떻게 됐을까?\n\n아마 아래와 같은 형태일 것이다.\n\n![not-seperate.png](not-seperate.png)\n\n보기 싫다. 게다가 지금은 간단한 프로그램이라 그렇지 대규모 프로젝트였다면?\n\n이제 그만 알아보자."},{"excerpt":"들어가며 MySQL에서의 계정 식별 방식, 권한, 역할에 대한 기본적인 내용을 알아보자 왜 알아야 할까? 데이터베이스 서버의 보안을 위해 ! 괜히 보안떄문에 퇴근이 늦어지면 안되니까 1. 사용자 식별 방법 사용자 아이디 뿐만 아니라 접속 지점(호스트명이나 도메인 또는 IP주소)도 함께 확인한다.\n예시)   따라서 계정의 HOST와 다른 지점에서 접속하면 …","fields":{"slug":"/03-user-identification/"},"frontmatter":{"date":"December 04, 2023","title":"MySQL에서의 사용자 식별에 대해","tags":["database"]},"rawMarkdownBody":"\n## 들어가며\n\nMySQL에서의 계정 식별 방식, 권한, 역할에 대한 기본적인 내용을 알아보자\n\n## 왜 알아야 할까?\n\n데이터베이스 서버의 **보안**을 위해 !\n\n> ~~괜히 보안떄문에 퇴근이 늦어지면 안되니까~~\n\n## 1. 사용자 식별 방법\n**사용자 아이디** 뿐만 아니라 **접속 지점(호스트명이나 도메인 또는 IP주소)**도 함께 확인한다.<br>\n예시) `root@localhost`\n\n![예시 사진](example.png)\n\n따라서 계정의 HOST와 다른 지점에서 접속하면 실패한다.\n\n> 💡 계정을 언급할 때는 **항상 아이디와 호스트를 함께** 명시하자 !\n\n### 1-1. 만약 모든 지점에서 접속을 허용하고 싶다면\n---\n계정의 HOST를 `%` 로 설정하자. (와일드카드 느낌)\n\n### 1-2. 계정의 HOST를 이용해 보안을 신경 쓴 사례\n---\n**[상황]**<br>\n주어진 자원: 1대의 MySQL 서버, 1대의 개발용 서버 1대, 1대의 운영용 서버 1대\n\n개발용, 운영용 서버에서 1대의 MySQL 서버로 요청을 보낸다.\nMySQL 서버에는 개발용, 운영용 데이터베이스를 따로 구축하여 관리하고 있었다.\n\n아래는 이해를 돕기 위한 사진이다.\n\n![인프라 아키텍처의 일부](infra_architecture.png)\n\n**[문제]**<br>\n혹여나 실수로 인해 개발용 서버에서 운영용 DB에 쿼리를 날리거나, 그 반대의 상황을 막고자 했다.\n\n**[해결]**<br>\n계정을 각 환경에 맞는 서버로 나누어 생성 및 관리를 함으로써 의도치 않은 상황을 예방했다.<br>\n(`'celuveat_prod'@{ec2_prod_ip}`, `'celuveat_dev'@{ec2_dev_ip}`)\n\n### 1-3. 계정 식별에서 주의할 점: 아이디는 같고 호스트가 다른 경우\n---\n만약 `user` 이라는 계정이 두 개가 있다.<br>\n한 계정의 HOST는 `192.168.1.01`이고 나머지는 `%`라고 가정해보자.<br>\n(`'user'@'192.168.1.01'`, `'user'@'%'`)\n\n이때 클라이언트의 IP가 `192.168.1.01`인 곳에서 `user` 계정으로 접속을 시도하면 어떻게 될까?<br>\n그리고 `192.168.1.01`이 아닌 곳에서 `user` 계정으로 접속을 시도하면 어떻게 될까?\n\n정답은, `user@192.168.1.01` 계정으로 로그인을 시도한다.<br>\nMySQL은 기본적으로 **더 좁은 범위의 HOST 계정으로 인증을 시도**하기 때문이다.\n\n> 애초에 이런 식으로 설정하는 경우는 가급적 자제하는 게 좋아보인다.<br>\n> 만약 불가피한 경우에는 `--host` 속성으로 계정을 명시해 접속 시도할 수 있을 것이다.\n\n이때 주의할 점은, 인증에 실패했다고 더 넓은 범위의 계정으로 접속을 시도하지 않는다.\n\n### 1-4. 실험1: 만약 `localhost`와 현재 IP 주소로 설정한다면?\n---\n`create user 'kdkdhoho'@localhost identified by abc;` 명령어와<br>\n`create user 'kdkdhoho'@'192.168.0.9' identified by 123;` 명령어로 상황을 세팅해보자.\n\n![실험 환경](test_environment.png)\n\n그리고 kdkdhoho 계정으로 로그인을 시도했을 때, 성공하는 계정을 보자.\n\n![로그인 결과](after_test.png)\n\nHOST를 `localhost`로 설정한 계정으로 로그인이 성공한다.\n\n### 1-5. 실험2: 실험1에 `%`이 추가된다면?\n---\n![실험2 환경](test2_environment.png)\n\n만약 위와 같이 `kdkdhoho@%` 계정이 추가된다면 어떤 계정으로 접속하게 될까?<br>\n(참고로 위 계정의 암호는 `xyz`)\n\n아마 예상하기 쉽겠지만 `localhost`로만 접속이 가능하다.\n\n> 💡결론: HOST의 범위는 `localhost` < 지정 IP < `%` 인 것 같다.<br>\n> 참고) 추가 실험 결과, `127.0.0.1`도 `localhost`에 순위가 밀린다.\n\n## 2. 사용자 계정 관리\n\n### 2-1. 시스템 계정과 일반 계정\n\nMySQL 8.0부터는 `SYSTEM_USER` **권한**을 가지고 있냐에 따라 `시스템 계정`과 `일반 계정`으로 구분된다.\n\n> `SYSTEM_USER` 권한은 `ALL PRIVILEGES` 안에 포함된다.\n\n### 2-2. 두 계정의 차이\n\n#### 시스템 계정\n- MySQL \n- 시스템 계정과 일반 계정을 관리(생성, 삭제, 변경) 할 수 있다.\n- DB 서버 관리와 관련된 작업은 시스템 계정으로만 수행할 수 있다.\n  - 계정 관리\n  - Connection(세션) 강제 종료\n- DBA를 위한 계정\n\n#### 일반 계정\n- 시스템 계정을 관리할 수 없다.\n- 개발자나 응용 프로그램을 위한 계정\n\n### 2-3. 내장된 계정들\n\nMySQL 서버에는 다음과 같은 내장된 계정들이 존재한다. (`root@localhost` 제외)\n\n- `mysql.sys@localhost`: 8.0부터 기본으로 내장된 **sys 스키마의 객체들의 DEFINER**로 사용하는 계정\n  > sys 스키마: Performance Schema를 편하게 볼 수 있도록 별도로 만든 뷰의 모음\n- `mysql.session@localhost`: **MySQL 플러그인이 서버로 접근**할 때 사용하는 계정\n- `mysql.infoschema@localhost`: **information_schema에 정의된 뷰의 DEFINER**로 사용하는 계정\n  > information_schema: DB의 메타 정보(테이블 칼럼, 인덱스 등의 스키마 정보)의 모음\n\n위 세 계정은 처음부터 잠겨있는 상태이다. `account_locked` 칼럼을 통해 확인할 수 있다.\n\n![계정 잠김 확인](account_lock.png)\n\n## 3. 계정 생성\n\n`CREATE USER` 명령으로 계정을 생성할 수 있다.<br>\n`GRANT` 명령으로 권한 부여를 할 수 있다.\n\n> 5.7v 까지는 `GRANT` 명령으로 생성과 동시에 권한 부여를 할 수 있었다.\n\n### 3-1. 다양한 옵션 설정\n\n계정을 생성할 때, 아래와 같은 다양한 옵션들을 설정할 수 있다.\n\n- 인증 방식과 비밀번호\n- 비밀번호 관련 옵션(유효 기간, 이력 개수, 재사용 불가 기간)\n- 기본 역할(Role)\n- SSL 옵션\n- 계정 잠금 여부\n\n위 옵션을 모두 적용한 임의의 쿼리문을 통해 하나씩 살펴보자.\n\n```sql\nCREATE USER 'user'@'{HOST}'\n    IDENTIFIED WITH 'mysql_native_password' BY 'password'\n    REQUIRE NONE\n    PASSWORD EXPIRE INTERVAL 30 DAY\n    ACCOUNT UNLOCK\n    PASSWORD HISTORY DEFAULT\n    PASSWORD REUSE INTERVAL DEFAULT\n    PASSWORD REQUIRE CURRENT DEFAULT;\n```\n\n### 3-2. IDENTIFIED WITH\n\n계정 인증 방식과 비밀번호를 설정한다.<br>\n예) `IDENTIFIED WITH {계정 인증 방식} BY {비밀번호}`\n\n계정 인증 방식은 플러그인 형태로 제공되며, 아래 4가지 방식이 가장 대표적이다.\n\n- `Native Pluggable Authentication`: v5.7까지 기본으로 사용되던 방식이다. 단순하게 비밀번호에 대한 해시(SHA-1 알고리즘) 값을 저장하고, 클러이언트가 보낸 값과 해시값이 일치하는지 비교한다.\n- `Caching SHA-2 Pluggable Authentication`: v8.0의 기본 인증 방식. 암호화 해시값 생성을 위해 SHA-2(256비트) 알고리즘을 사용한다. `Native` 방식은 입력과 해시값이 매번 동일하지만, `SHA-2` 방식은 내부적으로 Salt 키를 활용해 수천 번의 해시 계산을 수행해 계산을 만들고 결국 동일한 입력일지라도 매번 결과가 달라진다. 이는 속도가 매우 느린 점을 고려하여, MySQL 서버는 해시 결과값을 메모리에 캐시해서 사용한다. 따라서 이름에 `Caching`이 포함되었다. 이 방식을 사용하려면 SSL/TLS 또는 RSA 키페어를 반드시 사용해야하고, 이를 위해 접속할 때 SSL 옵션을 활성화해야 한다.\n- PAM Pluggable Authentication\n- LDAP Pluggable Authentication\n\n이때, `IDENTIFIED BY {비밀 번호}`만 입력한다면 MySQL 서버의 기본 인증 방식으로 사용된다.\n\n> MySQL 5.7에서 8.0으로 넘어오면서 기본 인증 방식의 변경으로 인해, SSL/TLS 또는 RSA 키페어가 필요해질 수 있다.\n> 따라서 보안 수준은 낮아지더라도, 하위 호환성을 고려하면 `Native` 인증 방식으로 계정을 생성해야 할 수 있다.<br>\n> <br>\n> MySQL 8.0에서 `Native Authentication`을 기본 인증 방식으로 설정하려면 다음과 같이 설정을 변경하거나 my.cnf 설정 파일에 추가하면 된다.<br>\n> `SET GLOBAL default_authentication_plugin=\"mysql_native_password`\n\n### 3-2. REQUIRE\n\n서버에 접속할 때 암호화된 SSL/TLS 채널을 사용할지 여부를 설정한다.\n\nDEFAULT 값은 비암호화 채널로 설정된다.\n\n하지만 `REQUIRE` 옵션을 `SSL`로 설정하지 않아도, `Caching SHA-2 Authentication` 인증 방식을 사용하여 계정을 생성하면 해당 계정으로 접속할 때 암호화된 채널만으로 서버에 접속하게 된다.\n\n### 3-3. PASSWORD EXPIRE\n\n비밀번호의 유효 기간을 설정한다.\n\nDEFAULT 값은 `default_password_lifetime` 시스템 변수에 저장된 기간으로 유효 기간이 설정된다.\n\n> 스프링 접근용 계정에 유효 기간을 설정하면 큰일이 날 수 있다!\n\n설정 가능한 옵션은 다음과 같다.\n\n- `PASSWORD EXPIRE`: 계정 생성과 동시에 비밀번호의 만료 처리\n- `PASSWORD EXPIRE NEVER`: 비밀번호의 만료 기간 없음\n- `PASSWORD EXPIRE DEFAULT`\n- `PASSWORD EXPIRE INTERVAL n DAY`: 유효기간을 오늘부터 n일로 설정\n\n### 3-4. PASSWORD HISTORY\n\n비밀번호 이력을 얼마나 저장할 지에 대한 옵션이다.\n\n설정 가능한 옵션은 다음과 같다.\n\n- `PASSWORD HISTORY DEFAULT`: `password_history` 시스템 변수에 저장된 개수만큼 비밀번호 이력을 저장하며, 저장된 이력에 남아있는 비밀번호는 재사용할 수 없다.\n- `PASSWORD HISTORY n`: 최근 사용한 n개의 비밀번호를 저장한다.\n\n> 시스템 변수에 저장된 값으로 DEFAULT 값이 설정된다고 한다.\n> 만약 설정하지도 않았으면 어떻게 될까?\n> ![시스템 변수에도 설정하지 않았을 때.png](dont-setting.png)\n> 위와 같이 `NULL` 값으로 존재한다.\n\n### 3-5. PASSWORD REUSE INTERVAL\n\n한 번 사용했던 비밀번호의 재사용 금지 기간을 설정한다.\n\n기본적으로 `password_reuse_interval` 시스템 변수에 저장된 기간으로 설정된다.\n\n설정 가능한 옵션은 다음과 같다.\n\n- `PASSWORD REUSE INTERVAL DEFAULT`\n- `PASSWORD REUSE INTERVAL n DAY`: n일 이후에 비밀번호를 재사용할 수 있다.\n\n### 3-6. PASSWORD REQUIRE\n\n비밀번호가 만료되어 새로운 비밀번호로 변경할 때 현재 비밀번호를 필요로 할지 말지를 결정한다.\n\n기본적으로 `password_require_current` 시스템 변수의 값으로 설정된다.\n\n설정 가능한 옵션은 다음과 같다.\n\n- `PASSWORD REQUIRE CURRENT`: 비밀번호를 변경할 때 현재 비밀번호를 먼저 입력하도록 한다.\n- `PASSWORD REQUIRE OPTIONAL`: 비밀번호를 변경할 때 현재 비밀번호를 입력하지 않아도 되도록 설정한다.\n- `PASSWORD REQUIRE DEFAULT`\n\n### 3-7. ACCOUNT LOCK / UNLOCK\n\n계정을 사용하지 못하게 한다.\n\n- `ACCOUNT LOCK`: 계정을 사용하지 못하게 잠금\n- `ACCOUNT UNLOCK`: 잠긴 계정을 다시 사용 가능 상태로 잠금 해제\n\n## 4. 비밀번호 관리\n\n### 4-1. 고수준 비밀번호\n\n비밀번호의 규칙을 강제할 수 있는 방법이 있다.\n\n`validate_password` 컴포넌트를 활용하면 된다.\n\n이는 크게 중요하지 않은 부분인 것 같아 pass\n\n### 4-2. 비밀번호 이중화\n\n**[문제]**<br>\n스프링이 DB 서버의 하나의 계정을 사용중이다.<br>\n근데 만약 계정의 비밀번호를 바꾼다면 서비스에 장애가 발생할 것이다.<br>\n이로 인해 결국 하나의 암호를 몇 년 동안 사용하게 될 수도 있다.\n\n**[해결책]**<br>\n이를 해결하기 위해 비밀번호로 2개의 값을 **동시에** 사용할 수 있도록 하는 기능이 존재한다.\n\n**[설명]**<br>\n2개의 비밀번호는 Primary, Secondary로 구분된다.\n\n가장 최근 설정한 비밀번호는 Primary, 기존 비밀번호는 Secondary가 된다.\n\n이중 비밀번호를 사용하려면 다음과 같이 기존 비밀번호 변경 문법에 `RETAIN CURRENT PASSWORD` 옵션만 추가하면 된다.\n\n```sql\n-- 비밀번호를 \"abcd\"로 설정\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY 'abcd';\n\n-- 비밀번호를 \"1234\"로 변경하면서 기존 비밀번호 \"abcd\"를 세컨더리 비밀번호로 설정\nmysql> ALTER USER 'root'@'localhost' IDENTIFIED BY '1234' RETAIN CURRENT PASSWORD;\n```\n\n그리고 root 계정으로 접속을 시도할 때 비밀번호를 \"abcd\" 또는 \"1234\"로 해도 접근이 가능하다.\n\n이렇게 설정한 후, 스프링의 접속 설정을 새로운 비밀번호로 변경하고 배포 및 재시작한다.\n\n이제 기존 비밀번호은 Secondary 비밀번호는 보안을 위해 삭제해주자.\n\n## 5. 권한\n\nv5.7까지 **글로벌 권한**과 **객체 권한**으로 구분됐다.\n\n- **글로벌 권한**: DB 혹은 테이블 이외의 객체에 적용되는 권한\n  - `GRANT` 명령에서 특정 객체를 명시하지 말아야 한다.\n- **객체 권한**: DB나 테이블을 제어하는 데 필요한 권한\n  - `GRANT` 명령으로 권한을 부여할 때 반드시 특정 객체를 명시해야 한다.\n- **ALL or (ALL PRIVILEGES)**: 글로벌과 객체 권한 두 가지 용도로 사용할 수 있다.\n  - 특정 객체에 ALL 권한이 부여되면 해당 객체에 적용될 수 있는 모든 권한을 부여한다.\n  - 글로벌로 ALL이 사용되면 글로벌 수준의 모든 권한이 부여된다.\n\n![정적 권한 1.png](static_privilege_1.png)\n![정적 권한 2.png](static_privilege_2.png)\n\nv8.0부터는 아래의 동적 권한이 추가됐다.\n\n> 정적 권한: MySQL 서버의 소스코드에 고정적으로 명시돼 있는 권한\n> 동적 권한: MySQL 서버의 컴포넌트나 플러그인이 설치되면 그때 등록되는 권한\n\n![동적 권한.png](dynamic_privilege.png)\n\n### 5-1. 사용자에게 권한 부여하기\n\n기본적으로 `GRANT` 명령을 사용한다.\n\n이때, 부여하려는 권한의 특성에 따라 `GRANT` 명령의 `ON` 절에 명시되는 객체의 내용이 바뀌어야 한다.\n\n```sql\n-- 권한 부여하는 문법의 기본적인 틀\n-- 부여하려는 권한을 추가한다. \",\" 를 구분자로 하여 여러 개를 동시에 명령할 수 있다.\nmysql> GRANT {권한} ON db.table TO 'user'@'host';\n\n-- 참고: GRANT OPTION 권한은 마지막에 WITH GRANT OPTION을 추가한다.\nmysql> GRANT OPTION ON db.table TO 'user'@'host' WITH GRANT OPTION;\n\n-- 글로벌 권한은 ON 절에 항상 *.* 을 사용한다.\n-- *.*은 모든 DB의 객체를 포함해 MySQL 서버 전체를 의미한다.\nmysql> GRANT SUPER ON *.* TO 'user'@'localhost';\n\n-- DB 권한은 특정 DB에 대해서만 권한을 부여하거나 서버에 존재하는 모든 DB에 대해 권한을 부여할 수 있다.\n-- 여기서 DB라 함은 DB 내부에 존재하는 테이블뿐만 아니라 스토어드 프로그램들도 모두 포함이다.\n-- 하지만 DB 권한만 부여하는 경우 employees.department와 같이 테이블까지 명시할 수 없다.\nmysql> GRANT EVENT ON *.* TO 'user'@'localhost';\nmysql> GRANT EVENT ON employees.* TO 'user'@'localhost';\n\n-- 테이블 권한은 서버의 모든 DB에 대해, 특정 DB의 모든 오브젝트에 대해, 특정 DB의 특정 테이블에 대해서 권한을 부여할 수 있다.\nmysql> GRANT SELECT,INSERT,UPDATE ON *.* TO 'user'@'localhost';\nmysql> GRANT SELECT,INSERT,UPDATE ON employees.* TO 'user'@'localhost';\nmysql> GRANT SELECT,INSERT,UPDATE ON employees.department TO 'user'@'localhost';\n```\n\n### 5-2. 실제 권한을 사용한 사례\n\n우아한테크코스 프로젝트 요구사항 중, 운영 DB 서버를 `DROP`하지 못하도록 하는 요구사항이 있었다.\n\n이를 `celuveat_prod` 계정의 권한에서 `DROP`을 제거하는 식으로 요구사항을 만족했다.\n\n## 6. 역할(Role)\n\nv8.0부터 권한을 묶어 역할(Role)을 사용할 수 있게 됐다.\n\n```sql\n-- 역할 생성\nmysql> CREATE ROLE role_emp_read, role_emp_write;\n\n-- 역할에 권한 부여\nmysql> GRANT SELECT ON employees.* TO role_emp_read;\nmysql> GRANT INSERT, UPDATE, DELETE ON employees.* TO role_emp_write;\n\n-- 계정 생성\nmysql> CREATE USER reader@localhost IDENTIFIED BY 'abcd';\nmysql> CREATE USER writer@localhost IDENTIFIED BY '1234';\n\n-- 계정에 역할 부여\nmysql> GRANT role_emp_reader TO reader@localhost;\nmysql> GRANT role_emp_writer TO writer@localhost;\n\n-- 역할 활성화\n-- 주의! 계정이 로그아웃됐다가 로그인하면 역할이 비활성화된다. 아래 명령어를 통해 활성화를 시켜주자.\n-- 자동으로 활성화를 시켜주려면 activate_all_roles_on_login 시스템 변수를 ON 으로 설정해주자.\nmysql> SET ROLE role_emp_reader;\nmysql> SET ROLE role_emp_writer;\n```"},{"excerpt":"📝 질문 리스트 병행성(동시성)과 병렬성에 대해 설명해주세요. 프로세스 동기화에 대해 설명해 주세요. Critical Section(임계 영역)에 대해 설명해주세요. Race Condition(경쟁 조건)이 무엇인가요? Mutual Exclusion(상호 배제)에 대해 설명해주세요. 뮤텍스(Mutex)에 대해 설명해주세요. 세마포어에 대해 설명해주세요. …","fields":{"slug":"/os-interview-study-4week/"},"frontmatter":{"date":"November 30, 2023","title":"[JSCODE] - OS 면접 스터디 4주차","tags":["operating-system","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### 병행성(동시성)과 병렬성에 대해 설명해주세요.\n\n```\n[병행성]\n병행성은 코어 1개를 가진 CPU가 2개 이상의 작업을 처리하는 것을 생각하면 됩니다.\n\n이는 마치 사용자 입장에서 동시에 실행되는 것처럼 보이는데요.\n실제로 두 작업을 동시에 실행하는 것이 아닌, 두 작업을 매우 빠른 속도로 번갈아가면서 처리를 합니다. 이 속도가 매우 빠르기에 사용자 입장에서는 동시에 처리되는 것처럼 보입니다.\n\n[병렬성]\n코어 2개를 가진 CPU가 2개 이상의 작업을 병렬적으로 처리한다고 생각하면 됩니다.\n\n두 방식 모두 여러 작업이 공유 자원에 접근할 때 생길 수 있는 여러 문제가 존재합니다.\n```\n\n### 프로세스 동기화에 대해 설명해 주세요.\n\n```\n여러 작업이 공유 자원을 사용할 때 생길 수 있는 동시성 문제를 방지하기 위한 개념입니다.\n이를 적용하는 방법으로는 스핀락, 뮤텍스, 세마포어가 있습니다.\n```\n\n### Critical Section(임계 영역)에 대해 설명해주세요.\n\n```\n여러 프로세스가 공유 자원을 사용하려고 할 때, 그 공유 자원에 접근해서 사용하는 과정까지의 영역입니다. 프로세스 동기화를 위해 사용되는 개념입니다.\n```\n\n### Race Condition(경쟁 조건)이 무엇인가요?\n\n```\n여러 프로세스/쓰레드가 동시에 같은 자원에 접근하여 조작할 때, 작업들의 타이밍이나 작업 순서에 따라 결과가 기대했던 것과 달라지는 상황을 의미합니다.\n\n<자세한 예시>\n두 개의 쓰레드가 하나의 전역 변수를 수정하는 상황을 가정해보겠습니다.\n전역 변수를 +1 하려는 작업은 CPU 레벨에서 값 조회, 연산, 갱신의 순으로 동작합니다.\n만약 쓰레드 1번이 값 조회를 하고, 값을 더한 상태에서 쓰레드 2번으로 컨텍스트 스위칭이 일어난다면, 쓰레드 2번은 아직 변경되지 않은 전역 변수 값을 읽고, 더하게 됩니다. 이 상태에서 두 쓰레드 모두 메모리에 값을 갱신하다면 어떤 순서든 간에 1로 갱신됩니다.\n이러한 상황을 경쟁 조건이라고 합니다.\n\n이 경쟁 조건은, 자원에 접근하여 사용하는 영역을 임계 영역으로 설정하고 이 임계 영역에 오직 하나의 쓰레드만이 접근할 수 있도록 구현함으로써 해결할 수 있습니다.\n대표적인 예로는 스핀락, 뮤텍스, 세마포어 방식이 있습니다.\n```\n\n### Mutual Exclusion(상호 배제)에 대해 설명해주세요.\n\n```\n한국말로 '상호 배제' 라는 말입니다.\n즉, 하나의 쓰레드가 공유 자원을 사용할 때 다른 쓰레드가 접근하지 못하도록 한다는 개념입니다.\n```\n\n### 뮤텍스(Mutex)에 대해 설명해주세요.\n\n```\nMutual Exlcusion의 약자로, 상호 배제를 위한 동기화 기법 중 하나입니다.\n**하나의 임계 영역**에 **하나의 프로세스나 쓰레드**만 들어가 작업을 할 수 있다는 개념입니다.\n\n이 기법은 뮤텍스 락이라는 개념을 사용합니다.\n\n보통 임계 영역에 하나의 공유 자원이 존재합니다.\n\n**상호 배제를 할 수 있는 방법**으로는 **스핀락 방식과 뮤텍스 방식**이 존재합니다.\n두 방법 모두 **Mutex Lock이라는 개념을 사용**합니다. 이 락은 1개만 존재합니다.\n임계 영역에 접근할 때 이 락을 획득할 수 있다면 락을 획득하고 임계 영역에 접근합니다.\n만약 이때 다른 프로세스가 임계 영역에 접근하려고 할 때 이 락을 획득할 때까지 임계 영역에 접근할 수 없습니다. 락을 획득하고 나서야 비로소 임계 영역에 접근 가능합니다.\n\n여기서 락을 획득하는 방식의 차이가 스핀락 방식과 뮤텍스 방식의 차이입니다.\n\n스핀락 방식의 경우 락을 획득할 때까지 계속해서 확인합니다.\n이와 다르게 뮤텍스 방식의 경우, 락을 획득하지 못하면 본인을 대기 큐에 넣어두고 임계 영역에서 처리 중인 프로세스가 락을 반환할 때, 대기 큐에 있는 프로세스를 깨우는 방식입니다.\n\n스핀락 방식의 경우 락을 획득할 때까지 CPU를 무한정 사용할 수 있는 문제점이 있지만, 멀티 코어 환경이며 임계 영역에서의 작업 시간이 컨텍스트 스위칭보다 더 빨리 끝난다면 뮤텍스에 비해 더 이점이 있다.\n뮤텍스는 대기 큐로 갔다가, 깨움을 당해 다시 CPU를 할당받는 과정에서 컨텍스트 스위칭 작업이 필요하다. 하지만, 임계 영역에서의 작업이 빨리 끝나면 굳이 대기 큐로 갔다오는 작업과 컨텍스트 스위칭 작업이 불필요해지기 때문이다.\n게다가 싱글 코어이라면 결국 코어는 1개이기에 어찌됐던 컨텍스트 스위칭은 발생하기 때문이다.\n```\n\n### 세마포어에 대해 설명해주세요.\n\n```\n여러 개의 쓰레드가 공유 자원에 동시에 접근하는 것을 **제한하기 위한 정수**의 개념입니다.\n\n뮤텍스와 달리 하나의 임계 영역에 여러 개의 공유 자원이 존재할 수 있습니다.\n따라서 임계 영역에 존재하는 공유 자원의 수만큼 정수가 초기화되고, 쓰레드가 세마포어에 접근 요청을 하면 정수를 1 감소시킵니다.\n만약 이 값이 0이라면 현재 임계 영역 내의 모든 공유 자원을 각각의 쓰레드가 접근하고 있는 것이므로 더 이상 접근할 수 없습니다.\n이때, 다른 쓰레드가 접근 요청을 하게 되면 이 정수값은 -1로 감소하고 대기 큐에 들어갑니다.\n이후에 공유 자원을 모두 사용한 쓰레드가 임계 영역을 나올 때, 세마포어 값을 1 증가하고 대기 큐에 있는 쓰레드를 깨웁니다. 그리고 해당 쓰레드가 다시 한번 세마포어에 접근하게 됩니다.\n```\n\n### 뮤텍스(Mutex)와 이진 세마포어의 차이에 대해 설명해주세요.\n\n```\n세마포어는 하나의 임계 영역안에 접근할 수 있는 공유 자원의 수를 조절할 수 있는 점에서, 이진 세마포어는 뮤텍스를 대신할 수 있습니다.\n\n하지만 뮤텍스는 이진 세마포어를 대신할 수 없습니다.\n\n추가로 세마포어는 작업 간 실행 순서를 동기화할 수 있지만, 뮤텍스는 불가능합니다. <### 추가 학습 필요\n```\n\n### 모니터에 대해 설명해주세요.\n\n```\n세마포어를 이용하다보면 개발자의 실수로 인해 경쟁 조건이나, 데드락 또는 기아상태가 발생한다.\n\n하지만 이는 특정 상황에만 발생하는 문제들이므로 디버깅하기 매우 어렵다는 문제가 있다.\n\n따라서 프로세스 동기화를 더 쉽고 확실하게 사용하기 위한 방법으로 모니터 방식이 탄생했다.\n\n모니터 방식은 기본적으로 뮤텍스 방식을 사용해서 구현한다.\n\n모니터 방식을 설명하기 위해선 생산자-소비자 문제가 대표적이다.\n\n> 자세한 내용은 [테코톡](https://youtu.be/4t8BennljZA?si=lEfu-OTT2cMYlgrB)을 참고하자.\n\n간단히 설명하자면, 생산자와 소비자 사이에는 함께 사용할 수 있는 공간이 있고 생산자는 이 공간에 데이터를 저장하고, 소비자는 데이터를 소비한다.\n이때 공간이 꽉 차 있으면 생산자는 추가할 수 없고, 반대로 공간이 비어있으면 소비자는 소비할 수 없다.\n\n이를 모니터 방식을 통해 구현할 수 있다.\n\n각 메서드(생산자 or 소비자)는 락을 획득하여 임계 영역에 들어가면, 본인이 수행할 수 있는 조건인지를 먼저 확인한다. (공간이 비어있는지? 꽉찼는지?) 수행할 수 없는 조건이라면 본인을 대기 큐에 넣는다.\n\n수행할 수 있는 조건이라면 정해진 동작을 하고 모두 끝이 나면 대기 큐에 있는 무작위의 쓰레드를 깨우고 락을 반환하는 형식이다.\n```\n\n### 데드락이 무엇인가요?\n\n```\n여러 프로세스가 필요한 자원을 요청하는 과정에서 그 어떤 프로세스도 더 이상 진행할 수 없는 상태입니다.\n자원을 대기하는 blocked 상태에서 영구히 대기한다.\n```\n\n### 데드락 발생 조건 4가지를 설명해 주세요.\n\n```\n1. 상호 배제: 리소스는 한번에 하나의 쓰레드만이 접근할 수 있다.\n2. Hold and wait: 쓰레드가 이미 하나 이상의 리소스를 획득한 상태에서 다른 리소스를 획득하기 위해 대기하는 상태\n3. No preemption: 리소스 반환은 해당 리소스를 취득한 리소스만이 할 수 있다.\n4. Circular wait: 쓰레드들이 순환 형태로 \n```\n\n### 데드락 회피 방법은 무엇이 있나요?\n\n발생 조건 4가지 중 1가지만이라도 해결하면 된다.\n1) 리소스를 공유 가능하게 한다. -> 이는 경쟁 조건 문제 발생\n2) 사용할 리소스를 모두 획득한 뒤에 시작하도록 하거나, 리소스를 획득하지 않은 상태에서만 리소스를 요청하게끔 한다. -> 리소스 사용 효율이 떨어질 수 있다. 또는 인기 많은 리소스를 계속해서 기다려서 기아 상태에 발생할 수 있다.\n3) 추가 리소스를 획득하려면, 가지고 있는 리소스를 다른 리소스가 선점할 수 있도록한다.\n4) 모든 리소스에 순서 체계를 부여하고 오름차순으로 리소스를 요청한다.\n\n하지만 모두 약간의 문제들이 존재한다.\n따라서 데드락 회피(뱅커 알고리즘) 또는 데드락 감지 및 복구\n\n## 🤔 개인적인 궁금증\n\n### 세마포어의 정수값은 어떻게 동기화를 할 수 있을까?\n\n세마포어의 wait(), signal()에서 lock을 획득하기 위한 메서드는 CPU 레벨에서 Atomic한 연산을 지원한다.\n다시 말해, 하나의 쓰레드가 lock을 획득하기 위한 과정 도중에 다른 쓰레드가 연산 중간에 끼지 못한다.\n\n이를 통해 \n\n## 🎯 피드백\n\n임계 영역을 설명할 때 다소 설명이 장황해졌다.\n그 외에는 두괄식으로 답변하려고 노력하는 것이 잘 보였다."},{"excerpt":"TDD란? Test Driven Development. 테스트 주도 개발이다. 보통 '~~ 주도 개발' 이라고 이름이 붙으면, 개발할 때 '~~' 를 1순위로 여기며 개발하는 방법론을 의미한다. 즉, 테스트 주도 개발은 테스트를 1순위로 여기며 개발하는 개발 방법론이다. 개발 방법론! 어떻게 하나? 결론: 테스트 코드 작성 -> 프로덕션 코드 작성 -> …","fields":{"slug":"/about-tdd/"},"frontmatter":{"date":"November 29, 2023","title":"TDD 이해하기","tags":["tdd","test"]},"rawMarkdownBody":"\n## TDD란?\n\nTest Driven Development. 테스트 주도 개발이다.\n\n보통 '_~~ 주도 개발_' 이라고 이름이 붙으면, 개발할 때 '_~~_' 를 1순위로 여기며 개발하는 **방법론**을 의미한다.\n\n즉, 테스트 주도 개발은 테스트를 1순위로 여기며 개발하는 **개발 방법론**이다.\n\n**개발 방법론!**\n\n## 어떻게 하나?\n\n결론: _테스트 코드 작성 -> 프로덕션 코드 작성 -> 리팩터링_ 순으로 진행한다.\n\n### 1. 테스트 코드 작성\n\n우선 구현하려는 기능에 대해 단위 테스트를 작성한다.\n\n작성하고 돌리면 당연히 실패한다. 왜? 아직 프로덕션 코드가 없으니까.<br>\n어쩌면 컴파일 조차 안될 것이다.\n\n### 2. 프로덕션 코드 작성\n\n이제 기능을 구현한다.\n\n테스트 코드와 프로덕션 코드를 이상없이 작성했다면 테스트가 통과할 것이다.\n\n이때 중요한 점은, 코드 품질은 신경쓰지 않아도 된다.\n\n### 3. 리팩터링\n\n코드 품질은 이제 신경쓴다.\n\n돌아가는 쓰레기를 만들었다면, 이제 이쁜 쓰레기로 만들 차례이다.\n\n테스트 코드, 프로덕션 코드 모두 리팩터링을 진행한다.\n\n## 왜 하나?\n\nTDD를 해본 경험으로 이야기하자면, 버그가 생길 확률이 현저하게 떨어진다. <br>\n(높은 테스트 커버리지는 덤)\n\n확실히 테스트 코드로 내가 구현하려는 기능에 대해 확실한 **안전 장치**를 걸고 기능을 추가하니까, 아무래도 안전하다.\n\n구현하려는 기능에 대한 도메인 이해도가 어느 정도 있고, 주어진 시간이 충분하다면 나는 TDD를 가급적 할 것이다.\n\n주변 지인들에게도 추천할 것이다.\n\n## 단점은?\n\n기능을 작성하는 데까지 시간이 오래 걸린다.\n\n아무래도 돌다리르 건널 때 두들겨보고 건너는 개념인데, 이 두들기는 시간이 상당하다.\n\n체감 상 바로 프로덕션 코드를 작성할 때에 비해 2~3배는 걸리는 것 같다.\n\n또, 내가 구현하려는 기능에 대해 설계 방법이나 감이 잘 오지 않거나 개발 초기 단계라서 변화가 매우 빠른 상황이라면 나는 비추한다.\n\nTDD는 테스트 코드를 필연적으로 낳게 되는데, 이 테스트 코드는 위 상황에서는 걸림돌이기 때문이다.\n\nTDD는 개발 **방법론**일 뿐이니 너무 맹신하지말자.\n\n무엇이든 **상황에 맞게 판단**하자.\n\n## 착각하기 쉬운 것\n\n프로젝트에 TDD를 적용한다고 했을 때, 항상 모든 기능에 대해 테스트 코드를 먼저 작성할 수 없다.\n\n물론 구현하려는 기능에 대해 분명하고 확실한 상황이라면 TDD를 적용할 수 있지만, 개발이라는 게 처음 생각한대로 구현하다보면 생각지도 못한 기능을 함께 구현해야 하는 경우가 종종 있다.\n\n따라서 TDD를 처음 시도해보려는 사람들이 혹여나 \"테스트 코드를 먼저 작성하기 전까지는 기능 구현 안할거야 !!\" 라는 생각을 가질 수 있다고 생각한다.\n\n본인이 구현하려는 기능이 무엇인지 분명히 아는 선에서, TDD를 적용하는 것이 바람직해보인다.  "},{"excerpt":"이 글의 목적 JUnit과 AssertJ의 학습 테스트 코드를 통해 단위 테스트를 처음 해보려는 사람에게 어떻게 쓰는지 간단한 가이드 라인 제시 단위 테스트하면서 잘 사용하지 않는 기능에 대해 나만의 치트 시트 역할 전체 코드 자세한 전체 코드는 이 곳에 올려놓았습니다. 위 레포지토리를 로컬에 clone하고 step3 브랜치로 이동하면, 학습 테스트가 존…","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"date":"November 28, 2023","title":"JUnit과 AssertJ 활용법","tags":["unit-test","JUnit","AssertJ","test"]},"rawMarkdownBody":"\n## 이 글의 목적\n\n- JUnit과 AssertJ의 학습 테스트 코드를 통해 단위 테스트를 처음 해보려는 사람에게 어떻게 쓰는지 간단한 가이드 라인 제시\n- 단위 테스트하면서 잘 사용하지 않는 기능에 대해 나만의 치트 시트 역할\n\n## 전체 코드\n\n자세한 전체 코드는 [이 곳](https://github.com/kdkdhoho/java-racingcar)에 올려놓았습니다.\n\n위 레포지토리를 로컬에 clone하고 step3 브랜치로 이동하면, 학습 테스트가 존재합니다.\n\n## 코드 바로 보기\n\n### 1. 배열 또는 리스트를 테스트하기\n```java\npublic class AssertJWithIterableStudyTest {\n\n    @Test\n    void filteredOnTest() {\n        List<Member> members = members();\n\n        assertThat(members).filteredOn(Member::job, \"woowa developer\")\n                .hasSize(2)\n                .containsOnly(\n                        new Member(2, \"woowa developer\"),\n                        new Member(4, \"woowa developer\")\n                );\n    }\n\n    @Test\n    void containsExactlyVScontainsOnly() {\n        List<Member> members = members();\n\n        // contains: 순서 상관없이 주어진 요소가 있기만 하면 된다.\n        assertThat(members).extracting(\"id\")\n                .contains(5, 3, 2, 4, 1);\n\n        // containsOnly: 순서 상관없이 주어진 요소만 있어야 한다.\n        assertThat(members).extracting(\"id\")\n                .containsOnly(5, 4, 3, 2, 1);\n\n        // containsExactly: 순서, 주어진 요소 모두 동일해야 한다.\n        assertThat(members).extracting(\"id\")\n                .containsExactly(1, 2, 3, 4, 5);\n    }\n\n    @Test\n    void extractingTest1() {\n        List<Member> members = members();\n\n        assertThat(members).extracting(\"id\")\n                .containsExactly(1, 2, 3, 4, 5);\n    }\n\n    @Test\n    void extractingTest2() {\n        List<Member> members = members();\n\n        assertThat(members).extracting(\"id\", \"job\")\n                .containsExactly(\n                        tuple(1, \"job seeker\"),\n                        tuple(2, \"woowa developer\"),\n                        tuple(3, \"student\"),\n                        tuple(4, \"woowa developer\"),\n                        tuple(5, \"delivery hero\")\n                );\n    }\n\n    /**\n     * [실행 결과]\n     * Multiple Failures (3 failures)\n     * -- failure 1 --\n     * expected: 2\n     * but was: 1\n     * at StringTest$IterableTestUsingAssertJ.lambda$softAssertionsTest$0(StringTest$IterableTestUsingAssertJ.java:103)\n     * -- failure 2 --\n     * expected: 3\n     * but was: 1\n     * at StringTest$IterableTestUsingAssertJ.lambda$softAssertionsTest$0(StringTest$IterableTestUsingAssertJ.java:104)\n     * -- failure 3 --\n     * expected: 4\n     * but was: 1\n     */\n    @Test\n    @Disabled\n    void softAssertionsTest() {\n        SoftAssertions.assertSoftly(softly -> {\n            softly.assertThat(1).isEqualTo(1);\n            softly.assertThat(1).isEqualTo(2);\n            softly.assertThat(1).isEqualTo(3);\n            softly.assertThat(1).isEqualTo(4);\n        });\n    }\n\n    public static List<Member> members() {\n        return List.of(\n                new Member(1, \"job seeker\"),\n                new Member(2, \"woowa developer\"),\n                new Member(3, \"student\"),\n                new Member(4, \"woowa developer\"),\n                new Member(5, \"delivery hero\")\n        );\n    }\n}\n\nclass Member {\n    private final int id;\n    private final String job;\n\n    public Member(int id, String job) {\n        this.id = id;\n        this.job = job;\n    }\n\n    public String job() {\n        return job;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Member member = (Member) o;\n        return id == member.id;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(id);\n    }\n}\n```\n\n### 2. 예외 검증하기\n\n```java\npublic class ExceptionAssertionStudyTest {\n\n    private void throwIllegalStateException() {\n        throw new IllegalStateException(\"예외 1번\");\n    }\n\n    @Test\n    void exceptionTest_1() {\n        assertThatThrownBy(this::throwIllegalStateException)\n                .isInstanceOf(IllegalStateException.class)\n                .hasMessage(\"예외 1번\")\n                .hasMessageContaining(\"1번\")\n                .hasMessageEndingWith(\"1번\");\n    }\n\n    @Test\n    void exceptionTest_2() {\n        assertThatExceptionOfType(IllegalStateException.class).isThrownBy(() -> throwIllegalStateException())\n                .withMessage(\"예외 1번\")\n                .withMessageContaining(\"예외\")\n                .withMessageContaining(\"1번\")\n                .withMessageStartingWith(\"예외\")\n                .withMessageEndingWith(\"1번\");\n    }\n\n    /**\n     * 아래 Exception들 미리 제공\n     * assertThatNullPointerException\n     * assertThatIllegalArgumentException\n     * assertThatIllegalStateException\n     * assertThatIOException\n     */\n    @Test\n    void exceptionTest_3() {\n        assertThatIllegalStateException().isThrownBy(this::throwIllegalStateException)\n                .withMessage(\"예외 1번\")\n                .withMessageContaining(\"예외\")\n                .withMessageContaining(\"1번\")\n                .withMessageStartingWith(\"예외\")\n                .withMessageEndingWith(\"1번\");\n    }\n\n    @Test\n    void notExceptionTest() {\n        assertThatNoException().isThrownBy(AssertJWithIterableStudyTest::members);\n    }\n}\n```\n\n### 3. 테스트 메서드에 파라미터 전달하여 테스트하기\n\n```java\npublic class ParameterizedStudyTest {\n\n    /**\n     * [ValueSource가 지원하는 타입]\n     * short (with the shorts attribute)\n     * byte (bytes attribute)\n     * int (ints attribute)\n     * long (longs attribute)\n     * float (floats attribute)\n     * double (doubles attribute)\n     * char (chars attribute)\n     * java.lang.String (strings attribute)\n     * java.lang.Class (classes attribute)\n     */\n    @ParameterizedTest\n    @ValueSource(ints = {2, 4, 6})\n    void parameterizedTest_with_valueSource(int number) {\n        assertThat(number % 2 == 0).isTrue();\n    }\n\n    @ParameterizedTest\n    @NullSource\n    void parameterizedTest_with_nullSource(String input) {\n        assertThat(input == null).isTrue();\n    }\n\n    @ParameterizedTest\n    @EmptySource\n    void parameterizedTest_with_emptySource_Array(int[] numbers) {\n        assertThat(numbers.length).isZero();\n    }\n\n    @ParameterizedTest\n    @EmptySource\n    void parameterizedTest_with_emptySource_List(List<Integer> numbers) {\n        assertThat(numbers.size()).isZero();\n    }\n\n    @ParameterizedTest\n    @EmptySource\n    void parameterizedTest_with_emptySource_String(String input) {\n        assertThat(input).isEqualTo(\"\");\n    }\n\n    @ParameterizedTest\n    @NullAndEmptySource\n    @ValueSource(strings = {\" \", \"\\t\", \"\\n\"})\n    void parameterizedTest_with_NullAndEmptySource(String input) {\n        assertThat(Strings.isNullOrEmpty(input) || input.isBlank()).isTrue();\n    }\n\n    private enum Direction {\n        NORTH, EAST, SOUTH, WEST;\n    }\n\n    // pass all 4 directions\n    @ParameterizedTest\n    @EnumSource(value = Direction.class)\n    void parameterizedTest_with_EnumSource_All_Passing(Direction direction) {\n        assertThat(direction).isIn(Direction.NORTH, Direction.EAST, Direction.SOUTH, Direction.WEST);\n    }\n\n    @ParameterizedTest\n    @EnumSource(value = Direction.class, names = {\"NORTH\", \"SOUTH\"})\n    void parameterizedTest_with_EnumSource_names_filter(Direction direction) {\n        assertThat(direction).isIn(Direction.NORTH, Direction.SOUTH);\n        assertThat(direction).isNotIn(Direction.EAST, Direction.WEST);\n    }\n\n    @ParameterizedTest\n    @EnumSource(\n            value = Direction.class,\n            names = {\"NORTH\", \"SOUTH\", \"EAST\"}, // Enum의 value 이름과 매칭한다. 대소문자 구분한다.\n            mode = EnumSource.Mode.EXCLUDE\n    )\n    void parameterizedTest_with_EnumSource_names_filter_exclude(Direction direction) {\n        assertThat(direction).isNotIn(Direction.NORTH, Direction.SOUTH);\n        assertThat(direction).isIn(Direction.EAST, Direction.WEST);\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"test,TEST\", \"java,JAVA\"})\n    void parameterizedTest_with_CsvSource(String input, String expected) {\n        assertThat(input.toUpperCase()).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @CsvSource(value = {\"test:TEST\", \"java:JAVA\"}, delimiter = ':')\n    void parameterizedTest_with_CsvSource_Using_Delimiter(String input, String expected) {\n        assertThat(input.toUpperCase()).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @CsvFileSource(resources = \"/csvFile.txt\", numLinesToSkip = 1)\n    void parameterizedTest_with_CsvSource_Using_CsvFile(String input, String expected) {\n        assertThat(input.toUpperCase()).isEqualTo(expected);\n    }\n\n    @ParameterizedTest\n    @MethodSource(\"provideStringForIsBlank\")\n    void parameterizedTest_with_MethodSource(String input, boolean expected) {\n        assertThat(StringUtils.isBlank(input)).isEqualTo(expected);\n    }\n\n    private static Stream<Arguments> provideStringForIsBlank() {\n        List<String> inputs = new ArrayList<>();\n        for (int i = 0; i < 4; i++) {\n            if (i == 3) {\n                String input = \"not Empty\";\n                inputs.add(input);\n                continue;\n            }\n\n            String input = \" \".repeat(i);\n            inputs.add(input);\n        }\n\n        return Stream.of(\n                Arguments.of(inputs.get(0), true),\n                Arguments.of(inputs.get(1), true),\n                Arguments.of(inputs.get(2), true),\n                Arguments.of(inputs.get(3), false)\n        );\n    }\n\n    private static class BlankStringArgumentsProvider implements ArgumentsProvider {\n\n        @Override\n        public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {\n            return Stream.of(\n                    Arguments.of((String) null),\n                    Arguments.of(\"\"),\n                    Arguments.of(\" \")\n            );\n        }\n    }\n\n    @ParameterizedTest\n    @ArgumentsSource(BlankStringArgumentsProvider.class)\n    void parameterizedTest_with_MethodSource_Using_ArgumentsProvider(String input) {\n        assertThat(StringUtils.isBlank(input)).isTrue();\n    }\n\n    static Stream<Arguments> arguments = Stream.of(\n            Arguments.of(null, true),\n            Arguments.of(\"\", true),\n            Arguments.of(\" \", true),\n            Arguments.of(\"Not Empty\", false)\n    );\n\n    private static class SlashyDateConverter implements ArgumentConverter {\n\n        @Override\n        public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {\n            if (!(source instanceof String)) {\n                throw new IllegalArgumentException(\"문자열이 아닙니다. 입력값:\" + source);\n            }\n\n            try {\n                String[] parts = ((String) source).split(\"/\");\n                int year = Integer.parseInt(parts[0]);\n                int month = Integer.parseInt(parts[1]);\n                int day = Integer.parseInt(parts[2]);\n\n                return LocalDate.of(year, month, day);\n            } catch (NumberFormatException e) {\n                e.printStackTrace();\n                throw new IllegalArgumentException(\"숫자가 아닙니다. 입력값:\" + source);\n            }\n        }\n    }\n\n    @ParameterizedTest\n    @CsvSource({\"2023/11/28\", \"2023/12/28\"})\n    void parameterizedTest_with_CustomConverter(@ConvertWith(SlashyDateConverter.class) LocalDate date) {\n        assertThat(date.getYear()).isEqualTo(2023);\n        assertThat(date.getMonth()).isGreaterThan(Month.OCTOBER);\n        assertThat(date.getDayOfMonth()).isEqualTo(28);\n    }\n\n    @ParameterizedTest(name = \"{index} - Parameter is {0}\")\n    @EnumSource(value = Direction.class, names = {\"SOUTH\", \"NORTH\"})\n    void displayNameTest(Direction direction) {\n    }\n}\n```\n\n### 4. 두 객체 리스트의 필드 비교하기\n\n```java\npublic class UsingRecursiveComparisonStudyTest {\n\n    @Test\n    void usingRecursiveComparisonTest_1() {\n        List<Member> members = List.of(\n                new Member(1, \"backend developer\"),\n                new Member(2, \"DBA\"),\n                new Member(3, \"frontend developer\")\n        );\n\n        List<Member> other = List.of(\n                new Member(1, \"DBA\"),\n                new Member(2, \"frontend developer\"),\n                new Member(3, \"backend developer\")\n        );\n\n        assertThat(members).usingRecursiveComparison()\n                .comparingOnlyFields(\"job\")\n                .ignoringCollectionOrder()\n                .isEqualTo(other);\n    }\n\n    @Test\n    void usingRecursiveComparisonTest_2() {\n        Member member = new Member(1, \"DBA\");\n        Member other = new Member(2, \"DBA\");\n\n        assertThat(member).usingRecursiveComparison()\n                .comparingOnlyFields(\"job\")\n                .isEqualTo(other);\n    }\n}\n```\n\n## 마치며\n\n더 나은 방법이 있거나 제안이 있다면 언제든 댓글 달아주시면 감사하겠습니다!"},{"excerpt":"📝 질문 리스트 SQL에 대해서 설명해주세요. C언어와 같은 프로그래밍 언어와 어떤 차이가 있나요? 개발자가 작성한 SQL이 어떤 과정을 통해 실행 되는지 설명해주세요. DML은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DDL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DCL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. 참조 무결성에 …","fields":{"slug":"/db-interview-study-2week/"},"frontmatter":{"date":"November 28, 2023","title":"DB 면접 스터디 2주차","tags":["database","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### SQL에 대해서 설명해주세요. C언어와 같은 프로그래밍 언어와 어떤 차이가 있나요?\n\n```\nSQL은 DBMS에게 명령하는 언어입니다.\n\n반면 C언어는 프로그래머가 작성한 코드가 C언어 컴파일러에 의해 기계어로 번역이 됩니다.\n이 기계어는 OS에 의해 코드가 작성된대로 실행됩니다. \n\n즉, SQL은 DMS에게 요청을 보내는 반면 프로그래밍 언어는 미리 작성된 대로 수행된다는 차이점이 있습니다.\n```\n\n### 개발자가 작성한 SQL이 어떤 과정을 통해 실행 되는지 설명해주세요.\n\n```text\n크게 나눠 파싱, 최적화, 실행의 단계로 실행됩니다.\n\nDBMS는 개발자가 작성한 SQL문을 파싱하고 문법 오류가 없는지 검사합니다.\n오류가 없다면 파싱한 SQL문을 통해 가장 효율적인 실행 계획을 수립합니다.\n그 다음 최적화된 실행 계획에 따라 쿼리문을 실행합니다.\n```\n\n### DML은 무엇인가요? 어떤 구문이 있는지도 설명해주세요.\n\n```text\n데이터를 조작하는 쿼리문입니다.\n테이블에 저장된 데이터와 관련된 쿼리문으로 이해하고 있습니다.\n\nINSERT, SELECT, UPDATE, DELETE 문이 있습니다.\n```\n\n### DDL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요.\n\n```text\n데이터를 정의하는 언어입니다.\n테이블과 관련된 쿼리문으로 이해하고 있습니다.\n\n보통 CREATE, ALTER, DROP, TRUNCATE 문이 있습니다.\n```\n\n### DCL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요.\n\n```text\n주로 보안과 관련된 언어업니다.\n\nGRANT, REVOKE, COMMIT, ROLLBACK 문이 있습니다.\n```\n\n### 참조 무결성에 대해서 설명해주세요.\n\n```text\n테이블 간의 관계를 정의할 때 반드시 지켜야하는 제약 조건입니다.\n\n외래키를 설정할 때 반드시 관계를 맺으려는 테이블의 기본키 값으로 해야 한다는 것입니다.\n만약 값이 없을 경우 외래키 값은 NULL이 될 수도 있습니다.\n```\n\n### CASCADE 설정에 대해서 설명해주세요.\n\n```text\n외래키를 참조하고 있는 행에 삭제 또는 변경이 발생할 때, 그에 따라 참조하고 있는 행을 동시에 관리하는 옵션입니다.\n\nUPDATE CASCADE의 경우 참조되는 기본키가 변경될 때, 참조하는 행의 외래키도 함께 변경합니다.\nDELETE CASCADE의 경우 참조되는 기본키의 행이 삭제될 때, 참조하는 행도 함께 삭제한다는 것입니다. \n```\n\n### VIEW에 대해서 설명해주세요.\n\n```text\n기존 테이블에서 사용자가 필요로한 데이터만을 따로 추출하여 만든 임의의 가상 테이블입니다.\n\nVIEW는 실제로 물리적으로 저장하지 않고 기존 테이블의 데이터를 참조하여 가상으로 생성됩니다.\n이를 통해 대규모거나 복잡한 데이터 조회의 경우 VIEW 테이블로 추출하여 쉽고 빠르게 조회할 수 있습니다.\n\n하지만 VIEW가 참조하고 있는 데이터가 변경될 경우, VIEW도 함께 변경해줘야 한다는 특징이 있습니다. \n```\n\n### SELECT 절의 처리순서에 대해서 설명해주세요.\n\n```text\nFROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY 순으로 처리됩니다.\n```\n\n### SELECT ~ FOR UPDATE 구문에 대해서 설명해주세요.\n\n```text\nSELECT 절에 해당하는 행들에 접근할 때 LOCK을 설정하는 구문입니다.\n\n이 구문을 사용하면 해당 행에는 하나의 트랜잭션 만이 값을 변경할 수 있습니다.\nLOCK이 걸린 도중에 다른 트랜잭션이 동일한 행을 수정하려 한다면 LOCK이 해제될 때까지 대기해야합니다.\n이 LOCK은 커밋 또는 롤백을 할 때까지 유지됩니다.\n\n이를 통해 동시성 문제를 해결할 수 있지만, 성능에 악영향을 줄 수 있습니다.\n```\n\n### GROUP BY 절에 대해서 설명해주세요.\n\n```text\nGROUP BY 절을 통해 특정 칼럼의 데이터를 그룹화할 수 있습니다.\n\n보통 집계 함수와 함께 사용하여 유의미한 결과를 도출할 수 있습니다.\n```\n\n### ORDER BY 절에 대해서 설명해주세요.\n\n```text\n쿼리의 결과를 특정 열을 기준으로 정렬하기 위해 사용하는 절입니다.\n\n기본적으로 오름차순으로 정렬을 하지만 내림차순으로 정렬할 수 있으며,\n정렬의 기준이 되는 열을 2개 이상 설정할 수 있습니다. \n```\n\n### INNER JOIN과 OUTER JOIN에 대해서 설명해주세요.\n\n```text\nINNER JOIN은 JOIN 하려는 두 테이블의 특정 열을 기준으로 동일한 행들만 반환하는 명령어입니다.\n\nOUTER JOIN은 두 테이블의 동일한 행 뿐만 아니라, 조건에 일치하지 않는 특정 테이블의 행들도 함께 반환하는 명령입니다.\n```\n\n### LEFT OUTER JOIN, RIGHT OUTER JOIN에 대해서 설명해주세요.\n\n```text\nLEFT OUTER JOIN은 JOIN 시에 왼쪽, 즉 기준이 되는 테이블의 모든 행과, JOIN 조건에 일치하는 행들을 모두 반환합니다.\n\nRIGHT OUTER JOIN은 LEFT와 반대로 오른쪽, 즉 JOIN이 되는 테이블의 모든 행과 JOIN 조건에 일치하는 행들을 모두 반환합니다.\n```\n\n### CROSS JOIN에 대해서도 설명해주세요.\n\n```text\n첫 번째 테이블의 모든 각 행이 두 번째 테이블의 전체 행과 결합하는 방식의 JOIN입니다.\n\n두 테이블의 각 전체 데이터 수를 곱한 크기의 JOIN 결과가 반환됩니다.\n```\n\n### 서브쿼리에 대해서 설명해주세요.\n\n```text\n쿼리문 안에서 실행되는 또 다른 쿼리문입니다.\n\n주로 쿼리문 안에서 추가적인 쿼리문이 필요할 때 사용합니다.\n```\n\n### DROP, TRUNCATE, DELETE에 각각에 대해 설명해주세요. 어떤차이가 있나요?\n\n```text\nDROP은 테이블 자체를 삭제하는 명령입니다.\nTRUNCATE는 테이블은 그대로 두고 테이블 안에 있는 모든 데이터를 삭제하는 명령입니다.\nDELETE는 테이블 안에 있는 특정 행을 삭제하는 데 사용합니다.\n\nDROP, TRUNCATE는 롤백을 할 수 없지만 DELETE는 롤백이 가능합니다.\nDROP, TRUNCATE는 빠른 속도로 실행되지만 DELETE는 조건을 비교하는 과정이 필요하기에 시간이 오래 걸릴 수 있습니다.\n```\n\n### DISTINCT에 대해서 설명해주세요. 사용해본 경험도 설명해주세요.\n\n```text\n쿼리 결과에서 특정 칼럼에 해당하는 데이터의 중복을 제거한 결과를 반환하는 명령어입니다.\n\n셀럽잇 프로젝트에서 음식점 테이블과 비디오 테이블을 음식점 ID로 JOIN하는 과정이 존재했습니다.\n이때 음식점 테이블과 비디오 테이블은 1:다 관계였기에 JOIN 결과로 같은 음식점이 2개 이상 존재하는 상황이 발생했습니다.\n따라서 이때 생기는 중복을 제거하기 위해 사용한 경험이 있습니다.\n```\n\n### SQL Injection 공격이 무엇인지 어떻게 공격을 예방할 수 있는지 설명해 주세요.\n\n```text\n악의적인 사용자가 입력 필드를 통해 서버에 SQL 쿼리를 주입하여 DB에 대한 공격을 시도하는 행위입니다.\n\n이를 방지하기 위해 입력값을 직접 쿼리문에 넣지 않고, 쿼리를 파라미터화하여 공격을 예방할 수 있습니다.\n```\n\n### 알고 있는 SQL 안티패턴이 있다면 설명해주세요.\n\n```text\n'SELECT *' 을 사용하는 것입니다.\n\n이는 불필요한 열의 데이터까지 모두 가져오기에 불필요한 오버헤드가 발생할 수 있습니다.\n실제로 셀럽잇 프로젝트에서 음식점 테이블과 행정구역 테이블을 통해 공간 인덱스를 활용하려는 시도에서,\n실수로 SELECT * 을 사용하여 항상 테이블 풀 스캔의 결과가 발생했고\n이를 뒤늦게 발견하여 의도했던 결과가 나오지 않았던 것을 알게 된 경험이 있습니다.\n\n추가로 비효율적인 JOIN, 서브쿼리 남용 등이 있습니다.\n```\n\n### 페이지네이션을 구현한다고 했을때 쿼리를 어떻게 작성해야할까요?\n\n```text\nMySQL을 기준으로 LIMIT과 OFFSET을 통해 구현할 수 있습니다.\n\nOFFSET을 통해 쿼리 결과에서 n번 째부터 LIMIT의 수만큼의 데이터만을 가져옴으로써 페이지네이션을 구현할 수 있습니다.\n```"},{"excerpt":"단위 테스트란? 애플리케이션에서 동작하는 기능 또는 메서드를 실행시키는 독립적인 단위의 테스트이다. 이때 기능이라는 말이 포함되어있다. 즉, 단위 테스트라고 해서 무조건 메서드만 테스트하는 건 아니다. 왜 단위 테스트를 하나? 잘 작성한 단위 테스트는 개발자가 작성한 단위(기능 또는 메서드)를 매우 빠르게 검증할 수 있다. 단위 테스트를 하지 않았을 때의…","fields":{"slug":"/unit-test/"},"frontmatter":{"date":"November 27, 2023","title":"단위 테스트 이해하기","tags":["unit-test","test"]},"rawMarkdownBody":"\n## 단위 테스트란?\n\n애플리케이션에서 동작하는 **기능 또는 메서드를 실행**시키는 **독립적인 단위의 테스트**이다.\n\n이때 기능이라는 말이 포함되어있다. 즉, 단위 테스트라고 해서 무조건 메서드만 테스트하는 건 아니다.\n\n## 왜 단위 테스트를 하나?\n\n잘 작성한 단위 테스트는 **개발자가 작성한 단위(기능 또는 메서드)를 매우 빠르게 검증**할 수 있다.\n\n### 단위 테스트를 하지 않았을 때의 문제점\n\n1. 테스트 코드를 프로덕션 코드에 작성해야한다.<br>\n   이는 배포하는 jar 파일의 크기에 영향을 줄 것이고 배포 시간에도 영향을 줄 것이다.\n\n2. 기능을 개발할 때마다 직접 실행시켜 동작을 확인해야한다.<br>\n   이는 작성한 기능에 대해 검증받는 시간의 주기가 길어질 것이다.<br>\n   즉, 버그를 낳을 확률이 증가한다.\n\n이 외에도 문제점이 다양하게 있겠지만, 이만하면 단위 테스트를 할 가치가 충분히 있어보인다.\n\n## JUnit\n\n이렇게 좋은 단위테스트를 어떻게 할까?<br>\n바로 [JUnit](https://junit.org/junit5/) 프레임워크를 사용한다.\n\n> 우테코 5기 최고 미남 [제리의 프레임워크 vs 라이브러리 vs API 테코톡](https://youtu.be/yKEwNVbAFC0?feature=shared)을 보면 프레임워크에 대해 알 수 있다.\n\nJUnit 홈페이지에 있는 소개글에 의하면 \"JVM 기반이며 Java 8 이상에 초점을 맞춰 다양한 스타일의 테스트를 지원한다\"고 한다.\n\n자세한 사용법은 [User Guide](https://junit.org/junit5/docs/current/user-guide/)를 참고하자.\n\n## 특징\n### 1. 메서드 실행 순서\n\n[공식 문서](https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order)에 의하면 테스트 실행 순서를 이렇게 설명한다.\n\n\"_기본적으로, 테스트 클래스와 메서드는 결정론적이지만 의도적으로 명확하지 않은 순서로 정렬이 된다._\"\n\n무슨 소리일까? 🤔\n\n결정론적 알고리즘에 대해 검색해보니 아래와 같이 설명한다.\n\n\"_예측한 그대로 동작하는 알고리즘이다. **어떤 특정한 입력이 들어오면 언제나 똑같은 과정을 거쳐서 언제나 똑같은 결과를 내놓는다**.\"_\n\n즉, 순서에 대한 보장은 할 수 없지만 입력과 출력은 매번 동일한 것이 보장된다. 라고 이해하면 될 것 같다.\n\n> 왜 이렇게 구현했을까 고민했을 땐, 테스트 순서로부터 독립성을 보장하기 위함이지 않을까한다.<br>\n> 좋은 단위 테스트는 독립적이어야한다. 테스트 순서에도 영향을 받아서는 안된다.\n\n```java\nclass TestOrderTest {\n\n    private static final AtomicInteger number = new AtomicInteger(1);\n\n    @Test\n    void C() {\n        System.out.println(\"Test C - \" + number.getAndIncrement());\n    }\n\n    @Test\n    void B() {\n        System.out.println(\"Test B - \" + number.getAndIncrement());\n    }\n\n    @Test\n    void A() {\n        System.out.println(\"Test A - \" + number.getAndIncrement());\n    }\n\n    @Test\n    void E() {\n        System.out.println(\"Test E - \" + number.getAndIncrement());\n    }\n\n    @Test\n    void D() {\n        System.out.println(\"Test D - \" + number.getAndIncrement());\n    }\n}\n```\n\n실제 위 예제 코드로 순서를 바꿔도 보고 그룹 단위로 변경해가며 실행하면 위에서 설명하는 특징을 실제로 보이는 것을 확인할 수 있다.\n\n> 만약 클래스에 작성한 테스트 코드의 순서대로 동작하고 싶다면 `@TestInstance(value = TestInstance.Lifecycle.PER_CLASS)`를 추가하자<br>\n> 혹은 `@TestMethodOrder(OrderAnnotation.class)`를 클래스 레벨에 추가하고, 각 메서드에 `@Order(int value)`로 조절하자\n\n> 클래스 간의 테스팅 순서도 조절할 수 있다고 한다. 이는 필요할 때 알아보자.\n\n### 2. AssertJ 활용\n\n[AssertJ](http://joel-costigliola.github.io/assertj/assertj-core-quick-start.html)는 \"_능수능란한 검증문 자바 라이브러리_\" 라고 설명한다.\n\n단순히 말해서 유용한 Assertion문을 선언할 수 있도록 도와주는 라이브러리라고 생각하자.\n\nAssertJ는 메서드 체이닝 가능한 assert문을 지원하는 라이브러리이다.<br>\n이를 이용해서 더욱 가독성 좋은 단위 테스트를 작성할 수 있다.<br>\n아래 코드로 비교해보자.\n\n```java\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@Test\nvoid assertJTest() {\n    // junit 메서드 사용\n    assertEquals(expected, actual);\n\n    // assertJ 메서드 사용\n    assertThat(actual).isEqualTo(expected);\n}\n```\n\n> 자세한 사용법은 [Java Doc](http://javadoc.io/doc/org.assertj/assertj-core) 참고\n\n추가적인 장점으로는 실패 메시지가 자세하다는 점과 다양한 검증 메서드를 지원한다고 한다.<br>\n심지어 [JUnit 공식 사이트](https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions-third-party)에서도 써드파티 Assertion 라이브러리로 AssertJ를 권장한다.\n\n## Junit vs AssertJ\n\nJunit은 프레임워크고 AssertJ는 라이브러리이다.\n\nAssertJ를 이용해 단위 테스트 코드를 작성하고, JUnit에게 `@Test`와 같은 어노테이션으로 메서드를 위임하여 실행시킨다. "},{"excerpt":"📝 질문 리스트 기아 상태가 무엇인가요? CPU에 의해 처리가 된 준비가 된 프로세스가, 다른 프로세스의 우선 순위에 밀려 오랜 시간 대기하는 상태입니다. 이는, 프로세스 스케줄링에 의해 발생할 수 있습니다. 보통 데드락과 헷갈릴 수 있는데, 데드락은 여러 프로세스가 동시에 자원들을 점유하려는 과정에서 모든 프로세스의 상태가 blocked가 되는 현상입니…","fields":{"slug":"/os-interview-study-3week/"},"frontmatter":{"date":"November 23, 2023","title":"[JSCODE] - OS 면접 스터디 3주차","tags":["operating-system","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### 기아 상태가 무엇인가요?\n\nCPU에 의해 처리가 된 준비가 된 프로세스가, 다른 프로세스의 우선 순위에 밀려 오랜 시간 대기하는 상태입니다.\n\n이는, 프로세스 스케줄링에 의해 발생할 수 있습니다.\n\n보통 데드락과 헷갈릴 수 있는데, 데드락은 여러 프로세스가 동시에 자원들을 점유하려는 과정에서 모든 프로세스의 상태가 blocked가 되는 현상입니다. 기아 상태는 프로세스의 상태는 ready인데, 프로세스 스케줄링에 의해 계속해서 대기하는 상태를 의미합니다.\n\n### 기아 상태를 어떻게 해결할 수 있나요?\n\nRR처럼 기아 상태가 발생하지 않는 스케줄링 알고리즘을 선택하거나,\n\n레디 큐에 대기하는 프로세스들이 처리가 되지 않을 때마다 우선 순위를 증가하는 방식으로 하면, 해결할 수 있다고 생각한다.\n\n### CPU 스케줄링에 대해 설명해주세요.\n\nCPU 효율을 극한으로 끌어올리기 위한 일종의 알고리즘\n\n다양한 알고리즘이 있고 FCFS, Priority, Round-Robin 등이 있다.\n\n각 알고리즘에 따라 장단점이 다르고, 발생할 수 있는 문제점이 다르다\n\n### 스케줄러의 종류는 무엇이 있나요?\n\n장기 스케줄러: 새로운 프로세서가 시스템에 들어올 때, 이를 메모리에 할당하거나 대기 큐에 넣는 역할\n\n단기 스케줄러: 현재 메모리에 적재된 프로세스 중 어떤 프로세스가 CPU에 할당될 지 결정하는 역할.\n여기서 주로 CPU 스케줄링 알고리즘이 수행된다.\n\n중기 스케줄러: 프로세스를 메모리에서 디스크로 스왑하는 역할.\n메모리 부족 상태를 완화하거나, 프로세스의 우선순위를 조절하는 목적\n\n### 선점형 스케줄링과 비선점형 스케줄링의 차이가 무엇인가요?\n\n비선점형 스케줄링: CPU에 의해 처리되는 프로세스가 자발적으로 CPU를 반환하기 전까지는 아무런 개입을 하지 않는 방식.\n직관적이고 단순한 방법이지만, 이 경우 처리시간이 긴 프로세스가 CPU에 할당되면 다른 프로세스는 처리하지 못할 수 있다.\n\n선점형 스케줄링: 비선점형 방식을 적용하지만, 동시에 모종의 이유로 프로세스가 자발적으로 CPU를 반환하지 않았음에도 개입하는 방식.\n이 경우 처리되던 프로세스를 Ready Queue로 옮기는 작업과 다음 처리할 프로세스를 결정하고 할당하는 작업이 필요하다. 하지만, 높은 효율을 가진다.\n\n### 선입선출 스케줄링(FCFS)에 대해 설명해주세요.\n\nReady 큐에 들어간 순서대로 처리하는 방식이다.\n\n단순한 방법이지만, 만약 가장 먼저 들어간 프로세스의 처리 시간이 매우 긴 경우 뒤에 들어간 프로세스에 영향을 받는다.\n\n### 최단 작업 우선 스케줄링(SJF)에 대해 설명해주세요.\n\n프로세스가 CPU를 점유하는 시간이 가장 짧은 프로세스부터 처리하는 방식이다.\n이 경우 프로세스를 선택할 때마다 가장 작은 값을 선택한다. 이 말은 즉, 계속해서 시간이 짧은 프로세스가 레디 큐에 들어오면 영구히 처리되지 못하는 프로세스가 발생한다. 이를 기아 상태라고 한다.\n\n### 최소 잔류 시간 우선 스케줄링(SRTF) 방식에 대해 설명해주세요.\n\n최단 작업 우선 스케줄링과 선점형 스케줄링이 동시에 적용됐을 때, 레디 큐에 존재하는 프로세스중, 처리 시간이 가장 짧은 프로세스를 우선적으로 처리한다.\n\n이도 마찬가지로 기아 상태가 발생할 수 있다.\n\n### 우선순위 스케줄링에 대해 설명해주세요.\n\n각 프로세스에 우선순위를 매기고, 그 우선순위가 가장 높은 프로세스부터 처리하는 방식이다.\n\n기아 상태가 발생할 수 있다.\n\n### 라운드 로빈 스케줄링에 대해 설명해주세요.\n\n가장 간단하며 널리 사용되는 방식으로, 모든 프로세스는 동일한 Quantam을 가지고 이 시간동안만 CPU를 사용하는 방식이다.\n\n자연스레 모든 프로세스나 쓰레드가 공정하게 실행되며, 이 Qunatam을 적절한 시간으로 설정한다면 가장 높은 응답성을 보일 수 있다.\n\n### 멀티 레벨 큐 스케줄링에 대해 설명해주세요.\n\n프로세스들을 특징에 따라 그룹화하고, 그 그룹에 따라 레디 큐를 나누는 방식이다. 이 큐들에서도 우선순위가 존재하며, 각 그룹의 레디 큐에서는 서로 다른 방식으로 스케줄링된다.\n\n다양한 프로세스들이 서로 다른 특성을 가질 때, 각 프로세스에 적합한 스케줄링 방식을 적용할 수 있도록 할 수 있다.\n\n그룹 사이에서 우선순위가 낮은 큐에 있는 프로세스가 기아 상태에 빠질 수 있다.\n\n### 멀티 레벨 피드백 큐 스케줄링에 대해 설명해주세요.\n\n멀티 레벨 큐는 프로세스가 특정 큐에 들어가게 되면, 해당 큐의 우선순위에서 변경되지 못하는 점을 개선하기 위해 탄생한 방식이다.\n\n그래서 동적으로 프로세스의 우선순위를 결정한다.\n\n프로세스가 큐 간에 이동을 할 수 있고, 그에 따라 기아 상태도 해결할 수 있다.\n\n낮은 우선순위에 있는 큐에 있는 프로세스가 잦은 빈도로 실행되면 높은 우선순위 큐로 이동한다.\n\n## 🤔 개인적인 궁금증\n\n### 데드락 vs 기아상태\n\n데드락은, 여러 개의 프로세스가 필요한 자원을 요청하는 과정에서 더이상 진행될 수 없는 상태이다. 자원을 대기하는 blocked 상태에서 영구히 대기한다.\n\n반면 기아상태는, 한 프로세스가 처리될 상태이지만 다른 프로세스의 우선순위에 밀려 영구히 대기하는 상태이다.\n\n## 🎯 피드백\n\n개선할 점 찾기 힘들었다."},{"excerpt":"📝 질문 리스트 파일 시스템과 데이터베이스의 차이점에 대해서 설명해주세요. 파일 시스템은 물리적 액세스만 관리하고, 데이터베이스는 물리적 액세스와 논리적 액세스 모두 관리합니다. 둘 다 결국엔, 디스크에 물리적으로 저장된다. 특히 파일 시스템의 경우 디스크에 저장된 파일을 직접 다루는 시스템이다. 데이터베이스는 이 디스크에 저장된 파일과, 사용자 사이에서…","fields":{"slug":"/db-interview-study-1week/"},"frontmatter":{"date":"November 21, 2023","title":"DB 면접 스터디 1주차","tags":["database","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### 파일 시스템과 데이터베이스의 차이점에 대해서 설명해주세요.\n\n파일 시스템은 물리적 액세스만 관리하고, 데이터베이스는 물리적 액세스와 논리적 액세스 모두 관리합니다.\n\n둘 다 결국엔, 디스크에 물리적으로 저장된다.\n\n특히 파일 시스템의 경우 디스크에 저장된 파일을 직접 다루는 시스템이다.\n\n데이터베이스는 이 디스크에 저장된 파일과, 사용자 사이에서 데이터를 논리적인 구조로 관리하는 시스템\n\n### 데이터베이스의 특징에 대해 설명해주세요.\n\n실시간 사용성, 지속적인 변화, 동시에 공유, 값 참조가 있습니다.\n\n### DBMS는 뭘까요? 특징에 대해 설명해주세요.\n\n데이터베이스를 관리하는 시스템으로, 소프트웨어\n\nMySQL, Oracle, Redis 등이 있다.\n\n특징으로는, 데이터 일관성 유지, 복구, 동시 요청 제어 등이 있다.\n\n### 스키마가 뭘까요? 3단계 데이터베이스 구조에 대해 설명해주세요.\n\n스키마란, 데이터베이스에 저장된 데이터 구조를 정의하는 개념입니다.\n\n이 스키마는 데이터베이스 구조에서 외부 스키마, 개념 스키마, 내부 스키마로 나뉩니다.\n\n외부 스키마는 사용자가 보는 스키마입니다. 흔히 테이블이나 뷰를 의미한다고 보면 될 것 같습니다.\n\n개념 스키마는 전체 데이터베이스의 정의를 의미합니다. 쉽게 말해 전체 테이블을 의미한다고 할 수 있습니다.\n\n내부 스키마는 디스크에 실제 데이터가 저장되는 방법의 표현입니다. 인덱스, 자료형이 포함된다고 할 수 있습니다.\n\n### 데이터 독립성에 대해서 설명해주세요. ← 이거 잘 이해가 안감\n\nDB의 구조를 변경해도, 사용자에게 영향이 가지 않도록 하는 개념입니다.\n\n두 가지의 데이터 독립성이 존재합니다.\n\n논리적 데이터 독립성입니다. 이는, 논리적인 구조나 스키마를 변경해도 사용자는 동일하게 DML을 사용할 수 있어야 한다는 점입니다. 쉽게 말해 테이블 구조가 변경이 되어도 사용자는 논리적으로 동일한\n\n물리적 데이터 독립성은, 물리적인 구조가 변경되어도 사용자에게는 영향을 주지 않습니다.\n\n### RDBMS(관계형 데이터베이스 관리시스템)는 뭘까요?\n\n데이터를 테이블 간의 정의된 관계를 통해 데이터를 조회하고 쓸 수 있는 시스템입니다.\n\n### 릴레이션 스키마와 릴레이션 인스턴스에 대해서 설명해주세요.\n\n릴레이션 스키마는, 쉽게 말해 테이블의 제약 조건입니다. 테이블의 이름, 각 칼럼의 이름과 자료형을 의미합니다. 자바로 비유하자면 클래스\n\n릴레이션 인스턴스는, 자바로 비유하자면 인스턴스가 될 것 입니다. 즉, 스키마가 생성되고 어느 특정 시점에 테이블에 저장되어 있는 상태가 바로 릴레이션 인스턴스이다.\n\n정적이냐 동적이냐의 관점으로 봐도 될 것 같다.\n\n### 릴레이션의 차수와 카니덜리티에 대해 설명해주세요.\n\n차수: 특정 테이블의 칼럼 수\n\n카디널리티: 특정 칼럼에 해당하는 행들의 중복도입니다. 중복도가 높으면 카디널리티는 낮다라고 표현을 하고, 반대로 중복도가 낮으면 카디널리티는 높다고 합니다.\n\n### 키(Key)에 대해서 설명해주세요. (슈퍼키, 후보키, 기본키, 대리키, 외래키)\n\n슈퍼키: 테이블 내에서 고유성을 보장하는 데 사용되는 하나 이상의 칼럼의 집합\n\n후보키: 슈퍼키의 성질을 포함하면서 동시에 최소성을 만족하는 키\n\n기본키: ID 필드에 속하는 값들. 각 행을 구분짓는 값. Not Null이며 값이 중복되서는 안된다.\n\n대리키: 사용자가 정의한 실제 데이터와는 상관없이 데이터베이스가 자동으로 생성하는 키를 의미. 주로 기본키로 사용하며, 데이터의 변경이나 실제 값의 변경에 대한 영향을 최소화한다.\n\n외래키: 하나의 특정 테이블에서 다른 테이블과 관계를 맺기 위한 키. 주로 외래키는 관계를 맺어지는 테이블의 기본키이다.\n\n### 무결성 제약조건에 대해서 설명해주세요. (도메인 무결성, 개체 무결성, 참조 무결성)\n\n데이터 무결성: DB에 저장된 데이터가 결함이 없는지? 이 결함은, 일관성과 정확성\n\n도메인 무결성(도메인 제약): 칼럼의 속성에 해당하는 값만 올 수 있다.\n\n개체 무결성(기본키 제약): 테이블은 기본키를 설정해야 하고, 기본키는 Not Null, Unique 해야 한다.\n\n참조 무결성(외래키 제약): 테이블 간의 참조 관계를 선언하는 제약 조건. 자식 테이블의 외래키는 부모 테이블의 기본키와 도메인이 동일해야 하며, 자식 릴레이션의 값이 변경될 때 부모 릴레이션의 제약을 받는다.\n\n### 사용했던 데이터베이스에 대해서 설명해주세요. (오라클DB, MySQL, MariaDB, MongoDB 등)\n"},{"excerpt":"📝 질문 리스트 프로그램에 대해 설명해주세요. 프로그램은 개발자가 프로그래밍 언어로 작성한 명령어들의 집합입니다. 프로그램의 특징으로는 디스크에 실행 파일 형식으로 저장되어 있다가, 사용자가 실행을 하면 운영체제에 의해 해당 파일을 메모리에 적재됩니다. 이를 프로세스라고 합니다. 프로세스에 대해 설명해주세요. 프로그램의 인스턴스입니다. 쉽게 말해, 디스크…","fields":{"slug":"/os-interview-study-2week/"},"frontmatter":{"date":"November 16, 2023","title":"[JSCODE] - OS 면접 스터디 2주차","tags":["operating-system","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### 프로그램에 대해 설명해주세요.\n\n프로그램은 개발자가 프로그래밍 언어로 작성한 명령어들의 집합입니다.\n\n프로그램의 특징으로는 디스크에 실행 파일 형식으로 저장되어 있다가, 사용자가 실행을 하면 운영체제에 의해 해당 파일을 메모리에 적재됩니다.\n\n이를 프로세스라고 합니다.\n\n### 프로세스에 대해 설명해주세요.\n\n프로그램의 인스턴스입니다.\n\n쉽게 말해, 디스크에 저장되어 있던 프로그램이 사용자에 의해 실행되면, 운영체제가 프로그램의 일부 명령어를 메모리에 적재를 하게 되고, 적재된 명령어들이 CPU에 의해 처리가 됩니다.\n\n이렇게 해서 사용자가 실행한 프로그램이 프로세스로서 실행이 됩니다.\n\n### 프로세스의 메모리 공간에 대해 설명해주세요.\n\n프로세스의 메모리 공간은 크게 4가지로 나뉩니다.\n\n**텍스트(또는 코드) 영역**, **데이터 영역**, **힙 영역**, **스택 영역**으로 나뉩니다.\n\n텍스트 영역은 프로그램의 명령어들이 저장되는 영역입니다. CPU는 이 부분의 명령어를 읽어 처리합니다.\n\n데이터 영역은 주로 전역 변수나 정적 변수들이 저장되는 영역입니다.\n\n스택 영역은 지역 변수나 함수 호출과 관련된 데이터가 저장되는 영역입니다.\n\n힙 영역은 프로세스가 실행 중에 동적으로 메모리를 할당하고 해제하게 되는데, 그때 사용하게 되는 영역입니다.\n자바 기준으로 말씀드리자면 객체의 인스턴스가 힙 영역에 저장된다고 할 수 있습니다.\n\n### 쓰레드에 대해 설명해주세요.\n\n프로세스의 실행 단위인 동시에, CPU가 처리할 수 있는 하나의 작업 단위입니다.\n\n실행 중인 프로세스는 꼭 1개 이상의 쓰레드를 가집니다.\n\n한 프로세스에 여러 쓰레드가 존재할 수 있으며, 이 쓰레드들은 같은 프로세스의 자원을 공유해서 사용할 수 있습니다.\n\n쓰레드가 많을수록 처리하는 작업이 많아져서 효율이 증가한다고 생각할 수 있는데요.\n사실, 이 쓰레드 간의 컨텍스트 스위칭이 빈번하게 일어나면 그 과정에서 오버헤드가 발생합니다.\n따라서 많다고 해서 좋은 건 아닙니다.\n\n### 프로세스와 쓰레드가 어떤 차이가 있는지 예시를 들어 설명해주세요.\n\n프로세스가 식당이라고 한다면, 쓰레드는 요리사 또는 서버 또는 계산원이 될 수 있을 것 같습니다.\n\n한 식당에서 고객의 요청에 의해 수행되어야 하는 작업이 주문받기, 요리, 음식 제공, 계산의 순이 될 것 같은데요. 이러한 하나의 작업 단위를 수행하는 사람이 분명히 존재해야 합니다.\n따라서 이 하나의 작업 단위를 수행하는 사람을 쓰레드로 비유를 들 수 있을 것 같습니다.\n\n### 쓰레드의 메모리 공간(스택, 데이터, 코드)에 대해 설명해주세요.\n\n쓰레드는 각기 다른 작업 영역을 가집니다. 이 작업 영역은 스택 영역에 해당합니다.\n이외에 나머지인, 코드, 데이터, 힙 영역에 경우는 같은 프로세스 내에서 함께 사용하게 됩니다.\n\n이로 인해 발생할 수 있는 문제점이 있습니다. 바로, 동시성 문제인데요.\n특히 데이터 영역의 경우 정적 변수들이 저장되어 있는데, 이 변수가 가변성을 띈다면 동시성 문제가 충분히 발생할 수 있습니다.\n\n따라서 멀티 쓰레드 환경이라면 동시성 문제를 항상 고려해야 합니다.\n\n### 프로세스 제어블록(PCB)에 대해 설명해주세요.\n\n특정 프로세스에 대해 중요한 정보를 담고 있는 자료구조입니다.\n운영체제가 프로세스를 관리하기 위해 프로세스 생성과 동시에 고유한 PCB를 생성합니다.\n\n프로세스가 CPU에 할당되어 처리되는 도중에, CPU의 점유가 다른 프로세스로 넘어가게 된다면, 실행 과정에 대한 정보를 어딘가에 저장하고 있어야 합니다. 이때 그 어딘가가 PCB에 해당합니다.\n\n- PCB에는 어떤 정보가 담겨있을까요?\n    - 프로세스 ID\n    - 프로세스의 상태: new, ready, running, waiting, terminated\n    - 프로그램 카운터: 프로세스가 다음에 실행할 명령어의 주소\n    - CPU 레지스터\n    - CPU 스케줄링 정보: 프로세스 우선순위, 스케줄 큐에 대한 포인터 등\n    - 메모리 관리 정보: 페이지 테이블 또는 세그먼트 테이블 등과 같은 정보를 포함\n    - 입출력 상태 정보: 프로세스에 할당된 입출력 장치들과 열린 파일 목록\n    - 어카운팅 정보 : 사용된 CPU 시간, 시간제한, 계정번호 등\n\n### 쓰레드 제어블록(TCB)에 대해 설명해주세요.\n\n쓰레드에 대한 정보를 저장하는 자료구조입니다.\n\n쓰레드가 생성될 때, 운영체제는 각 쓰레드에 대한 TCB를 생성하고 업데이트하여 쓰레드의 상태를 추적합니다.\n\n특정 쓰레드가 CPU를 점유하여 처리되는 도중에, 다른 쓰레드로 점유가 넘어가게 되면, 기존 처리되던 쓰레드의 상태를 저장해야 합니다. 이때 저장하는 공간이 TCB입니다.\n\n- TCB에 포함되는 정보\n- 쓰레드 식별자\n- 쓰레드 상태\n- 프로그램 카운터\n- 스택 포인터\n- 레지스터 상태\n- 쓰레드 우선순위\n- 쓰레드의 할당된 자원 정보\n- 쓰레드의 스케줄링 정보\n\n### 멀티 프로세스에 대해서 설명해주세요.\n\n하나의 컴퓨터에서 여러 개의 독립적인 프로세스가 실행되는 것을 말합니다.\n\n이때, 각 프로세스는 메모리에 각각의 독립적인 메모리 영역을 할당받게 됩니다.\n\n프로세스가 많을수록 처리되는 프로그램의 수가 많아져서 좋은 게 아닐까하는 생각이 들 수 있지만, 쓰레드가 많을수록 좋은 게 아닌 것처럼 실행 결과가 좋지 않을 수 있습니다.\n\n### 멀티 쓰레딩에 대해서 설명해주세요.\n\n하나의 프로세스 내에 여러 개의 쓰레드가 동시에 실행되는 것을 의미합니다.\n\n적절한 수의 쓰레드는 여러 작업을 이상없이 동시에 처리할 수 있지만,\n너무 많은 수의 쓰레드는 컨텍스트 스위칭으로 인해 오히려 성능 저하가 발생할 수 있습니다.\n\n### 프로세스 수행 상태 변화 과정에 대해 설명해주세요.\n\n처음 프로세스가 메모리에 적재되기 전의 상태는 new입니다.\n\n해당 프로세스가 메모리에 적재가 되고 실행대기 큐에 적재가 된 상태는 ready입니다.\n\n해당 프로세스가 CPU에 할당되어 작업이 수행되면 running 상태입니다.\n\n만약 해당 프로세스가 IO 작업을 요청하게 되면, 해당 IO 작업이 완료되기 전까지 대기하는 상태가 block 입니다.\n\n해당 프로세스가 종료될 때, terminated 상태를 거쳐 완전히 종료하게 됩니다.\n\n### 문맥교환(context switch)에 대해 설명해주세요.\n\nA 쓰레드와 B 쓰레드가 동시에 처리될 때, CPU가 A를 처리하다가 B를 처리하게 될 때 발생하는 개념이 컨텍스트 스위칭입니다.\n\n- 문맥교환은 언제 발생하나요?\n\n일반적으로 한 쓰레드의 타임 슬라이스가 끝난 경우 발생합니다.\n\n또는 타이머 인터럽트나 IO 요청 시스템 콜이 들어올 때 발생합니다.\n\n- 문맥 교환 발생 과정에 대해서 조금 더 상세히 설명해주세요.\n\n현재 처리하는 CPU가 쓰레드 A에서 B로 컨텍스트 스위칭이 일어난다고 가정해보겠습니다.\n\n이때, 쓰레드 A의 진행 상태를 PCB 내지 TCB에 저장합니다.\n그리고 운영체제는 쓰레드 B의 진행 상태를 PCB 또는 TCB에서 불러오고, 이를 CPU에게 할당합니다.\n\n### fork() 명령어에 대해 설명해주세요.\n\n유닉스에서의 fork 명령어는 새로운 프로세스를 생성하도록 하는 시스템 콜입니다.\n\nfork 시스템콜을 통해 부모 프로세스의 내용을 그대로 복제한 자식 프로세스를 생성할 수 있습니다.\n\n이때 부모 프로세스와 자식 프로세스는 독립적으로 수행합니다.\n\n### 프로세스끼리 협력하는 방법에 대해서 설명해주세요.\n\n1. 메시지 전달 방식\n   프로세스는 다른 프로세스에게 전달할 메시지를 운영체제에게 시스템 콜 방식으로 요청해 전달한다.\n2. 공유 메모리 방식\n   시스템 콜 방식을 통해 각 프로세스 간 공유하는 공간을 만든다.\n   이 공유 공간을 다른 프로세스에서 접근할 수 있도록 한다.\n\n## 🤔 개인적인 궁금증\n\n### 스택 메모리 영역 관련\n\n자바의 정석에 따르면, “각 메서드를 위한 메모리상의 작업공간은 서로 구별된다”고 합니다.\n동시에 쓰레드에 대해 학습했을 때, 각 쓰레드는 각기 다른 스택 영역을 가진다고 학습했습니다.\n\n둘 다 결국, 메모리 관점에서 스택 영역에 각기 다른 작업 영역을 할당한다고 이해하면 될까요?\n\n### 컨텍스트 스위칭 설명에 주로 프로세스 간의 교환이 설명되어 있는데, 쓰레드 간의 교환으로 나와있지 않은 이유? 그리고 사실상 쓰레드 간의 교환이 일어날텐데? 그리고 같은 프로세스의 쓰레드 간의 교환이 일어나면 PCB 말고 TCB에 저장하나?\n\n## 🎯 피드백\n\n- 저번 주랑 많이 달라졌다. **두괄식이 좋았다.**\n- 예시도 구체적이고 자세해서 굿\n- 소통도 많이 늘었다.\n- 저번 주에 비해 다 좋았다.\n- 래비덴큐\n- 멀티 쓰레드 적용 → 대용량 데이터, 배치\n  이때 멀티 쓰레드의 장점을 많이 느낀다.\n- 시선 처리"},{"excerpt":"📝 질문 리스트 운영체제는 무엇이고 어떤 역할을 수행하는가? 운영체제는 컴퓨팅 시스템을 운영하는 시스템이다. 약간 말장난 같지만, 실제로 운영체제는 사용자와 하드웨어 사이에서 자원을 어떻게 사용할 지를 결정한다. 대표적인 역할로는 프로세스 스케줄링, 프로세스 동기화 방식 등이 있다. 시분할 시스템 하나의 프로세서가 2개 이상의 프로세스의 작업을 처리해야할…","fields":{"slug":"/os-interview-study-1week/"},"frontmatter":{"date":"November 09, 2023","title":"[JSCODE] - OS 면접 스터디 1주차","tags":["operating-system","interview"]},"rawMarkdownBody":"\n## 📝 질문 리스트\n\n### 운영체제는 무엇이고 어떤 역할을 수행하는가?\n\n운영체제는 컴퓨팅 시스템을 운영하는 시스템이다.\n\n약간 말장난 같지만, 실제로 운영체제는 사용자와 하드웨어 사이에서 자원을 어떻게 사용할 지를 결정한다.\n\n대표적인 역할로는 프로세스 스케줄링, 프로세스 동기화 방식 등이 있다.\n\n### 시분할 시스템\n\n하나의 프로세서가 2개 이상의 프로세스의 작업을 처리해야할 때, 각각의 프로세스의 작업을 얼마만큼의 시간동안 처리를 할 것인지에 대한 정책이다.\n\n시분할 시스템을 구현하기 위한 다양한 알고리즘이 있지만, 현재 가장 널리 사용되는 알고리즘은 Round-Robin 알고리즘이다.\n\nRound Robin 알고리즘은, 각 프로세스의 CPU 할당 시간을 동일하게 설정하고, 할당 시간이 끝이 나면 인터럽트를 발생시켜 다음 프로세스의 작업을 수행하도록 하는 과정의 알고리즘이다.\n\n보통 할당 시간은 매우 짧은 시간에 속하지만, CPU는 이 시간안에 매우 빠른 속도로 작업을 처리하기 때문에 사용자는 2개 이상의 프로세스가 동시에 실행되는 것처럼 보인다.\n\n### 다중 프로그래밍 시스템(multi-programming system)\n\n2개 이상의 프로그램이, 하나의 메모리에 동시에 적재되는 시스템을 말한다.\n\n이때, 프로그램이 메모리에 적재될 때, 프로그램 전체를 올리진 않는다. \n\n용량이 작은 메모리에 2개 이상의 프로그램 전체를 적재할 수 없기 때문이다. \n\n따라서 당장 필요한 부분만 메모리에 적재한다.\n\n### 대화형 시스템(interactive system)\n\n사용자가 컴퓨터와 1:1로 대화한다는 느낌의 시스템이다.\n\n다른 말로, 사용자가 입력한 결과가 컴퓨터에 즉시 출력된다는 것이다.\n\n실제로는 여러 사용자가 한 대의 컴퓨터를 이용함에도, 1:1처럼 인식한다는 것이다.\n\n이는 다중 프로그래밍 시스템과 시분할 시스템의 적용으로 가능하다.\n\n### 다중 처리기 시스템(multi-processor system)\n\n프로세서가 2개 이상인 시스템이다.\n\n당연하게도 모든 프로세서가 자원을 함께 사용한다.\n\n대칭적 다중 처리 시스템: 단일 운영체제 아래에서 2개 이상의 CPU가 동작하는 시스템이다.\n\n각 CPU끼리는 데이터를 효율적으로 공유하는 구조로 운영된다.\n\n비대칭적 다중 처리 시스템: 1개의 메인 CPU가 시스템을 제어하며, 나머지 CPU들은 미리 정의된 작업을 수행한다.\n\n### 시스템 콜\n\n프로세스가 OS 커널이 제공하는 서비스를 이용하고 싶을 때, 시스템 콜을 이용해 실행한다.\n\n#### 종류\n- 프로세스/스레드 관련\n- 파일 IO 관련\n- 소켓 관련\n- Device 관련 (키보드 등)\n- 프로세스 통신 관련\n\n시스템 콜이 발생하면, 커널은 CPU에게 Interrupt를 발생하고, CPU는 다음 명령을 실행할 때 체크하고, 해당 커널 코드를 실행\n\n### 커널\n\nOS의 core라고 할 수 있다.\n\n항상 메모리에 적재되어있다.\n\nHW와 프로세스 사이의 인터페이스로서, 프로세스가 요청하는 시스템 콜에 대해 직접 수행한다.\n\n왜 인터페이스?\n\n프로세스는 개발된 프로그래밍 언어가 모두 다르고, 시스템 콜을 호출하는 방식이 모두 다르기 때문에 중간에 추상 계층이 필요하기 때문\n\n운영체제와 커널의 차이?\n\n커널은 운영 체제에 포함되는 하나의 모듈의 개념이다.\n\n운영체제는 커널을 포함해, 컴퓨터 시스템을 총괄하는 개념으로 이해하고 있다.\n\n### 유저모드와 커널모드\n\n- 유저모드: 프로세서가 응용 프로그램을 실행하는 모드\n- 커널모드: 프로세서가 커널 코드를 실행하는 모드\n\n유저 모드에서 커널 모드로 전환될 때 인터럽트나 시스템 콜이 발생한다.\n\nCPU의 mode bit 레지스터로 구분한다.\n\n0이면 커널 모드, 1이면 유저 모드\n\n커널모드가 필요한 이유는 누군가 만든 프로그램이 하드웨어를 직접 통제하게 되고, 점유하는 등과 같은 문제로 다른 프로세스에 영향을 미칠 수 있기 때문이다.\n\n즉, 시스템을 보호하기 위해서\n\n### 폴링\n\nCPU가 I/O Device의 작업 내용이나 결과를 직접 확인하는 방식이다.\n\n이 방식은 CPU의 작업이 수행되어야 하기에 프로세스 관점에서는 불필요한 오버헤드이다.\n\n이 비효율적인 방식을 개선하기 위해 인터럽트가 탄생했다.\n\n### 인터럽트\n\n시스템에서 발생한 다양한 종류의 이벤트\n\n#### 종류\n\n- 전원에 문제가 생겼을 때\n- IO 작업이 완료됐을 때\n- 시간이 다 됐을 때 (timer 관련)\n- 프로그램에서 0으로 나눴을 때\n- 프로그램에서 잘못된 메모리 공간에 접근을 시도할 때\n\n- 인터럽트 벡터: 인터럽트의 처리 루틴 주소를 가짐\n- 인터럽트 처리 루틴: 인터럽트를 처리하는 커널 함수\n\n### DMA\n\nCPU는 매우 빠른 속도로 메모리에만 접근한다. 동시에 SSD 같은 비교적 빠른 I/O Device가 존재한다.\n\n이런 상황에서 Device들이 잦은 빈도로 인터럽트를 발생하면, CPU의 성능이 떨어진다.\n\n이를 방지하고자, I/O Device에서 각 buffer storage의 내용을 메모리에 block 단위로 직접 전송하고, 인터럽트를 발생하는 개념이다.\n\n이 DMA는 CPU와 I/O Device 사이에 위치하는 DMA Controller에 의해 수행된다.\n\n### 동기식 I/O과 비동기식 I/O\n\n프로세스에 의해 I/O 요청이 발생하면, 프로세서는 이 요청을 처리한다.\n이때, 동기식 I/O의 경우는 해당 I/O 작업이 완료된 후에야 다음 작업을 처리한다.\n비동기식 I/O의 경우는 I/O 작업을 요청보내고, 바로 다음 작업을 실행한다.\n\n동기식 I/O의 경우, 프로세스의 다음 작업이 디스크에서 읽은 값을 이용한 처리라면 적용할 수 있다.\n하지만, I/O 작업의 경우 시간이 오래 걸리는 작업이기에 CPU의 효율을 매우 떨어트리는 방식이다.\n즉, CPU의 성능을 희생하는 대신 작업의 결과를 보장할 수 있다.\n\n비동기식 I/O의 경우, 프로세스의 다음 작업이 I/O 작업과 관련이 없는 경우 적용할 수 있다.\n하지만 비동기식 I/O 작업의 결과를 즉시에 알 수 없다. 확인하려면 또 다른 요청이 필요할 수 있다.\n그래도 CPU가 쉬지 않고 일할 수 있으므로 CPU의 효율을 끌어올릴 수 있다.\n\n위의 경우는 하나의 프로세스에서의 경우를 가정한 것이다.\n하지만 보통은 다수의 프로세스를 동시에 처리한다.\n이때, I/O 작업을 요청한 프로세스는, 해당 작업이 완료될 때까지 대기시켜놓고, 그 시간동안 CPU는 다른 프로세스의 작업을 처리한다. 즉, 동기식 I/O 처리를 하며 CPU 스케줄링을 통해 CPU 성능과 작업의 정합성을 모두 지킨다.\n\n## 📚 추가 학습\n\n### 인터럽트와 시스템 콜, 그리고 유저 모드와 커널 모드\n\n```text\n유저 모드: 우리가 개발하는 프로그램은 일반적으로 유저 모드에서 실행\n커널 모드: 프로그램 실행 중, 인터럽트가 발생하거나 시스템 콜을 호출하게 되면 커널 모드로 전환\n전환할 때, 현재 실행 중이던 프로그램의 현재 상태를 저장\n그 후, 발생한 인터럽트 혹은 시스템 콜을 직접 처리. 즉, CPU에서 커널 코드가 실행된다.\n모든 처리가 완료되면, 중단됐던 프로그램의 상태를 복원\n다시 통제권을 프로그램에게 반환. 즉, 커널 모드에서 유저 모드로 전환\n프로그램이 이어서 실행\n\n커널: 운영체제의 핵심\n시스템 전반을 관리/감독하는 역할\n하드웨어와 관련된 작업을 직접 수행\n\n커널 모드를 만든 이유: 누군가 만든 프로그램이 하드웨어를 직접 통제하게 되고, 점유하는 등과 같은 문제로 다른 프로세스에 영향을 미칠 수 있다.\n즉, 시스템을 보호하기 위해\n\n인터럽트: 시스템에서 발생하는 이벤트 혹은 그런 이벤트를 알리는 매커니즘\n종류\n - 전원에 문제가 생겼을 때\n - IO 작업이 완료됐을 때\n - 시간이 다 됐을 때 (timer 관련)\n - 프로그램에서 0으로 나눴을 때\n - 프로그램에서 잘못된 메모리 공간에 접근을 시도할 때\n\n인터럽트가 발생하면, CPU에서는 즉시 인터럽트 처리를 위해 커널 코드가 커널 모드에서 실행.\n여기서 ‘즉시’라고 했지만, 실행중이던 프로세스의 처리까지는 마무리한 뒤에 처리를 한다.\n\n시스템 콜: 프로그램이 커널이 제공하는 서비스를 이용하고 싶을 때, 시스템 콜을 이용해 실행한다.\n종류\n- 프로세스/스레드 관련\n- 파일 IO 관련\n- 소켓 관련\n- Device 관련 (키보드 등)\n- 프로세스 통신 관련\n시스템 콜이 발생하면, 해당 시스템 콜에 대응하는 커널 코드가 커널 모드에서 실행된다.\n```\n\n### Physical Memory, Virtual Memory\n\n```text\nVirtual Memory: 각 프로세스만의 논리적인 주소이다.\nPhysical Memory: 실제 메모리에 적재된 주소이다.\n\nVirtual Memory에서, Physical Memory를 가리키기 위해선 중간에 변환해주는 역할이 필요하다. 이는 ATU(Address Translation Unit)에 의해 수행된다.\n```\n\n### I/O Bound, CPU Bound\n\n```text\n쓰레드의 관점에서, 수행할 작업의 시간이 I/O 작업과 CPU에 의해 처리되는 시간의 비중이 얼마나 많은지에 대한 내용이다.\n```\n\n### 인터럽트가 발생하면, CPU에서 어떤 일이 발생할까?\n\n## 🤔 개인적인 궁금증\n\n### ### I/O 작업은 왜 느리다고 하는가?\n\n```text\n보통 I/O 작업이 느리다는 말은 CPU와 비교해서 표현하는 것 같다.\n그럼 왜 CPU에 비해 100만 배 이상 느릴까?\n\n1. I/O 작업 자체가 느리거나 오래 걸리는 작업일 수 있다.\n2. I/O 작업은 버스를 통해 CPU와 통신한다.\n이 과정에서 대기 시간이 발생할 수 있기 때문이다.\n3. 보통 I/O 장치는 인터럽트를 발생시켜 처리가 필요함을 알린다.\nCPU의 인터럽트 마스크가 된 상태에서, 다른 중요한 작업을 하고 있을 수 있어서 바로 처리하지 않을 수 있기 때문이다.\n게다가 인터럽트 작업을 처리하기 위해 CPU는 컨텍스트 스위칭을 한다.\n4. Device의 물리적 거리도 영향이 있을까?\n```\n\n### 컨텍스트 스위칭은 프로세스 간 교환에서만 일어나는가? 쓰레드 간 교환에서는 일어나지 않는가?\n\n```text\n\n둘 다 가능하다.\n하지만 성능 상 차이가 발생한다.\n\n우선 컨텍스트 스위칭이 무엇인가?\nCPU/코어에서 실행중이던 프로세스/쓰레드가 다른 프로세스/쓰레드로 교체되는 것이다.\n\n그럼 왜 성능 차이가 발생하는가?\n쓰레드 컨텍스트 스위칭은 같은 프로세스 내에서의 컨텍스트 스위칭이다.\n이때 프로세스의 가상 메모리 주소를 공유해서 사용한다.\n\n하지만 프로세스 컨텍스트 스위칭은, 이 **가상 메모리 주소 관련 처리**에 대한 **오버헤드**가 발생한다.\n이때 수행되는 처리로는 각 프로세스 PCB에 컨텍스트 저장, CPU 레지스터에 컨텍스트 교체 등이 있다.\n이러한 오버헤드의 차이로 인해 성능 상 차이가 발생한다.\n\n그렇다고 쓰레드 컨텍스트 스위칭이 오버헤드가 없다는 건 아니다.\n상대적으로 더 적은 오버헤드이지, 아예 없는 건 아니다.\n```\n\n### Tomcat maxThreads 기본값은 왜 200이고, HikariCP Max-Connection의 기본값은 왜 10일까?\n\n```text\nTomcat의 maxThreads 값은, 들어온 요청과 1:1로 Connect를 하고, 그 Connect를 처리하기 위해 생성하는 쓰레드의 최대 개수이다.\n즉, 하나의 프로세스 내의 존재하는 쓰레드이고, 이는 쓰레드 컨텍스트 스위칭이 발생한다.\n\nHikariCP는 JDBC Connection Pool이다.\nJDBC Connection은 Java 기반 애플리케이션과 RDMBS와의 Connection이다.\n즉, 프로세스 간의 소켓 통신이 일어나고, 이는 프로세스 컨텍스트 스위칭이 발생한다.\n\n그래서 HikariCP의 Max-Connection Size를 설정할 때, Size가 클수록 처리해야 할 Thread가 많아지고, 이는 곧 컨텍스트 스위칭을 자주 유발하기 때문에 오히려 적은 수의 Thread로 처리하는 것이 오버헤드 비용을 줄여 더 나은 성능을 보이는 것 같다.\n\nHikariCP Max-Connection의 기본값이 10인 이유는, 자체 벤치 마킹을 통해 결정했다.\nhttps://github.com/brettwooldridge/HikariCP#checkered_flag-jmh-benchmarks\n\nTomcat maxThreads의 기본값이 10인 이유는? 모르겠다. 아마 Tomcat에서 자체적인 테스트를 통해 도출된 결과값이 아닐까?\n```\n\n### EC2의 Swap Memory란?**\n\n```text\n우리는 흔히 EC2에서 Linux 게열의 OS를 사용한다.\n따라서 Linux에서의 Swap Memory는, 메인 메모리의 용량보다 더 많은 공간이 필요할 때 디스크의 일부 공간을 사용하는 개념이다.\n메모리 관리 알고리즘(LRU, LFU)에 의해 잘 사용되지 않는 데이터를 디스크에 저장하는 방식이다.\n하지만, 디스크를 사용하는만큼 속도는 느리다.\n\n이때, 디스크에 할당되는 일부 공간을 Swap Memory, 혹은 Swap Space 라고 한다.\n```\n\n## 🎯 피드백\n\n- 목소리, 말투 침착 또박. 듣는 입장에서 잘 들어옴 속도도 빨라지지 않고 일정했다.\n- 눈을 마주치고 답변\n- 꼬리 질문에도 맞든 안맞든 최대한 답변하는 모습\n- 아는 개념에 대해선 핵심 단어를 강조\n- 폴링에 대해 설명할 때, 짧게 대답했다. 이는 꼬리 질문을 유도해보인걸로 보여서 좋았다.\n근데 너무 짧았던 것 같다. 근데 꼬리 질문에서 대답 못하면, 이거밖에 모르나보네. 할 수 있다.\n- 아는건 많아 보인다. 근데, 정리가 되지 않고 내용이 길어진다.\n장황하게 설명하기보다 개념에 대해 짚고, 부가 설명을 하는 게 좋아 보인다.\n- 모르는 질문에 있어서는 시간을 가지고 답변 굿.\n- 말이 길어지는 경향이 있다. 개념을 물어봤을 때, 이런 개념입니다. 하고 부연 설명.\n- 질문에 대해 답변이 한번씩은 많이 짧았다.\n한 마디만 더 했으면 면접관 입장에서 한번 더 물어볼 의향이 들었을텐데.."},{"excerpt":"DBCP (DataBase Connection Pool) 탄생 배경 서버 애플리케이션에서 DB 서버로 요청을 보내면 TCP 통신을 한다. TCP 통신은 Connection이 유지되는 상태에서 통신한다. 이 Connection은 생성하고 사용하고 삭제되기까지 꽤 많은 작업이 포함된다. 즉, 통신 비용이 비싸다. 이러한 상황에서 서버는 많은 요청을 처리하는데…","fields":{"slug":"/dbcp/"},"frontmatter":{"date":"October 16, 2023","title":"DBCP와 HikariCP 이해하기","tags":["database","DBCP","hikariCP"]},"rawMarkdownBody":"\n## DBCP (DataBase Connection Pool) 탄생 배경\n\n서버 애플리케이션에서 DB 서버로 요청을 보내면 TCP 통신을 한다.\n\nTCP 통신은 **Connection**이 유지되는 상태에서 통신한다.\n\n이 Connection은 생성하고 사용하고 삭제되기까지 꽤 많은 작업이 포함된다. 즉, 통신 비용이 **비싸다**.\n\n이러한 상황에서 서버는 많은 요청을 처리하는데, 이 요청들이 DB 서버로의 요청으로 이루어진다면 비싸고 오래걸리는 작업이 많아질 것이다.\n\n결국, 서버 성능에 악영향을 줄 수 있다.\n\n이를 해결하기 위해 DBCP는 탄생했다.\n\n## DBCP 기본 개념\n\n서버가 실행되면 DB와 Connection을 **미리 만들어 놓고 Pool에 저장해놓는다.**\n\n미리 만들어 놓은 DB Connection을 서버에 미리 가지고 있다가, DB로 요청을 보내야 하는 상황이 발생한다면 기존에 가지고 있는 Connection을 이용해 쿼리를 요청한다.\n\n요청을 모두 수행하면 요청에 사용된 Connection을 다시 Pool에 **반환**을 한다. \n\n결국, Connection을 생성하고 삭제하는 과정이 모두 생략되기 때문에 더 빠른 속도로 요청을 처리할 수 있게 된다.\n\n## 종류\n\n이 DBCP를 구현한 제품으로는 [HikariCP](https://github.com/brettwooldridge/HikariCP), [Apache Commons DBCP](https://commons.apache.org/proper/commons-dbcp/), [c3p0](https://github.com/swaldman/c3p0) 등이 있다.\n\n## HikariCP\n\nSpring Boot 2.0부터 내장되어 사용되는 DBCP 이다.\n\n오픈소스로서, 타 제품에 비해 성능이 매우매우 뛰어나다.\n\n실제로 README를 읽어보면 타 제품에 비해 성능이 너무 뛰어나다고 엄청나게 자랑한다.\n\n아래 사진은 HikariCP 에서 자체적으로 진행한 벤치마크 결과이다. \n\n![자체 벤치마크 결과](result_of_benchmark.png)\n\n> One *Connection Cycle*은 한 쌍의 `DataSource.getConnection()`, `Connection.close()`<br>\n> One *Statement Cycle*은 한 쌍의 `Connection.prepareStatement()`, `Statement.execute()`, `Statement.close()` 이다.\n\n## 중요한 설정 포인트\n\n이 유용한 DBCP를 정말 유용하게 사용하려면, DB와 서버에서 각각 DB Connection 관련 설정을 잘 알아야 한다.\n\n> DB는 MySQL, 서버는 Spring, DBCP는 hikariCP를 기준으로 설명한다.\n\n### 데이터베이스 서버 설정 (MySQL 기준)\n\n- `max_connections`\n  - DB 서버가 클라이언트와 맺을 수 있는 최대 Connection 수이다.\n  - 컴퓨팅 자원을 적절히 사용하면서 동시에 가장 높은 처리량만큼을 설정하는 것이 중요하다.\n\n- `wait_timeout`\n  - 생성된 Connection이 아무 처리도 하지 않을 때, 새로운 요청이 오기까지 얼마만큼의 시간을 기다릴 지 설정한다.\n    만약 `wait_timeout` 시간이 지나게 될 경우, Connection은 Close 된다.\n  - 클라이언트에서 문제가 생겨 Connection을 정상적으로 종료하지 못하는 상황(비정상적 Connection 종료, Connection 반환 X, 네트워크 단절)에, 생성된 Connection을 알아서 종료해주기 위한 적절한 시간을 결정하는 것이 중요하다.\n  - `wait_timeout`으로 인해 Connection이 종료되기 전에 새로운 요청이 들어올 경우, 0초부터 다시 시간을 측정한다.\n\n### DBCP 설정 (HikariCP 기준)\n\n- `minimumIdle`\n  - Pool에서 유지하는 최소한의 Idle Connection의 수이다.\n  - 만약 Idle 상태의 Connection 수가 `mimimumIdle` 값보다 작고, 전체 Connection 수가 `maximumPoolSize`보다 작은 상황이라면, 신속하게 새로운 Connection을 생성하고 Pool에 추가한다.\n  - Default는 `maximumPoolSize`와 동일한 값이다. 값을 동일하게 설정해야 요청이 들어올 때 새로운 Connection을 만들지 않고 DBCP를 사용하는 장점을 누릴 수 있기 때문이다.   \n\n- `maximumPoolSize`\n  - Pool이 가질 수 있는 최대 Connection의 수이다.\n  - Idle 상태와 Active 상태의 Connection을 모두 포함한다.\n\n- `maxLifetime`\n  - Pool에서 Connection의 최대 수명 시간이다.\n  - Active인 상태는 절대 종료되지 않으며 Connection이 Pool에 반환된 이후의 시간을 토대로 종료한다.<br>\n    이 특징 떄문에, Active 상태의 Connection이 Pool에 모종의 이유로 Pool에 반환되지 않은 시간이 DB 서버의 `wait_timeout`보다 길어진 이후에 DB로 요청을 보내게 되면, DB는 해당 Connection을 이미 Close 했기 떄문에, 해당 과정에서 예외가 발생할 수 있다. 이는 Connection Leak의 문제가 될 수 있다. \n  - 풀에서 갑작스레 대량 소멸을 방지하기 위해 Connection 별로 일종의 조치를 취해놓았다.\n  - HikariCP 가 권장하길, DB의 `wait_timeout`보다 몇 초 더 짧게 설정하는 것이 좋다고 한다.<br>\n    이유로는, 만약 `wait_timeout`과 `maxLifetime` 값을 동일하게 설정했다고 가정했을 때, `maxLifetime`에 얼마 남지 않은 시점에 요청을 처리해야 한다면, 해당 Connection이 DB 서버로 요청을 보내는 시간이 포함되는데, 요청이 DB 서버에 도달하기 전에 `wait_timeout` 시간이 지나게 되어 DB 서버 쪽에서 Connection을 끊게 된다면 예외가 발생할 수 있기 때문이다.\n\n- `connectionTimeout`\n  - 서버 사용자가 Pool에서 Connection을 획득하기까지 얼마만큼의 시간을 기다릴 것인지 최대 시간을 정하는 설정이다.\n  - 설정 시간만큼 Connection을 Pool에서 획득하지 못하면 `SQLException`이 발생한다.\n  - 위 설정도 마찬가지로 `wait_timeout` 보다 더 짧은 시간으로 설정해야 한다.<br>\n    만약 `connectionTimeout`과 `wait_timeout` 시간이 같다면, 사용자가 Pool에서 `connectionTimeout` 직전에 Connection을 획득했다 하더라도, 실제 DB 서버에 도달하기까지 추가적인 시간이 반드시 존재하고, 만약 도달한 시점에 이미 `wait_timeout` 시간을 넘은 상태라면 예외를 발생하기 때문이다.\n\n## 적절한 파라미터 값 설정하는 방법\n\n우선 서버 애플리케이션을 모니터링을 하며 리소스 사용률, 서버 스레드 수, DBCP 정보들을 확인할 수 있어야 한다.\n\n그리고 [nGrinder](https://naver.github.io/ngrinder/)와 같은 부하 테스트 툴을 사용하여 실제로 서버에 부하를 줌으로써 병목 지점을 확인한다.\n\n만약 병목 지점이 생긴다면, 해당 시점 이후의 지표들을 토대로 병목 지점을 유추한다.\n\n유추되는 지점이 존재한다면 해당 값을 적절히 조절해가며 적절한 설정 값을 찾는 과정을 거친다.\n\n> ### Reference\n> - https://www.youtube.com/watch?v=zowzVqx3MQ4"},{"excerpt":"Java 17 우아한테크코스에서 진행한 미션들의 Java 버전은 11이었습니다. 모든 팀원들에게 익숙한 버전은 11 버전임은 부정할 수 없는 사실이지만, 그럼에도 17 버전을 선택한 이유는 다음과 같습니다. 생산성 17 버전에 포함된 Record 타입, String 블럭 사용, Stream.toList()사용 으로 생산성 향상을 기대했기 때문입니다. 우테…","fields":{"slug":"/tech-stacks/"},"frontmatter":{"date":"July 07, 2023","title":"셀럽잇의 기술 스택 및 선정 이유","tags":["celuveat"]},"rawMarkdownBody":"\n![프로젝트에서 선택한 기술 스택 아이콘](tech_stack_icons.png)\n\n## Java 17\n\n우아한테크코스에서 진행한 미션들의 Java 버전은 11이었습니다.\n\n모든 팀원들에게 익숙한 버전은 11 버전임은 부정할 수 없는 사실이지만, 그럼에도 17 버전을 선택한 이유는 다음과 같습니다.\n\n### 생산성\n\n17 버전에 포함된 **Record 타입, String 블럭 사용, Stream.toList()**사용 으로 생산성 향상을 기대했기 때문입니다.\n\n우테코에서 진행하는 프로젝트 특성상 2주 단위로 기능을 빠르게 추가해야 하는 상황이었습니다.\n\n따라서 팀에게 있어 생산성도 중요한 가치라고 판단했습니다.\n\n> Record 타입은 JDK 14에 추가됐습니다. [관련 글](https://www.baeldung.com/java-record-keyword)<br>\n> String 블럭은 JDK 15에 추가됐습니다. [관련 글](https://www.baeldung.com/java-text-blocks)\n> Streams.toList()는 JDK 17에 추가됐습니다. [관련 글](https://www.baeldung.com/java-stream-to-list-collecting)\n\n### JDK 8, 11에 이은 LTS 버전\n\nJDK 11은 26년 9월, JDK 17은 31년 9월까지 지원하는 LTS 버전입니다.\n\n셀럽잇 프로젝트를 앞으로 몇 년이고 지속할 수 있는 가능성이 존재했습니다.\n\n또한, 신규 프로젝트를 진행하는 상황에 있어 레거시를 고려할 필요는 없을 뿐더러 앞으로 있을 미래를 대비하는 것이 현명하다고 판단했습니다.\n\n### 더 나은 GC 성능\n\n이는 추가적인 이유를 찾아보다가 발견한 이유입니다.\n\n바로, JDK 11보다 더 나은 GC 성능을 가진다는 것인데요.\n\nG1 GC의 경우 JDK 11에 비해, 8.66% 더 빠르다는 벤치마킹 결과가 존재하는 것을 확인할 수 있었습니다.\n\n> [참고 문서](https://www.optaplanner.org/blog/2021/09/15/HowMuchFasterIsJava17.html)\n\nGC 개선, JIT 컴파일러 개선, 클래스 데이터 공유로 인한 개선으로 인한 것이라고 합니다.\n\n## Spring Boot 3\n\nJava 17은 Spring Boot 3 부터 지원을 강제하는 이유에서 선택했습니다.\n\n## Nginx\n\n초기 개발 단계에서 React와 Spring이 한 대의 EC2 인스턴스 내에 존재했습니다.\n\n따라서 접속 URL에 따라 포트 포워딩을 할 필요가 있었습니다.\n\n추가로, Nginx와 연동 가능하며 HTTPS 적용에 필요한 SSL 인증서를 발급해주는 무료 오픈소스인 [Let's Encrypt](https://letsencrypt.org/)를 사용하여 간편하게 HTTPS 적용을 하기 위해 사용했습니다.\n\n> [[10분 테코톡] 🤫 피케이의 Nginx](https://youtu.be/6FAwAXXj5N0?feature=shared)\n\n## JPA & Spring Data JPA\n\n사실 처음에는, JPA를 사용해본 적이 없는 팀원이 저를 포함해 2명이 있었습니다.\n\n따라서 처음엔 발생할 수 있는 문제에 모든 팀원이 대응할 수 있기 위해 JDBC를 사용했는데요.\n\n개발을 본격적으로 시작하기까지는 조금의 시간이 있었습니다.\n\n그 시간동안 JPA를 학습할 수 있었고, JPA를 통해 개발 초기에 빠르게 개발할 수 있다는 점에서 선택을 변경했습니다.\n\n또한, JPA는 객체와 RDBMS의 패러다임 불일치를 해결해준다는 점에서 큰 메리트를 느꼈습니다.\n\n## QueryDsl\n\n셀럽잇이 제공하는 기능 중, 음식점을 다양한 조건으로 필터링하여 조회하는 기능이 있었습니다.\n\n해당 기능을 구현하기 위해서는 동적 쿼리를 만들어야 했는데요.\n\nQueryDsl을 선택하기 전의 동적 쿼리는 유지보수가 매우 힘들었습니다.\n\n따라서 유지보수를 위해 도입했습니다.\n\n## Docker\n\n초기 개발 단계에서 운영 단계를 준비하는 과정에서 동일한 환경을 쉽게 세팅하기 위해 사용했습니다.\n\n## nGrinder\n\n부하 테스트 툴로써 다른 대안이었던 JMeter에 비해 더 편리한 사용성과 편리한 UI/UX, 그리고 무엇보다 한국어를 지원한다는 점에서 선택했습니다.\n\n## Grafana, Prometheus, Loki, Promtail\n\n다른 대안이었던 AWS CloudWatch는 새로 학습해야 하는 학습 비용이 존재했습니다. 동시에 금전적인 비용이 들어갑니다.\n\n사실 _Grafana, Prometheus, Loki, Promtail_도 팀원 전체가 학습을 해야하는 건 마찬가지였지만, 인프런에 김영한 님의 관련 강의가 존재하였고 이를 통해 쉽게 기술을 익혀 사용할 수 있을 것으로 판단했습니다.\n\n동시에 모두 무료 오픈소스인 점에서 선택했습니다.\n\n## S3\n\n음식점에 대한 정보 중, 음식점 사진이 존재했습니다.\n\n초기에는 사진을 모두 EC2 인스턴스 내에 저장하여, 정적으로 Serving 했습니다.\n\n하지만 음식점의 수가 증가함에 따라 사진 파일의 수도 증가하고, 그에 따라 서버의 용량을 걱정하지 않을 수 없었습니다.\n\n동시에, React로 개발한 결과물을 빌드한 것은 모두 정적인 자원이며, EC2 인스턴스 내에서 빌드하는 데에 많은 시간이 걸렸습니다.\n\n따라서 정적 자원들은 스토리지에서 제공하기 위해 사용했습니다.\n\n## CloudFront\n\nS3를 그냥 사용하면 보안과 관련된 문제가 발생할 수 있습니다.\n\n또, S3에 있는 자원에 접근하려면 매우 길고 이상한 URL로 접근을 해야 했습니다.\n\n이를 해결하기 위해 CDN 역할의 AWS CloudFront를 도입했습니다.\n\n## Github Actions\n\nCI/CD 툴로 사용했습니다.\n\n다른 대안이었던 Jenkins는 팀원 전체가 학습할 시간이 필요했습니다.\n\n따라서 바로 적용할 수 있는 CI/CD 툴을 적용했습니다.\n\n## OAuth 2.0\n\nOAuth 2.0을 적용하면 사용자의 개인 정보를 저장하지 않아도 되는 장점이 있습니다.\n\n또한, 사용자 퍼널 개선을 위한 목적으로 선택했습니다."}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}