{"componentChunkName":"component---src-pages-series-jsx","path":"/series/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"allMarkdownRemark":{"group":[{"fieldValue":"Acceptance Test","totalCount":1},{"fieldValue":"AssertJ","totalCount":1},{"fieldValue":"CPU Architecture","totalCount":1},{"fieldValue":"DATETIME","totalCount":1},{"fieldValue":"DBCP","totalCount":1},{"fieldValue":"Deploy","totalCount":1},{"fieldValue":"EC2","totalCount":1},{"fieldValue":"Infra","totalCount":1},{"fieldValue":"IoC/DI","totalCount":1},{"fieldValue":"Issue Template","totalCount":1},{"fieldValue":"JUnit","totalCount":1},{"fieldValue":"ListyWave","totalCount":3},{"fieldValue":"MySQL","totalCount":4},{"fieldValue":"Network","totalCount":10},{"fieldValue":"Nginx","totalCount":1},{"fieldValue":"OAuth","totalCount":1},{"fieldValue":"OAuth-2.0","totalCount":1},{"fieldValue":"PECS","totalCount":1},{"fieldValue":"PR Template","totalCount":1},{"fieldValue":"Rest Assured","totalCount":1},{"fieldValue":"Spring","totalCount":2},{"fieldValue":"Spring Boot","totalCount":1},{"fieldValue":"Spring Container","totalCount":1},{"fieldValue":"Spring MVC","totalCount":1},{"fieldValue":"TIMESTAMP","totalCount":1},{"fieldValue":"celuveat","totalCount":1},{"fieldValue":"ci workflow","totalCount":1},{"fieldValue":"clean-code","totalCount":4},{"fieldValue":"database","totalCount":13},{"fieldValue":"design-pattern","totalCount":1},{"fieldValue":"docker","totalCount":1},{"fieldValue":"garbage-collection","totalCount":2},{"fieldValue":"garbageccollection","totalCount":1},{"fieldValue":"generic","totalCount":1},{"fieldValue":"git","totalCount":2},{"fieldValue":"github","totalCount":2},{"fieldValue":"github actions","totalCount":1},{"fieldValue":"hikariCP","totalCount":1},{"fieldValue":"https","totalCount":1},{"fieldValue":"infra","totalCount":3},{"fieldValue":"interview","totalCount":7},{"fieldValue":"isolation-level","totalCount":1},{"fieldValue":"java","totalCount":12},{"fieldValue":"jdbc","totalCount":1},{"fieldValue":"kissoft","totalCount":1},{"fieldValue":"mvc-pattern","totalCount":1},{"fieldValue":"mysql","totalCount":1},{"fieldValue":"oop","totalCount":1},{"fieldValue":"operating-system","totalCount":6},{"fieldValue":"operation-system","totalCount":1},{"fieldValue":"retrospection","totalCount":3},{"fieldValue":"retrospective","totalCount":2},{"fieldValue":"tdd","totalCount":1},{"fieldValue":"test","totalCount":3},{"fieldValue":"tomcat","totalCount":1},{"fieldValue":"transaction","totalCount":1},{"fieldValue":"unit-test","totalCount":2},{"fieldValue":"varargs","totalCount":1},{"fieldValue":"zero-downtime-deployment","totalCount":2},{"fieldValue":"공변, 불공변","totalCount":1},{"fieldValue":"바이너리 로그","totalCount":1},{"fieldValue":"복구","totalCount":1},{"fieldValue":"셀럽잇","totalCount":4}],"nodes":[{"excerpt":"들어가며 현재 ListyWave 프로젝트에서 백엔드는 CI를 위해 Github Actions를 이용 중이다. 수행하는 작업을 의미하는 Workflow는 크게 아래와 같이 나눌 수 있다. 코드 체크아웃 JDK 준비 Gradle 준비 빌드 하지만 Gradle을 준비하고 빌드하는 Build with Gradle 과정에서 최소 1m이 걸리고 있었다.\n(지금 보니…","fields":{"slug":"/enhance-speed-ci-workflow/"},"frontmatter":{"date":"May 23, 2024","update":null,"title":"[Infra] Github Actions를 이용한 CI 작업 속도를 캐싱으로 개선하기","tags":["infra","github actions","ci workflow"],"series":null}},{"excerpt":"이번 장에서는 웹 애플리케이션을 공격하는 기술들에 대해 알아본다. 1. 공격 패턴의 종류 공격의 종류는 크게 두 가지로 나눌 수 있다. 1-1. 능동적 공격 능동적 공격은 공격자가 직접 웹 애플리케이션에 공격을 시도하여 서버의 리소스를 탈취하려는 방식이다. 대표적인 예로 SQL 인젝션, OS 커맨드 인젝션, 디도스 등이 있다. 1-2. 수동적 공격 수동적…","fields":{"slug":"/10-web-attacks/"},"frontmatter":{"date":"May 12, 2024","update":null,"title":"11장. 웹 공격 기술","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"웬만하면 처럼, 를 통해 바로 파악하거나 공식 문서를 통해 자세히 이해할 수 있다. 그래도 도커를 공부하면서 유용한 명령어들을 정리할 겸 작성한다. 치트 시트 mysql 띄우기 버전 관련 : 도커의 버전을 확인한다. : 도커 버전을 간략하게 확인한다. 이미지 관련 : 도커 허브에서 이미지를 받는다. : 도커 엔진에 존재하는 이미지 목록을 출력한다. 컨테이…","fields":{"slug":"/commands-of-docker/"},"frontmatter":{"date":"May 01, 2024","update":null,"title":"[Docker] 도커의 기본적인 명령어들","tags":["docker"],"series":null}},{"excerpt":"들어가며 제네릭을 공부하다보면 배열과 잘 어울리기 어렵다는 내용과 함께 자주 등장하는 용어인, 공변과 불공변, 그리고 실체화가 있다. 잘 사용하지 않는 단어인, 공변과 불공변, 그리고 실체화가 각각 어떤 의미를 가지는지 알아보고\n왜 제네릭과 배열은 잘 어울리지 못하는지에 대해 알아보자. 또한, 제네릭을 이용해 범용성 있는 API(public 메서드)를 작…","fields":{"slug":"/covariant-invariant-and-pecs/"},"frontmatter":{"date":"April 23, 2024","update":null,"title":"[Java] 배열의 공변, 제네릭의 불공변. 그리고 PECS","tags":["java","공변, 불공변","PECS"],"series":null}},{"excerpt":"제네릭 제네릭은 다양한 타입을 다룰 수 있는 클래스나 메서드를 사용할 때,\n런타임이 아닌 컴파일 단계에서 타입 체크를 강제하고 자동으로 형변환을 해주는 자바의 기능이다. 제네릭을 사용하지 않았을 때 제네릭이 없었을 시절, 는 아래와 같은 코드였을 것이다. 저장할 값이 어떤 타입이든 상관없이 모두 담기 위해  을 필드로 가졌을 것이다. 해당 클래스를 사용하…","fields":{"slug":"/understanding-generic/"},"frontmatter":{"date":"April 18, 2024","update":null,"title":"[Java] 제네릭 이해하기","tags":["java","generic"],"series":null}},{"excerpt":"들어가며 이번엔 HTTP 표준이 설명하는 여러 가지 인증 방식에 대해 알아보겠다. Basic 인증 이름 그대로 가장 기본적인 인증 방식이다. 클라이언트가 Http Request를 보낼 때  헤더에 ID와 패스워드를 Base64 형식으로 인코딩 한 값을 담아 보내는 방식이다.\n이때 값 앞에 을 Prefix로 담아 함께 보내어 Basic 인증임을 나타낸다. …","fields":{"slug":"/08-authentication-of-http/"},"frontmatter":{"date":"April 10, 2024","update":null,"title":"8장. 누가 액세스하고 있는지를 확인하는 인증","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 인터넷이 보급되고 웹 시장이 커져감에 따라 HTTP 프로토콜이 정말 많이 사용되고 있다.\n하지만 본래 HTML 문서를 전송하기 위해 탄생한 HTTP는 발전해가는 웹 시장에 비하면 부족한 기능들이 다수 존재했다.\n그래서 HTTP를 기반으로 하여 새로이 추가하는 형태로 새로운 프로토콜이 몇 가지 구현되었다.\n이 프로토콜에 대해 알아보자. HTTP의 …","fields":{"slug":"/09-advanced-http-protocol/"},"frontmatter":{"date":"April 10, 2024","update":null,"title":"9장. HTTP에 기능을 추가한 프로토콜","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 며칠 전, 리스티웨이브 프로젝트를 진행하며 특정 조건의 데이터를 모두 삭제 할 일이 있었습니다.\n하지만 실수로 해당 테이블의 데이터가 모두 삭제되는 일이 있었는데요..!\n이를 복원하기 위해 MySQL이 지원하는 바이너리 로그를 이용해봤습니다. 이번 글에서는 위 과정을 정리하고 바이너리 로그를 통해 복원하는 방법에 대해 정리해보겠습니다. MySQL…","fields":{"slug":"/restore-using-binarylog/"},"frontmatter":{"date":"April 05, 2024","update":null,"title":"[MySQL] 바이너리 로그로 데이터 복구하기","tags":["MySQL","바이너리 로그","복구"],"series":null}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 장에서는 HTTPS에 대해 알아보겠습니다. HTTPS 등장 배경 지금까지 살펴본 HTTP 프로토콜은 클라이언트 혹은 서버가 단순히 문자열 데이터를 통해 요청하고 응답하는 구조였습니다. 하지만 클라이언트와 서버가 통신을 할 때 중간에 많은 호…","fields":{"slug":"/07-https/"},"frontmatter":{"date":"March 28, 2024","update":null,"title":"7장. 웹을 안전하게 지켜주는 HTTPS","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 이번 글에서는 DB 레벨에서 발생하는 동시성 문제를 이해하기 위해 먼저 트랜잭션과 트랜잭션 격리수준에 대해서 복습 겸 코드로 실습하는 시간을 가져보겠습니다. DBMS는 MySQL 8.0이며 InnoDB 스토리지 엔진을 기준으로 설명하겠습니다. 1. 동시성 문제? 2개 이상의 작업이 공유 자원에 접근해 값을 변경할 때 생길 수 있는 문제입니다. 아…","fields":{"slug":"/understanding-transaction-and-concurrency-problem/"},"frontmatter":{"date":"March 13, 2024","update":null,"title":"[MySQL] 트랜잭션과 트랜잭션 격리 수준","tags":["mysql","transaction","isolation-level"],"series":null}},{"excerpt":"들어가며 이번에는 JDBC에 대해 학습한 내용을 정리해보겠습니다. 1. JDBC란? Java DataBase Connectivity, JDBC는 Java 애플리케이션과 DB를 연결하고 통신할 수 있도록 제공하는 API 입니다.\nJDBC 덕분에 우리는 어떤 DB 제품을 사용하더라도 JDBC에만 의존하여 애플리케이션을 개발할 수 있게 되었습니다.\n일종의 Ap…","fields":{"slug":"/what-is-jdbc/"},"frontmatter":{"date":"March 12, 2024","update":null,"title":"[Java] JDBC 마스터하기","tags":["java","jdbc"],"series":null}},{"excerpt":"들어가며 이번에는 스프링 애플리케이션의 핵심인 스프링 컨테이너와 스프링의 핵심 프로그래밍 모델 중 하나인 IoC/DI에 대해 학습한 내용을 정리해보겠습니다. 참고로 토비의 스프링 3.1을 통해 학습을 진행했습니다. 1. IoC 컨테이너: Bean Factory와 Application Context 스프링 애플리케이션에는 스프링 컨테이너가 존재합니다.\n스프…","fields":{"slug":"/ioc-container-and-di/"},"frontmatter":{"date":"March 07, 2024","update":null,"title":"[Spring] 스프링 컨테이너, 그리고 IoC/DI","tags":["Spring","Spring Container","IoC/DI"],"series":null}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 장에서는 HTTP 헤더에 대해 학습한 내용을 정리해보겠습니다. 추가로 HTTP Entity에 대해서도 학습한 내용을 정리해보겠습니다. HTTP 헤더란 HTTP 헤더는 HTTP 요청과 응답에 모두 포함되는 개념입니다.   위 사진에서 보시다싶…","fields":{"slug":"/06-http-header/"},"frontmatter":{"date":"March 06, 2024","update":null,"title":"6장. HTTP 헤더","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"이번 글에서는 Spring Boot에서 Rest Assured를 이용해 인수 테스트를 하는 과정에서 OAuth를 처리하는 방법을 고민한 흔적과 해결 방법을 기록하려고 합니다. 비단 OAuth 뿐만 아니라 다른 외부 REST API를 호출하는 부분을 해결하는 데에도 도움이 될 것으로 기대합니다. 개발 환경은 Spring Boot 3.2.2, Rest Ass…","fields":{"slug":"/oauth-test/"},"frontmatter":{"date":"March 05, 2024","update":null,"title":"Spring Boot에서 Rest Assured로 인수 테스트할 때 OAuth 로그인 처리하기","tags":["Spring Boot","Acceptance Test","Rest Assured","OAuth"],"series":null}},{"excerpt":"들어가며 MySQL에서 쿼리가 실행되는 과정 중에, 주어진 쿼리를 효율적으로 실행하기 위해 어떻게 실행할 지 계획을 짜는 과정이 포함된다.\n이 과정을 옵티마이저가 수행한다. 하지만 옵티마이저는 만능이 아니다. 개발자가 의도하는 대로 옵티마이저가 계획을 잘 수립했는지 확인하기 위해서는  명령어를 통해 현재의 실행 계획을 확인할 수 있어야 한다.\n또한 옵티마…","fields":{"slug":"/10-execute-plain/"},"frontmatter":{"date":"March 05, 2024","update":null,"title":"MySQL의 실행 계획에 대해 알아보자","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"들어가며 ListyWave 프로젝트의 공식 일정이 모두 끝이 났다.\n최종 발표는 매우 뜨거운 반응을 낳으며 성황리에 끝이 났다. 그간 최종 일자에 쫓겨 개발 일정을 진행하다보니 회고 쓸 여유도 없었다.\n나흘을 푹 쉬고 내일부터 다시 Next Step을 위해 움직이기 전에 잊기 전 회고를 작성하려고 한다. 이번 프로젝트에서 배운 것 1. 테스트 코드의 중요…","fields":{"slug":"/3-6-weeks/"},"frontmatter":{"date":"March 04, 2024","update":null,"title":"[ListyWave] 3~6주차 회고","tags":["ListyWave","retrospective"],"series":"ListyWave Project 회고"}},{"excerpt":"들어가며 이번 글에서는 ListyWave를 개발하며 'SNS 도메인에서 카테고리를 누가? 그리고 어떻게 관리할 것인지'에 대해 정말 많이 했던 고민과 최종 결정을 기록하고자 합니다. ListyWave는 \"내가 가장 좋아하는 축구선수 TOP 5\" 처럼 자신의 취향이 담긴 리스트를 만들고 공유하는 SNS 서비스입니다. 기능 요구사항과 고민의 시작 ListyW…","fields":{"slug":"/who-and-how-manage-category/"},"frontmatter":{"date":"February 21, 2024","update":null,"title":"[ListyWave] SNS 서비스에서 카테고리를 관리하는 방법","tags":["ListyWave"],"series":"ListyWave"}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 장은 WAS 대신 다양한 기능을 대신 수행해주는 웹 서버와 캐싱에 대해 알아보겠습니다. 1. 멀티 도메인을 가능하게 하는 가상 호스트 우선 멀티 도메인이란, WAS는 1대이지만 이를 가리키는 호스트(도메인)는 2개 이상인 상태를 의미한다.\n…","fields":{"slug":"/05-web-server/"},"frontmatter":{"date":"February 14, 2024","update":null,"title":"5장. HTTP와 연계하는 웹서버","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 이 글은 ListyWave 프로젝트를 진행하며 한 주를 되돌아보는 회고록입니다. 프로젝트를 하게 된 계기는요 우테코가 끝나고 개인 공부를 쭈욱 해오면서 개인 사이드 프로젝트를 진행하고 싶다는 생각이 들었습니다.\n그래서 혼자 만들고 싶은 서비스를 기획하고 설계하고 개발 초기 진행 단계까지 진행했는데요. 가장 처음 기능인 소셜 로그인 기능을 구현할 …","fields":{"slug":"/1-2-weeks/"},"frontmatter":{"date":"February 04, 2024","update":null,"title":"[ListyWave] 1, 2주차 회고","tags":["ListyWave","retrospective"],"series":"ListyWave Project 회고"}},{"excerpt":"B-Tree 인덱스 B-Tree 인덱스는 데이터베이스의 인덱싱 알고리즘에서 가장 일반적으로 사용되는 알고리즘이다. 가장 큰 특징은 칼럼의 원래 값을 변형하지 않고 인덱스 자료구조 내에서는 항상 정렬된 상태로 값들을 저장한다. 흔히 B-Tree를 Binary-Tree (이진 트리)로 생각한다. 하지만 Balanced-Tree의 약자로, Binary-Tree…","fields":{"slug":"/08-03-b-tree-index/"},"frontmatter":{"date":"February 01, 2024","update":null,"title":"B-Tree 인덱스에 대해 알아보자","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 장에서는 HTTP Status Code에 대해 알아보겠습니다. HTTP Status Code란? 클라이언트의 요청을 처리한 서버가 응답을 내려줄 때, 제대로 처리 됐는지? 혹은 처리하는 과정에서 이상이 없는지와 같은 정보를 함께 응답합니다.…","fields":{"slug":"/04-http-status-code/"},"frontmatter":{"date":"January 31, 2024","update":null,"title":"4장. 결과를 전달하는 HTTP 상태 코드","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 Github Repository에 Issue Template과 PR Template을 적용하는 방법에 대해 작성한 글입니다. Issue Template Issue Template의 경우 Github Repository에 있는 Settings를 통해 쉽게 생성할 수 있습니다.  위 버튼을 누르면 아래와 같은 페이지가 뜹니다.  가운데 버튼을 눌러 …","fields":{"slug":"/apply-issue-and-pr-template/"},"frontmatter":{"date":"January 23, 2024","update":null,"title":"[github] Github Repository에 Issue, PR Template 적용하기","tags":["git","github","Issue Template","PR Template"],"series":null}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 글에서는 Http Request와 Http Response가 어떻게 동작하는지에 대해 작성하겠습니다. HTTP 메시지 HTTP 프로토콜은 여러 개의 행으로 이루어진 문자열입니다. 이를 HTTP 메시지 라고 합니다. HTTP 메시지는 정해진 …","fields":{"slug":"/03-http-detail/"},"frontmatter":{"date":"January 23, 2024","update":null,"title":"3장. HTTP 정보는 HTTP 메시지에 있다","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic을 읽고 학습한 내용을 정리한 글입니다. 이번 글에서는 HTTP 프로토콜에 대해 작성하겠습니다. HTTP 프로토콜 HyperText Transfer Protocol, HTTP 프로토콜은 HTML 문서와 같은 리소스를 가져올 수 있도록 하는 프로토콜입니다. 기본적으로 리소스를 요청하는 클…","fields":{"slug":"/02-http-protocol/"},"frontmatter":{"date":"January 17, 2024","update":null,"title":"2장. 간단한 프로토콜 HTTP","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"들어가며 이번 글은 AWS EC2 인스턴스를 생성하고 수작업으로 Spring Boot를 실행시키는 방법을 정리한 글입니다. 개발 환경은 ,  입니다. 따라서 윈도우의 경우 인스턴스에 접속하는 방법이 약간 다릅니다.\n윈도우에서 접속하는 방법은 해당 글을 참고해주세요. AWS 계정 생성 우선 가장 먼저 AWS 계정을 생성해줍니다. 기존에 있다면 그대로 사용해…","fields":{"slug":"/deploy-spring-boot-in-aws-ec2-manually/"},"frontmatter":{"date":"January 16, 2024","update":null,"title":"[Infra] AWS EC2에 Spring Boot 수작업으로 배포하기","tags":["Infra","EC2","Deploy"],"series":null}},{"excerpt":"들어가며 EC2에 스프링 배포하기 글을 작성하다가 EC2 인스턴스를 생성할 때 AMI를 설정하게\n됩니다. 이때 선택할 수 있는 아키텍처는 아래와 같이 과  두 가지로 나뉩니다.  문득, 이 둘의 차이에 대해 궁금해져 학습하고 정리해봤습니다. Amazon Machine Image? 우선 Amazon Machine Image에 대해 알아보겠습니다. 공식 문서…","fields":{"slug":"/what-is-ami-architecture-of-ec2/"},"frontmatter":{"date":"January 16, 2024","update":null,"title":"CPU 아키텍처란?","tags":["operation-system","CPU Architecture"],"series":null}},{"excerpt":"들어가며 이번 글에서는 브랜치 네이밍을 이용해 자동으로 커밋 타입과 이슈 번호를 추가하는 방법에 작성하겠습니다. 글의 대상은 다음과 같습니다. 브랜치 네이밍 컨벤션과 커밋 메시지 컨벤션을 정하려는 팀 커밋 메시지 컨벤션에 따라 매번 커밋 메시지를 작성하는 게 귀찮거나 자주 까먹는 사람 이 글을 읽고 나면 커밋 메시지를 라고만 했을 경우, 저장된 커밋 메시…","fields":{"slug":"/add-feat-and-issue-number-automatically/"},"frontmatter":{"date":"January 12, 2024","update":null,"title":"[git&github] IntelliJ에서 커밋 메시지 작성 시, 자동으로 커밋 타입과 이슈 번호 추가하기","tags":["git","github"],"series":null}},{"excerpt":"들어가며 이 글은 그림으로 배우는 Http & Network Basic 책을 읽으며 학습한 내용을 정리한 글입니다. 이번 글에서는 웹, HTTP, 그리고 네트워크의 배경과 간단한 배경 지식에 대해 작성하겠습니다. 웹, 그리고 네트워크를 공부해야 하는 이유 책에는 없는 내용이지만 네트워크를 공부해야 하는 이유에 대해 생각해봤다. 웹, 그리고 네트워크는 통신…","fields":{"slug":"/01-comprehension-about-web-and-network-basic/"},"frontmatter":{"date":"January 12, 2024","update":null,"title":"1장. 웹과 네트워크의 기본에 대해 알아보자","tags":["Network"],"series":"그림으로 배우는 Http & Network Basic"}},{"excerpt":"@Controller와 @RestController의 역할과 차이점에 대해 알아보기 전에, 둘의 근본이 되는 Controller의 역할에 대해 이야기하겠습니다. (여기서 Controller는 Spring MVC에서의 Controller를 의미합니다.) Controller의 역할은? 제가 생각하는 Controller의 역할은 다음과 같습니다. 사용자의 요청…","fields":{"slug":"/difference-of-controller-and-restcontroller/"},"frontmatter":{"date":"January 12, 2024","update":null,"title":"[Spring] @Controller와 @RestController 비교하기","tags":["Spring","Spring MVC"],"series":null}},{"excerpt":"들어가며 MySQL에는 4가지의 격리 수준이 존재한다. 격리 수준에 따라 같은 상황, 그리고 같은 쿼리라 하더라도 결과가 매번 달라질 수 있다.\n이로 인해 정합성 문제가 발생할 수 있다. 우리가 실행하는 쿼리문이 적어도 격리 수준에 따라 어떤 결과를 가져올 지 정확하게 예측할 수 있어야 하기에, MySQL의 격리 수준에 대해 이해해보자. 트랜잭션 격리 수…","fields":{"slug":"/05-isolation-level-of-MySQL/"},"frontmatter":{"date":"January 11, 2024","update":null,"title":"MySQL의 격리 수준","tags":["database","MySQL"],"series":"Real MySQL 8.0"}},{"excerpt":"Lock에는 MySQL 엔진이 관리하는 Lock과 InnoDB 스토리지 엔진이 관리하는 락이 있다. 이번에는 InnoDB 스토리지 엔진이 관리하는 Lock에 대해 알아보자. 레코드 락 InnoDB 엔진이 관리하는 락 중에서 핵심이다. 다른 DBMS의 레코드 락과 동일하지만 한 가지 중요한 차이는 레코드 자체가 아니라 인덱스의 레코드를 잠근다는 것이다.\n따…","fields":{"slug":"/05-lock-of-innodb-storage-engine/"},"frontmatter":{"date":"January 11, 2024","update":null,"title":"InnoDB 스토리지 엔진의 락","tags":["database","MySQL"],"series":"Real MySQL 8.0"}},{"excerpt":"들어가며 최근 개인 프로젝트를 시작하면서 ERD 설계를 진행했습니다. 이때, 작성 날짜나 시작 날짜 같은 날짜에 대한 값을 저장할 칼럼이 필요했고 해당 칼럼의 자료형을 결정하는 과정에서 DATETIME과 TIMESTAMP의 차이에 대해 궁금해졌습니다. 따라서 이 둘을 이해해보겠습니다. 기준은 MySQL 8.0 입니다. DATETIME과 TIMESTAMP의…","fields":{"slug":"/compare-of-datetime-and-timestamp/"},"frontmatter":{"date":"January 10, 2024","update":null,"title":"[MySQL] DATETIME vs TIMESTAMP","tags":["database","MySQL","DATETIME","TIMESTAMP"],"series":null}},{"excerpt":"MySQL 로그 파일 MySQL 서버에 문제가 생겼을 때, 로그 파일을 이용하면 문제의 원인을 쉽게 찾고 해결할 수 있다.\n따라서 가급적 아래에 나올 로그 파일들을 통해 문제를 파악하려는 태도를 가지는 것이 중요하다. 로그 파일의 종류는 아래와 같다. 에러 로그 서버가 시작되는 과정과 관련된 정보성 로그 및 에러 메시지 서버가 비정상적으로 종료될 때 기록…","fields":{"slug":"/04-mysql-log/"},"frontmatter":{"date":"January 03, 2024","update":null,"title":"MySQL 로그 파일","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"트랜잭션 트랜잭션은 최소한의 논리적인 작업 단위이다. 하나의 작업 단위에 포함되는 모든 작업들이 100% 성공해야 트랜잭션이 commit 되며, 중간에 작업 하나라도 문제가 생겼을 땐 작업 전체를 무효화한다. (All or Nothing) 이를 통해 데이터의 정합성을 보장한다. ACID 모델 데이터베이스 설계 원칙으로 ACID 모델이 있다.  InnoDB…","fields":{"slug":"/05-transaction-and-lock/"},"frontmatter":{"date":"January 03, 2024","update":null,"title":"MySQL에서의 트랜잭션과 Lock","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"2024년을 시작하는 오늘, 지난 한 해를 되돌아보고 올 한 해를 어떻게 보낼 지 미리 생각해보려고 한다. 우아한테크코스 2월부터 11월까지 진행했던 우아한테크코스가 사실상 2023년에서 가장 핵심이며 유일한 이야깃거리다. 때문에 우테코에서 경험했던 것들에 대해 적어보고자 한다. 지원하기 전 개발을 너무나도 배우고 싶었던 마음이 컸던 시기에, 운 좋게도 …","fields":{"slug":"/2023-retrospection/"},"frontmatter":{"date":"January 01, 2024","update":null,"title":"2023년 회고록","tags":["retrospection"],"series":null}},{"excerpt":"InnoDB 스토리지 엔진 MySQL에서 사용할 수 있는 스토리지 엔진 중 거의 유일하게 레코드 기반 Lock을 지원한다. 덕분에 높은 동시성 처리와 뛰어난 성능을 가진다. 아키텍처 InnoDB의 전반적인 아키텍처는 다음과 같다.  InnoDB의 주요 특징 프라이머리 키에 의한 클러스터링 모든 InnoDB 테이블은 PK에 의해 클러스터링 인덱스가 생성된다…","fields":{"slug":"/04-innodb-engine/"},"frontmatter":{"date":"December 17, 2023","update":null,"title":"InnoDB 엔진 이해하기","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"MySQL 엔진 아키텍처  MySQL 서버는 크게 MySQL 엔진과 스토리지 엔진으로 나뉜다. MySQL 엔진 클라이언트와의 연결, 요청된 쿼리문을 파악하고 분석 및 최적화하는 작업을 수행한다. 그 후, 실제 동작은 스토리지 엔진에 요청한다. 이를 핸들러 요청이라고 하고, 여기에 사용되는 API를 핸들러 API라고 한다. 명령어로 핸들러 API를 확인할 …","fields":{"slug":"/04-mysql-engine-architecture/"},"frontmatter":{"date":"December 14, 2023","update":null,"title":"MySQL 엔진 아키텍처","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"세 줄 요약 코드의 가독성이 좋아진다.  코드를 객체지향으로 짤 수 있다. 따라서 유지보수가 쉽다. 원시값과 문자열을 포장하지 않았을 때 이 코드를 보고 파라미터로 넘어가는 각 값들이 어떤 값들인지 바로 파악할 수 있을까? 적어도 해당 프로젝트에 대한 이해도가 없다면 절대 불가능할 것이다. 물론 아래 코드처럼 각 파라미터를 변수로 할당하고 변수명으로 유추…","fields":{"slug":"/why-wrap-primitive-type-and-string/"},"frontmatter":{"date":"December 13, 2023","update":null,"title":"모든 원시값과 문자열을 포장한다. 왜?","tags":["java","oop","clean-code"],"series":"Why? 시리즈"}},{"excerpt":"문제 상황 인스턴스 필드로 List만을 가지는 일급 컬렉션 객체가 있습니다. 필드에   키워드가 존재하기 떄문에 항상 초기화를 해줘야 합니다. 따라서 객체를 생성하려면 생성자를 List를 항상 주입받아야 합니다. 이때, 문제가 발생합니다.  위 테스트 코드를 보면 MyList 인스턴스를 생성할 때,  라는 List가 생성자 파라미터로 전달됩니다. 그렇게 …","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"date":"December 11, 2023","update":null,"title":"Java에서 컬렉션을 사용할 때 주의할 점","tags":["java"],"series":null}},{"excerpt":"우아한테크코스의 모든 미션에 \"배열 대신 컬렉션을 사용하라\"는 요구 사항이 항상 존재한다. 그 이유를 알아보자. 두 줄 요약 Java가 이미 잘 만들어놓은 JCF가 존재한다. 제네릭을 지원한다. JCF  Java는 다양한 자료구조와 다양한 알고리즘을 지원한다. 예를 들어 동적 배열은 , 연결 리스트는  처럼 말이다. 게다가 각 자료구조에 필요한 동작들, …","fields":{"slug":"/why-use-collection-instead-of-array/"},"frontmatter":{"date":"December 11, 2023","update":null,"title":"배열 대신 컬렉션을 쓴다. 왜?","tags":["java","clean-code"],"series":"Why? 시리즈"}},{"excerpt":"지난 번엔 Garbage Collection과 동작 원리에 대해 알아보았다. 이번에는 어떤 GC 알고리즘이 있고, 각 알고리즘의 특징은 어떤지 알아보자. Serial Collector 단일 쓰레드를 사용하여 모든 GC 작업을 수행하므로 작업 중, 쓰레드 간 통신 오버헤드가 없다. 쓰레드 간 통신은 데이터를 전송하고 조율하는 과정을 의미한다.\n쉽게 말해 쓰…","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"date":"December 10, 2023","update":null,"title":"Garbage Collection 알고리즘","tags":["java","garbage-collection"],"series":null}},{"excerpt":"GC에서 고려할 성능 GC의 주요 측정 기준은 처리량과 지연 시간이다. 처리량은 오랜 시간동안 측정하며, (GC에 소요되지 않는 시간 / 전체 시간) * 100을 의미한다. 지연 시간은 애플리케이션의 응답 속도이다. 즉, GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC 튜닝에서 고려할 포인트가 되는 것이다. GC 튜닝에 대한 내용은 언젠가 알아…","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"date":"December 09, 2023","update":null,"title":"Garbage Collection 튜닝에 대해","tags":["java","garbageccollection"],"series":null}},{"excerpt":"Garbage Collection를 알아야 하는 이유 Garbage Collection(이하 GC)을 공부하다보니, GC를 너무 믿어서는 안되겠다고 생각됐다. 우형에서 발생한 일도 그렇고 토스에서 발생한 일을 보니 모두 애플리케이션의 메모리 관련 치명적 에러는 모두 이 GC와 관련이 있었기 때문이다. 더군다나 네이버 D2 글에서도 GC에 대해 잘 알고 있…","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"date":"December 08, 2023","update":null,"title":"JVM의 Garbage Collection과 동작 원리","tags":["java","garbage-collection"],"series":null}},{"excerpt":"들어가며 5주 간 JSCODE에서 진행한 운영체제 모의면접 스터디를 마치고 회고록을 작성하려고 한다. JSCODE 란? 👈 진행 방법 매 주차별로 질문 리스트가 제공된다. 스터디 참여자들은 질문 리스트에 대한 자기주도 학습을 진행한다. 매주 목요일 20시에 모여 팀별로 모의면접을 진행한다.\n답변자 1명, 질문자 2명, 관찰자 1명으로 역할 나누어 진행한다…","fields":{"slug":"/os-interview-study-retrospection/"},"frontmatter":{"date":"December 08, 2023","update":"Dec 08, 2023","title":"[JSCODE] - OS 면접 스터디 회고록","tags":["retrospection"],"series":"운영체제 면접 스터디"}},{"excerpt":"JVM의 메모리 구조 우선 static에 대해 이해하기 전에 JVM이 실행될 때 메모리에 어떻게 적재되는 지부터 살펴보자.  크게 세 공간으로 나뉜다. Heap 영역 new 키워드를 사용해 동적으로 생성한 객체의 인스턴스가 담기는 공간이다. Garbage Collection에 의해 관리된다. Stack 영역 메서드 콜 스택이나, 지역 변수 혹은 변수 파라…","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"date":"December 06, 2023","update":"Dec 06, 2023","title":"static을 더 잘 사용하기","tags":["java","operating-system"],"series":null}},{"excerpt":"가상 주소와 물리 주소(실주소)에 대해 설명해주세요. 가상 주소를 물리 주소(실주소)로 어떻게 변환할까요? 절대 주소 지정과 상대 주소 지정의 차이점은 뭘까요? 메모리 분할에 대해 설명해주세요. 메모리 배치 기법(메모리 관리 전략)에 대해 설명해주세요. 외부 단편화와 내부 단편화의 차이가 뭔가요? 메모리 배치 기법중 하나인 colaescing(통합)에 대…","fields":{"slug":"/os-interview-study-5week/"},"frontmatter":{"date":"December 06, 2023","update":"Dec 06, 2023","title":"[JSCODE] - OS 면접 스터디 5주차","tags":["operating-system","interview"],"series":"운영체제 면접 스터디"}},{"excerpt":"왜 값의 변경을 막아야 할까?  자동차 경주 피드백 중 하나이다. 왜 이런 피드백이 있는지 알아보자 final 키워드를 붙이면 좋은 점 1. 변경 가능성을 최소화한다. 즉, 코드의 예측이 쉬워진다. 사실 알잘딱깔센으로 객체나 값의 변경은 정말 필요한 곳에서 필요한 만큼 수행해야 한다. 하지만 final 키워드를 붙이지 않으면 분명한 것은 변경 가능성이 존…","fields":{"slug":"/why-use-final/"},"frontmatter":{"date":"December 05, 2023","update":"Dec 05, 2023","title":"final 키워드를 사용해 값의 변경을 막아라. 왜?","tags":["java","clean-code"],"series":"Why? 시리즈"}},{"excerpt":"들어가며 흔히 Domain과 View는 분리해야 한다고 한다. 대표적인 디자인 패턴으로 MVC 패턴이 있다. 같이 작성하면 개발도 빨리 할 수 있고 코드 작성에도 편한데, 왜 분리하라고 할까? 결론 결론부터 말하자면, Domain 객체를 잦은 변경으로부터 보호하기 위해서이다. 왜 Domain을 보호해야 할까? 이를 알아보기 위해서는 우선 Domain이 무…","fields":{"slug":"/why-seperate-domain-and-view/"},"frontmatter":{"date":"December 04, 2023","update":"Dec 04, 2023","title":"Domain과 View를 분리한다. 왜?","tags":["design-pattern","mvc-pattern","clean-code"],"series":"Why? 시리즈"}},{"excerpt":"들어가며 MySQL에서의 계정 식별 방식, 권한, 역할에 대한 기본적인 내용을 알아보자 왜 알아야 할까? 데이터베이스 서버의 보안을 위해 ! 괜히 보안떄문에 퇴근이 늦어지면 안되니까 1. 사용자 식별 방법 사용자 아이디 뿐만 아니라 접속 지점(호스트명이나 도메인 또는 IP주소)도 함께 확인한다.\n예시)   따라서 계정의 HOST와 다른 지점에서 접속하면 …","fields":{"slug":"/03-user-identification/"},"frontmatter":{"date":"December 04, 2023","update":null,"title":"MySQL에서의 사용자 식별에 대해","tags":["database"],"series":"Real MySQL 8.0"}},{"excerpt":"📝 질문 리스트 병행성(동시성)과 병렬성에 대해 설명해주세요. 프로세스 동기화에 대해 설명해 주세요. Critical Section(임계 영역)에 대해 설명해주세요. Race Condition(경쟁 조건)이 무엇인가요? Mutual Exclusion(상호 배제)에 대해 설명해주세요. 뮤텍스(Mutex)에 대해 설명해주세요. 세마포어에 대해 설명해주세요. …","fields":{"slug":"/os-interview-study-4week/"},"frontmatter":{"date":"November 30, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 4주차","tags":["operating-system","interview"],"series":"운영체제 면접 스터디"}},{"excerpt":"TDD란? Test Driven Development. 테스트 주도 개발이다. 보통 '~~ 주도 개발' 이라고 이름이 붙으면, 개발할 때 '~~' 를 1순위로 여기며 개발하는 방법론을 의미한다. 즉, 테스트 주도 개발은 테스트를 1순위로 여기며 개발하는 개발 방법론이다. 개발 방법론! 어떻게 하나? 결론: 테스트 코드 작성 -> 프로덕션 코드 작성 -> …","fields":{"slug":"/about-tdd/"},"frontmatter":{"date":"November 29, 2023","update":null,"title":"TDD 이해하기","tags":["tdd","test"],"series":null}},{"excerpt":"이 글의 목적 JUnit과 AssertJ의 학습 테스트 코드를 통해 단위 테스트를 처음 해보려는 사람에게 어떻게 쓰는지 간단한 가이드 라인 제시 단위 테스트하면서 잘 사용하지 않는 기능에 대해 나만의 치트 시트 역할 전체 코드 자세한 전체 코드는 이 곳에 올려놓았습니다. 위 레포지토리를 로컬에 clone하고 step3 브랜치로 이동하면, 학습 테스트가 존…","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"date":"November 28, 2023","update":null,"title":"JUnit과 AssertJ 활용법","tags":["unit-test","JUnit","AssertJ","test"],"series":null}},{"excerpt":"📝 질문 리스트 SQL에 대해서 설명해주세요. C언어와 같은 프로그래밍 언어와 어떤 차이가 있나요? 개발자가 작성한 SQL이 어떤 과정을 통해 실행 되는지 설명해주세요. DML은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DDL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DCL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. 참조 무결성에 …","fields":{"slug":"/db-interview-study-2week/"},"frontmatter":{"date":"November 28, 2023","update":"Dec 01, 2023","title":"DB 면접 스터디 2주차","tags":["database","interview"],"series":"DB 면접 스터디"}},{"excerpt":"단위 테스트란? 애플리케이션에서 동작하는 기능 또는 메서드를 실행시키는 독립적인 단위의 테스트이다. 이때 기능이라는 말이 포함되어있다. 즉, 단위 테스트라고 해서 무조건 메서드만 테스트하는 건 아니다. 왜 단위 테스트를 하나? 잘 작성한 단위 테스트는 개발자가 작성한 단위(기능 또는 메서드)를 매우 빠르게 검증할 수 있다. 단위 테스트를 하지 않았을 때의…","fields":{"slug":"/unit-test/"},"frontmatter":{"date":"November 27, 2023","update":null,"title":"단위 테스트 이해하기","tags":["unit-test","test"],"series":null}},{"excerpt":"📝 질문 리스트 기아 상태가 무엇인가요? CPU에 의해 처리가 된 준비가 된 프로세스가, 다른 프로세스의 우선 순위에 밀려 오랜 시간 대기하는 상태입니다. 이는, 프로세스 스케줄링에 의해 발생할 수 있습니다. 보통 데드락과 헷갈릴 수 있는데, 데드락은 여러 프로세스가 동시에 자원들을 점유하려는 과정에서 모든 프로세스의 상태가 blocked가 되는 현상입니…","fields":{"slug":"/os-interview-study-3week/"},"frontmatter":{"date":"November 23, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 3주차","tags":["operating-system","interview"],"series":"운영체제 면접 스터디"}},{"excerpt":"📝 질문 리스트 파일 시스템과 데이터베이스의 차이점에 대해서 설명해주세요. 파일 시스템은 물리적 액세스만 관리하고, 데이터베이스는 물리적 액세스와 논리적 액세스 모두 관리합니다. 둘 다 결국엔, 디스크에 물리적으로 저장된다. 특히 파일 시스템의 경우 디스크에 저장된 파일을 직접 다루는 시스템이다. 데이터베이스는 이 디스크에 저장된 파일과, 사용자 사이에서…","fields":{"slug":"/db-interview-study-1week/"},"frontmatter":{"date":"November 21, 2023","update":"Dec 01, 2023","title":"DB 면접 스터디 1주차","tags":["database","interview"],"series":"DB 면접 스터디"}},{"excerpt":"📝 질문 리스트 프로그램에 대해 설명해주세요. 프로그램은 개발자가 프로그래밍 언어로 작성한 명령어들의 집합입니다. 프로그램의 특징으로는 디스크에 실행 파일 형식으로 저장되어 있다가, 사용자가 실행을 하면 운영체제에 의해 해당 파일을 메모리에 적재됩니다. 이를 프로세스라고 합니다. 프로세스에 대해 설명해주세요. 프로그램의 인스턴스입니다. 쉽게 말해, 디스크…","fields":{"slug":"/os-interview-study-2week/"},"frontmatter":{"date":"November 16, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 2주차","tags":["operating-system","interview"],"series":"운영체제 면접 스터디"}},{"excerpt":"📝 질문 리스트 운영체제는 무엇이고 어떤 역할을 수행하는가? 운영체제는 컴퓨팅 시스템을 운영하는 시스템이다. 약간 말장난 같지만, 실제로 운영체제는 사용자와 하드웨어 사이에서 자원을 어떻게 사용할 지를 결정한다. 대표적인 역할로는 프로세스 스케줄링, 프로세스 동기화 방식 등이 있다. 시분할 시스템 하나의 프로세서가 2개 이상의 프로세스의 작업을 처리해야할…","fields":{"slug":"/os-interview-study-1week/"},"frontmatter":{"date":"November 09, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 1주차","tags":["operating-system","interview"],"series":"운영체제 면접 스터디"}},{"excerpt":"이번 글에선 셀럽잇이 왜? 그리고 어떻게? 무중단 배포를 적용했는 지에 대해 작성하고자 합니다. 무중단 배포를 왜 하는가? 서버가 1개인 상황에서 새로 배포를 하게 되면, 배포가 완료되는 시간동안 사용자들은 서비스를 이용하지 못합니다. 배포 시간이 3초만 되어도 사용자는 3초 동안 에러 페이지만 보게 될 것입니다. 아래 사진은 구글이 제공하는 데이터입니다…","fields":{"slug":"/zero-downtime-deployment-of-celuveat/"},"frontmatter":{"date":"October 21, 2023","update":null,"title":"[셀럽잇] 무중단 배포 적용기","tags":["셀럽잇","zero-downtime-deployment"],"series":"셀럽잇 프로젝트"}},{"excerpt":"무중단 배포란? 적용하는 이유는? 한 대의 서버로만 배포하는 모놀리식 구조의 서비스인 경우, 서비스를 새로운 버전으로 업데이트해야 하는 경우가 있습니다. 이때 새롭게 배포하게 되는데, 배포되는 시간동안 서비스는 잠깐 사용할 수 없게 됩니다. 이 시간을 Down Time 이라고 부릅니다. 이 Down Time을 제거하여 사용자에게 불편함을 주지 않기 위해 …","fields":{"slug":"/zero-downtime-deployment/"},"frontmatter":{"date":"October 20, 2023","update":null,"title":"무중단 배포 이해하기","tags":["infra","zero-downtime-deployment"],"series":null}},{"excerpt":"DBCP (DataBase Connection Pool) 탄생 배경 서버 애플리케이션에서 DB 서버로 요청을 보내면 TCP 통신을 한다. TCP 통신은 Connection이 유지되는 상태에서 통신한다. 이 Connection은 생성하고 사용하고 삭제되기까지 꽤 많은 작업이 포함된다. 즉, 통신 비용이 비싸다. 이러한 상황에서 서버는 많은 요청을 처리하는데…","fields":{"slug":"/dbcp/"},"frontmatter":{"date":"October 16, 2023","update":null,"title":"DBCP와 HikariCP 이해하기","tags":["database","DBCP","hikariCP"],"series":null}},{"excerpt":"사용자 유치 전, 서버 성능 개선을 위해 Tomcat 성능 최적화를 진행하려고 합니다. 그 과정에서 설정할 값들인 , , 에 대해 이해하려고 합니다. Max-Threads JVM 기반에서 동작하는 Tomcat은 HTTP 요청을 받으면, 각 요청을 하나의 쓰레드가 처리하도록 동작합니다. 이  설정은 Tomcat에서 최대 몇 개까지의 쓰레드를 동작시킬 것인지…","fields":{"slug":"/tomcat-tuning/"},"frontmatter":{"date":"September 09, 2023","update":null,"title":"[셀럽잇] Tomcat 성능 최적화를 위해 Max-Threads, Max-Connections, Accept-Count 설정하기","tags":["셀럽잇","tomcat"],"series":"셀럽잇 프로젝트"}},{"excerpt":"로그아웃 API 명세 우선 OAuth 관련 기능을 구현하려면 무조건 해당 OAuth 서버의 공식 문서를 통해 API 명세를 확인해야합니다. 구현하고자 하는 OAuth 서버인 카카오의 로그아웃 API 명세는 다음과 같습니다.  인증 방식 선택 인증 방식을 보면 , (이하 어드민 키)로 두 가지가 있습니다. 액세스 토큰 방식은 쉽게 생각해 JWT를 통해 인증…","fields":{"slug":"/oauth-logout-and-withdraw/"},"frontmatter":{"date":"August 14, 2023","update":null,"title":"[셀럽잇] OAuth 2.0 로그아웃 구현","tags":["셀럽잇","OAuth-2.0"],"series":"셀럽잇 프로젝트"}},{"excerpt":"EC2 서버 HTTPS 적용하기 안녕하세요. 셀럽잇 팀의 백엔드 도기입니다. 🐶 저희 팀은 이번 3차 데모데이에 운영 서버에 서비스를 배포했습니다!! 🎉 그 과정에서 Domain Name과 HTTPS를 적용했는데요. 그 과정을 모두 기록하려고 합니다. 그럼 바로 시작하겠습니다. 적용 이유 🧐 도메인과 HTTPS 적용 이유는 다음과 같습니다. 도메인 적용 …","fields":{"slug":"/https/"},"frontmatter":{"date":"August 02, 2023","update":null,"title":"[셀럽잇] HTTPS 적용기","tags":["celuveat","https","infra","Nginx"],"series":null}},{"excerpt":"Java 17 우아한테크코스에서 진행한 미션들의 Java 버전은 11이었습니다. 모든 팀원들에게 익숙한 버전은 11 버전임은 부정할 수 없는 사실이지만, 그럼에도 17 버전을 선택한 이유는 다음과 같습니다. 생산성 17 버전에 포함된 Record 타입, String 블럭 사용, Stream.toList()사용 으로 생산성 향상을 기대했기 때문입니다. 우테…","fields":{"slug":"/tech-stacks/"},"frontmatter":{"date":"July 07, 2023","update":null,"title":"[셀럽잇] 기술 스택 및 선정 이유","tags":["셀럽잇"],"series":"셀럽잇 프로젝트"}},{"excerpt":"Varargs 탄생 배경 JDK 1.4 전까지는 다양한 수의 인자를 가진 메서드를 선언할 수 없었다.\n이를 해결하기 위해 두 가지 방식을 사용했다. 메서드 오버로딩 (하지만 코드의 길이를 무한대로 증가시킨다.) 전달할 값들을 배열로 받기 하지만 두 방법에 한계점들이 존재했고 이 문제를 개선하기 위해 Varargs를 개발했다.\n결국, Varargs는 다양한…","fields":{"slug":"/what-is-varargs/"},"frontmatter":{"date":"April 08, 2023","update":null,"title":"[Java] Varargs는 어떻게 사용하고, 사용했을 때 장점이 무엇일까?","tags":["java","varargs"],"series":null}},{"excerpt":"드디어 2학기 현장실습이 끝이 났다.\n2022년 08월 29일부터 12월 15일까지, 총 75일 간의 내 첫 사회 생활이 끝이 났다. 끝이 난 지 일주일이 지났지만 이제서야 작성하는 이유는, 그동안 SSAFY  면접과 우아한테크코스 프리코스 최종 코딩테스트를 마무리하고 쉬기 바빠 이제서야 작성한다. 😅 약 3-4개월 간의 치열했던 현장 실습을 회고해보자.…","fields":{"slug":"/kissoft-retrospection/"},"frontmatter":{"date":"December 23, 2022","update":null,"title":"키스소프트 현장실습 회고","tags":["retrospection","kissoft"],"series":null}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}