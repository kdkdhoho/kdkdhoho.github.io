{"componentChunkName":"component---src-pages-tags-jsx","path":"/tags/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"allMarkdownRemark":{"group":[{"fieldValue":"AssertJ","totalCount":1},{"fieldValue":"DBCP","totalCount":1},{"fieldValue":"JUnit","totalCount":1},{"fieldValue":"celuveat","totalCount":1},{"fieldValue":"clean-code","totalCount":3},{"fieldValue":"database","totalCount":4},{"fieldValue":"design-pattern","totalCount":1},{"fieldValue":"garbage-collection","totalCount":2},{"fieldValue":"garbageccollection","totalCount":1},{"fieldValue":"hikariCP","totalCount":1},{"fieldValue":"interview","totalCount":7},{"fieldValue":"java","totalCount":7},{"fieldValue":"mvc-pattern","totalCount":1},{"fieldValue":"operating-system","totalCount":6},{"fieldValue":"retrospection","totalCount":1},{"fieldValue":"tdd","totalCount":1},{"fieldValue":"test","totalCount":3},{"fieldValue":"unit-test","totalCount":2}],"nodes":[{"excerpt":"문제 상황 인스턴스 필드로 List만을 가지는 일급 컬렉션 객체가 있습니다. 필드에   키워드가 존재하기 떄문에 항상 초기화를 해줘야 합니다. 따라서 객체를 생성하려면 생성자를 List를 항상 주입받아야 합니다. 이때, 문제가 발생합니다.  위 테스트 코드를 보면 MyList 인스턴스를 생성할 때,  라는 List가 생성자 파라미터로 전달됩니다. 그렇게 …","fields":{"slug":"/cautions-for-using-collections-in-Java/"},"frontmatter":{"date":"December 11, 2023","update":null,"title":"Java에서 컬렉션을 사용할 때 주의할 점","tags":["java"]}},{"excerpt":"우아한테크코스의 모든 미션에 \"배열 대신 컬렉션을 사용하라\"는 요구 사항이 항상 존재한다. 그 이유를 알아보자. 두 줄 요약 Java가 이미 잘 만들어놓은 JCF가 존재한다. 제네릭을 지원한다. JCF  Java는 다양한 자료구조와 다양한 알고리즘을 지원한다. 예를 들어 동적 배열은 , 연결 리스트는  처럼 말이다. 게다가 각 자료구조에 필요한 동작들, …","fields":{"slug":"/why-use-collection-instead-of-array/"},"frontmatter":{"date":"December 11, 2023","update":null,"title":"배열 대신 컬렉션을 쓴다. 왜?","tags":["java","clean-code"]}},{"excerpt":"지난 번엔 Garbage Collection과 동작 원리에 대해 알아보았다. 이번에는 어떤 GC 알고리즘이 있고, 각 알고리즘의 특징은 어떤지 알아보자. Serial Collector 단일 쓰레드를 사용하여 모든 GC 작업을 수행하므로 작업 중, 쓰레드 간 통신 오버헤드가 없다. 쓰레드 간 통신은 데이터를 전송하고 조율하는 과정을 의미한다.\n쉽게 말해 쓰…","fields":{"slug":"/garbage-collection-algorithms/"},"frontmatter":{"date":"December 10, 2023","update":null,"title":"Garbage Collection 알고리즘","tags":["java","garbage-collection"]}},{"excerpt":"GC에서 고려할 성능 GC의 주요 측정 기준은 처리량과 지연 시간이다. 처리량은 오랜 시간동안 측정하며, (GC에 소요되지 않는 시간 / 전체 시간) * 100을 의미한다. 지연 시간은 애플리케이션의 응답 속도이다. 즉, GC를 얼마나 빠르고 더 적은 횟수로 수행할 것인가가 GC 튜닝에서 고려할 포인트가 되는 것이다. GC 튜닝에 대한 내용은 언젠가 알아…","fields":{"slug":"/garbage-collection-tuning/"},"frontmatter":{"date":"December 09, 2023","update":null,"title":"Garbage Collection 튜닝에 대해","tags":["java","garbageccollection"]}},{"excerpt":"Garbage Collection를 알아야 하는 이유 Garbage Collection(이하 GC)을 공부하다보니, GC를 너무 믿어서는 안되겠다고 생각됐다. 우형에서 발생한 일도 그렇고 토스에서 발생한 일을 보니 모두 애플리케이션의 메모리 관련 치명적 에러는 모두 이 GC와 관련이 있었기 때문이다. 더군다나 네이버 D2 글에서도 GC에 대해 잘 알고 있…","fields":{"slug":"/about-garbage-collection/"},"frontmatter":{"date":"December 08, 2023","update":null,"title":"JVM의 Garbage Collection과 동작 원리","tags":["java","garbage-collection"]}},{"excerpt":"들어가며 5주 간 JSCODE에서 진행한 운영체제 모의면접 스터디를 마치고 회고록을 작성하려고 한다. JSCODE 란? 👈 진행 방법 매 주차별로 질문 리스트가 제공된다. 스터디 참여자들은 질문 리스트에 대한 자기주도 학습을 진행한다. 매주 목요일 20시에 모여 팀별로 모의면접을 진행한다.\n답변자 1명, 질문자 2명, 관찰자 1명으로 역할 나누어 진행한다…","fields":{"slug":"/os-interview-study-retrospection/"},"frontmatter":{"date":"December 08, 2023","update":"Dec 08, 2023","title":"[JSCODE] - OS 면접 스터디 회고록","tags":["retrospection"]}},{"excerpt":"JVM의 메모리 구조 우선 static에 대해 이해하기 전에 JVM이 실행될 때 메모리에 어떻게 적재되는 지부터 살펴보자.  크게 세 공간으로 나뉜다. Heap 영역 new 키워드를 사용해 동적으로 생성한 객체의 인스턴스가 담기는 공간이다. Garbage Collection에 의해 관리된다. Stack 영역 메서드 콜 스택이나, 지역 변수 혹은 변수 파라…","fields":{"slug":"/static-with-memory-structure/"},"frontmatter":{"date":"December 06, 2023","update":"Dec 06, 2023","title":"static을 더 잘 사용하기","tags":["java","operating-system"]}},{"excerpt":"가상 주소와 물리 주소(실주소)에 대해 설명해주세요. 가상 주소를 물리 주소(실주소)로 어떻게 변환할까요? 절대 주소 지정과 상대 주소 지정의 차이점은 뭘까요? 메모리 분할에 대해 설명해주세요. 메모리 배치 기법(메모리 관리 전략)에 대해 설명해주세요. 외부 단편화와 내부 단편화의 차이가 뭔가요? 메모리 배치 기법중 하나인 colaescing(통합)에 대…","fields":{"slug":"/os-interview-study-5week/"},"frontmatter":{"date":"December 06, 2023","update":"Dec 06, 2023","title":"[JSCODE] - OS 면접 스터디 5주차","tags":["operating-system","interview"]}},{"excerpt":"왜 값의 변경을 막아야 할까?  자동차 경주 피드백 중 하나이다. 왜 이런 피드백이 있는지 알아보자 final 키워드를 붙이면 좋은 점 1. 변경 가능성을 최소화한다. 즉, 코드의 예측이 쉬워진다. 사실 알잘딱깔센으로 객체나 값의 변경은 정말 필요한 곳에서 필요한 만큼 수행해야 한다. 하지만 final 키워드를 붙이지 않으면 분명한 것은 변경 가능성이 존…","fields":{"slug":"/why-use-final/"},"frontmatter":{"date":"December 05, 2023","update":"Dec 05, 2023","title":"final 키워드를 사용해 값의 변경을 막아라. 왜?","tags":["java","clean-code"]}},{"excerpt":"들어가며 흔히 Domain과 View는 분리해야 한다고 한다. 대표적인 디자인 패턴으로 MVC 패턴이 있다. 같이 작성하면 개발도 빨리 할 수 있고 코드 작성에도 편한데, 왜 분리하라고 할까? 결론 결론부터 말하자면, Domain 객체를 잦은 변경으로부터 보호하기 위해서이다. 왜 Domain을 보호해야 할까? 이를 알아보기 위해서는 우선 Domain이 무…","fields":{"slug":"/why-seperate-domain-and-view/"},"frontmatter":{"date":"December 04, 2023","update":"Dec 04, 2023","title":"Domain과 View를 분리한다. 왜?","tags":["design-pattern","mvc-pattern","clean-code"]}},{"excerpt":"들어가며 MySQL에서의 계정 식별 방식, 권한, 역할에 대한 기본적인 내용을 알아보자 왜 알아야 할까? 데이터베이스 서버의 보안을 위해 ! 괜히 보안떄문에 퇴근이 늦어지면 안되니까 1. 사용자 식별 방법 사용자 아이디 뿐만 아니라 접속 지점(호스트명이나 도메인 또는 IP주소)도 함께 확인한다.\n예시)   따라서 계정의 HOST와 다른 지점에서 접속하면 …","fields":{"slug":"/03-user-identification/"},"frontmatter":{"date":"December 04, 2023","update":"Dec 04, 2023","title":"MySQL에서의 사용자 식별에 대해","tags":["database"]}},{"excerpt":"📝 질문 리스트 병행성(동시성)과 병렬성에 대해 설명해주세요. 프로세스 동기화에 대해 설명해 주세요. Critical Section(임계 영역)에 대해 설명해주세요. Race Condition(경쟁 조건)이 무엇인가요? Mutual Exclusion(상호 배제)에 대해 설명해주세요. 뮤텍스(Mutex)에 대해 설명해주세요. 세마포어에 대해 설명해주세요. …","fields":{"slug":"/os-interview-study-4week/"},"frontmatter":{"date":"November 30, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 4주차","tags":["operating-system","interview"]}},{"excerpt":"TDD란? Test Driven Development. 테스트 주도 개발이다. 보통 '~~ 주도 개발' 이라고 이름이 붙으면, 개발할 때 '~~' 를 1순위로 여기며 개발하는 방법론을 의미한다. 즉, 테스트 주도 개발은 테스트를 1순위로 여기며 개발하는 개발 방법론이다. 개발 방법론! 어떻게 하나? 결론: 테스트 코드 작성 -> 프로덕션 코드 작성 -> …","fields":{"slug":"/about-tdd/"},"frontmatter":{"date":"November 29, 2023","update":null,"title":"TDD 이해하기","tags":["tdd","test"]}},{"excerpt":"이 글의 목적 JUnit과 AssertJ의 학습 테스트 코드를 통해 단위 테스트를 처음 해보려는 사람에게 어떻게 쓰는지 간단한 가이드 라인 제시 단위 테스트하면서 잘 사용하지 않는 기능에 대해 나만의 치트 시트 역할 전체 코드 자세한 전체 코드는 이 곳에 올려놓았습니다. 위 레포지토리를 로컬에 clone하고 step3 브랜치로 이동하면, 학습 테스트가 존…","fields":{"slug":"/using-junit-and-assertJ/"},"frontmatter":{"date":"November 28, 2023","update":null,"title":"JUnit과 AssertJ 활용법","tags":["unit-test","JUnit","AssertJ","test"]}},{"excerpt":"📝 질문 리스트 SQL에 대해서 설명해주세요. C언어와 같은 프로그래밍 언어와 어떤 차이가 있나요? 개발자가 작성한 SQL이 어떤 과정을 통해 실행 되는지 설명해주세요. DML은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DDL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. DCL은 무엇인가요? 어떤 구문이 있는지도 설명해주세요. 참조 무결성에 …","fields":{"slug":"/db-interview-study-2week/"},"frontmatter":{"date":"November 28, 2023","update":"Dec 01, 2023","title":"DB 면접 스터디 2주차","tags":["database","interview"]}},{"excerpt":"단위 테스트란? 애플리케이션에서 동작하는 기능 또는 메서드를 실행시키는 독립적인 단위의 테스트이다. 이때 기능이라는 말이 포함되어있다. 즉, 단위 테스트라고 해서 무조건 메서드만 테스트하는 건 아니다. 왜 단위 테스트를 하나? 잘 작성한 단위 테스트는 개발자가 작성한 단위(기능 또는 메서드)를 매우 빠르게 검증할 수 있다. 단위 테스트를 하지 않았을 때의…","fields":{"slug":"/unit-test/"},"frontmatter":{"date":"November 27, 2023","update":null,"title":"단위 테스트 이해하기","tags":["unit-test","test"]}},{"excerpt":"📝 질문 리스트 기아 상태가 무엇인가요? CPU에 의해 처리가 된 준비가 된 프로세스가, 다른 프로세스의 우선 순위에 밀려 오랜 시간 대기하는 상태입니다. 이는, 프로세스 스케줄링에 의해 발생할 수 있습니다. 보통 데드락과 헷갈릴 수 있는데, 데드락은 여러 프로세스가 동시에 자원들을 점유하려는 과정에서 모든 프로세스의 상태가 blocked가 되는 현상입니…","fields":{"slug":"/os-interview-study-3week/"},"frontmatter":{"date":"November 23, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 3주차","tags":["operating-system","interview"]}},{"excerpt":"📝 질문 리스트 파일 시스템과 데이터베이스의 차이점에 대해서 설명해주세요. 파일 시스템은 물리적 액세스만 관리하고, 데이터베이스는 물리적 액세스와 논리적 액세스 모두 관리합니다. 둘 다 결국엔, 디스크에 물리적으로 저장된다. 특히 파일 시스템의 경우 디스크에 저장된 파일을 직접 다루는 시스템이다. 데이터베이스는 이 디스크에 저장된 파일과, 사용자 사이에서…","fields":{"slug":"/db-interview-study-1week/"},"frontmatter":{"date":"November 21, 2023","update":"Dec 01, 2023","title":"DB 면접 스터디 1주차","tags":["database","interview"]}},{"excerpt":"📝 질문 리스트 프로그램에 대해 설명해주세요. 프로그램은 개발자가 프로그래밍 언어로 작성한 명령어들의 집합입니다. 프로그램의 특징으로는 디스크에 실행 파일 형식으로 저장되어 있다가, 사용자가 실행을 하면 운영체제에 의해 해당 파일을 메모리에 적재됩니다. 이를 프로세스라고 합니다. 프로세스에 대해 설명해주세요. 프로그램의 인스턴스입니다. 쉽게 말해, 디스크…","fields":{"slug":"/os-interview-study-2week/"},"frontmatter":{"date":"November 16, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 2주차","tags":["operating-system","interview"]}},{"excerpt":"📝 질문 리스트 운영체제는 무엇이고 어떤 역할을 수행하는가? 운영체제는 컴퓨팅 시스템을 운영하는 시스템이다. 약간 말장난 같지만, 실제로 운영체제는 사용자와 하드웨어 사이에서 자원을 어떻게 사용할 지를 결정한다. 대표적인 역할로는 프로세스 스케줄링, 프로세스 동기화 방식 등이 있다. 시분할 시스템 하나의 프로세서가 2개 이상의 프로세스의 작업을 처리해야할…","fields":{"slug":"/os-interview-study-1week/"},"frontmatter":{"date":"November 09, 2023","update":"Dec 01, 2023","title":"[JSCODE] - OS 면접 스터디 1주차","tags":["operating-system","interview"]}},{"excerpt":"DBCP (DataBase Connection Pool) 탄생 배경 서버 애플리케이션에서 DB 서버로 요청을 보내면 TCP 통신을 한다. TCP 통신은 Connection이 유지되는 상태에서 통신한다. 이 Connection은 생성하고 사용하고 삭제되기까지 꽤 많은 작업이 포함된다. 즉, 통신 비용이 비싸다. 이러한 상황에서 서버는 많은 요청을 처리하는데…","fields":{"slug":"/dbcp/"},"frontmatter":{"date":"October 16, 2023","update":null,"title":"DBCP와 HikariCP 이해하기","tags":["database","DBCP","hikariCP"]}},{"excerpt":"Java 17 우아한테크코스에서 진행한 미션들의 Java 버전은 11이었습니다. 모든 팀원들에게 익숙한 버전은 11 버전임은 부정할 수 없는 사실이지만, 그럼에도 17 버전을 선택한 이유는 다음과 같습니다. 생산성 17 버전에 포함된 Record 타입, String 블럭 사용, Stream.toList()사용 으로 생산성 향상을 기대했기 때문입니다. 우테…","fields":{"slug":"/tech-stacks/"},"frontmatter":{"date":"July 07, 2023","update":null,"title":"셀럽잇의 기술 스택 및 선정 이유","tags":["celuveat"]}}]}},"pageContext":{}},"staticQueryHashes":[],"slicesMap":{}}