{"componentChunkName":"component---src-templates-post-jsx","path":"/tomcat-tuning/","result":{"data":{"site":{"siteMetadata":{"title":"log4dh"}},"markdownRemark":{"id":"becc6595-f346-5ffe-a26c-b2d31fa68261","excerpt":"사용자 유치 전, 서버 성능 개선을 위해 Tomcat 성능 최적화를 진행하려고 합니다. 그 과정에서 설정할 값들인 , , 에 대해 이해하려고 합니다. Max-Threads JVM 기반에서 동작하는 Tomcat은 HTTP 요청을 받으면, 각 요청을 하나의 쓰레드가 처리하도록 동작합니다. 이  설정은 Tomcat에서 최대 몇 개까지의 쓰레드를 동작시킬 것인지…","html":"<p>사용자 유치 전, 서버 성능 개선을 위해 Tomcat 성능 최적화를 진행하려고 합니다.</p>\n<p>그 과정에서 설정할 값들인 <code class=\"language-text\">Max-Threads</code>, <code class=\"language-text\">Max-Connections</code>, <code class=\"language-text\">Accept-Count</code>에 대해 이해하려고 합니다.</p>\n<h2>Max-Threads</h2>\n<p>JVM 기반에서 동작하는 Tomcat은 HTTP 요청을 받으면, 각 요청을 하나의 쓰레드가 처리하도록 동작합니다.</p>\n<p>이 <code class=\"language-text\">Max-Threads</code> 설정은 Tomcat에서 최대 몇 개까지의 쓰레드를 동작시킬 것인지 설정하는 옵션입니다.</p>\n<p>즉, 동시에 최대 몇 개의 요청을 처리할 것인지에 대한 설정입니다.</p>\n<p>default 값은 200 입니다.</p>\n<h2>Max-Connections</h2>\n<p>HTTP 요청을 수락하고 처리할 수 있는 최대 Connection의 수에 대한 설정입니다.</p>\n<p>설정 수치에 도달하면, 추가 요청에 대해 Accept는 하지만 처리하진 않습니다.</p>\n<p>Accept된 Connection은 현재 처리 중인 Connection의 수가 <code class=\"language-text\">Max-Connections</code>보다 아래로 떨어질 때까지 Block 됩니다.</p>\n<p>Block 된 요청은 <code class=\"language-text\">Accept-Count</code> 수 만큼 존재할 수 있습니다.</p>\n<p>default 값은 8192 입니다.</p>\n<h2>Accept-Count</h2>\n<p><code class=\"language-text\">Max-Connections</code> 보다 더 많은 요청이 들어오게 되어 요청을 Block 하면, 운영체제는 Block 된 요청을 대기 큐에 대기시킵니다.</p>\n<p>이때, 대기 큐의 Size가 <code class=\"language-text\">Accept-Count</code> 입니다.</p>\n<p>위 크기보다도 더 많은 요청이 들어오게 된다면, 운영체제가 해당 요청을 거절하거나 Connection Time Out이 발생하게 됩니다.</p>\n<h2>그렇다면 어떤 식으로 조절할까?</h2>\n<p>현재 vUser를 300명으로 했을 때를 가정하여 부하 테스트를 진행하고 있습니다.</p>\n<p>그 결과 아래와 같은 최적의 값이 도출되는 것을 확인할 수 있었습니다.</p>\n<ul>\n<li>Max-Threads: 300</li>\n<li>Max-Connection: 8192 (default)</li>\n<li>Accept-Count: 10 (default)</li>\n</ul>\n<blockquote>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://tomcat.apache.org/tomcat-8.5-doc/config/http.html\">톰캣 공식문서</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"[셀럽잇] Tomcat 성능 최적화를 위해 Max-Threads, Max-Connections, Accept-Count 설정하기","date":"September 09, 2023","update":null,"tags":["셀럽잇","tomcat"],"series":"셀럽잇 프로젝트"},"fields":{"slug":"/tomcat-tuning/","readingTime":{"minutes":2.325}}},"seriesList":{"edges":[{"node":{"id":"459e8307-ece6-532e-bb97-8b556f52ba0b","fields":{"slug":"/tech-stacks/"},"frontmatter":{"title":"[셀럽잇] 기술 스택 및 선정 이유"}}},{"node":{"id":"48c9872b-f451-55df-b12b-32d6b0ae2467","fields":{"slug":"/oauth-logout-and-withdraw/"},"frontmatter":{"title":"[셀럽잇] OAuth 2.0 로그아웃 구현"}}},{"node":{"id":"becc6595-f346-5ffe-a26c-b2d31fa68261","fields":{"slug":"/tomcat-tuning/"},"frontmatter":{"title":"[셀럽잇] Tomcat 성능 최적화를 위해 Max-Threads, Max-Connections, Accept-Count 설정하기"}}},{"node":{"id":"c012b5ff-fef6-580b-b390-b16f9d809616","fields":{"slug":"/zero-downtime-deployment-of-celuveat/"},"frontmatter":{"title":"[셀럽잇] 무중단 배포 적용기"}}}]},"previous":{"fields":{"slug":"/oauth-logout-and-withdraw/"},"frontmatter":{"title":"[셀럽잇] OAuth 2.0 로그아웃 구현"}},"next":{"fields":{"slug":"/dbcp/"},"frontmatter":{"title":"DBCP와 HikariCP 이해하기"}}},"pageContext":{"id":"becc6595-f346-5ffe-a26c-b2d31fa68261","series":"셀럽잇 프로젝트","previousPostId":"48c9872b-f451-55df-b12b-32d6b0ae2467","nextPostId":"3b94cbd6-f64a-5d82-96a2-0761602c250b"}},"staticQueryHashes":[],"slicesMap":{}}