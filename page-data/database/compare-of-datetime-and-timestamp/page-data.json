{"componentChunkName":"component---src-templates-blog-post-js","path":"/database/compare-of-datetime-and-timestamp/","result":{"data":{"site":{"siteMetadata":{"title":"내가 재밌는 일을 하자 !"}},"markdownRemark":{"id":"721ee068-4784-5b22-b2e7-2cc9061a5ff8","excerpt":"들어가며 최근 개인 프로젝트를 시작하면서 ERD 설계를 진행했습니다. 이때, 작성 날짜나 시작 날짜 같은 날짜에 대한 값을 저장할 칼럼이 필요했고 해당 칼럼의 자료형을 결정하는 과정에서 DATETIME과 TIMESTAMP…","html":"<h2>들어가며</h2>\n<p>최근 개인 프로젝트를 시작하면서 ERD 설계를 진행했습니다.</p>\n<p>이때, 작성 날짜나 시작 날짜 같은 <strong>날짜</strong>에 대한 값을 저장할 칼럼이 필요했고 해당 칼럼의 자료형을 결정하는 과정에서 <strong>DATETIME과 TIMESTAMP의 차이에 대해 궁금해졌습니다.</strong></p>\n<p>따라서 이 둘을 이해해보겠습니다.</p>\n<blockquote>\n<p>기준은 MySQL 8.0 입니다.</p>\n</blockquote>\n<h2>DATETIME과 TIMESTAMP의 공통점</h2>\n<ul>\n<li>두 타입 모두 <strong>날짜와 시간을 표현합니다.</strong></li>\n<li>표현 형식은 <code class=\"language-text\">YYYY-MM-DD hh:mm:ss</code> 입니다.</li>\n<li>최대 6자리 정밀도의 소수점 초 부분이 포함될 수 있습니다.</li>\n<li>표현할 수 있는 범위의 차이 떄문에 약간 다른 점이 있습니다.</li>\n<li>DATETIME은 <code class=\"language-text\">1000-01-01 00:00:00.000000</code>부터 <code class=\"language-text\">9999-12-31 23:59:59.499999</code> 까지입니다.</li>\n<li>TIMESTAMP는 <code class=\"language-text\">1970-01-01 00:00:01.000000</code>부터 <code class=\"language-text\">2038-01-19 03:14:07.499999</code> 까지입니다.</li>\n<li>자동으로 초기화하거나 현재의 날짜 및 시간으로 업데이트하는 기능을 제공합니다.\n<ul>\n<li>예) <code class=\"language-text\">DEFAULT CURRENT_TIMESTAMP</code> or <code class=\"language-text\">ON UPDATE CURRENT_TIMESTAMP</code></li>\n</ul>\n</li>\n</ul>\n<h2>DATETIME과 TIMESTAMP의 차이점</h2>\n<h3>1. <strong>지원하는 값의 범위에 차이가 있습니다.</strong></h3>\n<ul>\n<li>DATETIME은 <code class=\"language-text\">1000-01-01 00:00:00</code> 부터 <code class=\"language-text\">9999-12-31 24:59:59</code> 까지입니다.</li>\n<li>TIMESTAMP는 <code class=\"language-text\">1970-01-01 00:00:01</code>UTC 부터 <code class=\"language-text\">2038-01-19 03:14:07</code>UTC 까지입니다.</li>\n</ul>\n<h3>2. <strong>Current Time Zone에 따라 UTC 값으로 변환해주는 작업에 차이가 있습니다.</strong></h3>\n<ul>\n<li>DATETIME은 작업을 지원하지 않습니다.</li>\n<li>TIMESTAMP는 저장 혹은 검색 시에 변환해줍니다.\n<ul>\n<li>즉, TIMESTAMP는 Time Zone 변화에 유연합니다.</li>\n<li>추가로 Session 별로 Time Zone을 설정할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h3>3. <strong>값을 저장하는 공간의 크기에도 차이가 있습니다.</strong></h3>\n<ul>\n<li>DATETIME은 8 byte를 차지합니다.</li>\n<li>TIMESTAMP는 4 byte를 차지합니다.</li>\n</ul>\n<h2>결론</h2>\n<p>날짜와 시간까지 함께 저장해야하는 칼럼의 자료형은, 가급적 <strong>TIMESTAMP를 선택하는 것이 좋아보입니다.</strong></p>\n<p>저장 공간의 이점도 있을 뿐더러, 무엇보다 Time Zone에 따른 UTC 값으로 자동 변환해주는 작업의 유무에서 큰 차이가 있기 때문입니다.</p>\n<p>따라서 더 가볍고 유연한 테이블을 위해서는 DATETIME 보단 TIMESTAMP를 권장합니다.</p>\n<h2>번외: DATE 타입</h2>\n<ul>\n<li>시간없이 날짜에 대한 값만 지원합니다.</li>\n<li><code class=\"language-text\">YYYY-MM-DD</code> 형식으로 표현합니다.</li>\n<li>지원 범위는 <code class=\"language-text\">1000-01-01</code> 부터 <code class=\"language-text\">9999-12-31</code> 까지입니다.</li>\n</ul>\n<blockquote>\n<h3>Reference</h3>\n<ul>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/datetime.html\">https://dev.mysql.com/doc/refman/8.0/en/datetime.html</a></li>\n<li><a href=\"https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html\">https://dev.mysql.com/doc/refman/8.0/en/timestamp-initialization.html</a></li>\n</ul>\n</blockquote>","frontmatter":{"title":"[MySQL] DATETIME vs TIMESTAMP","date":"January 10, 2024","description":"두 자료형 알아보고 비교하기"}},"previous":{"fields":{"slug":"/database/real-mysql-book-study/05-transaction-and-lock/"},"frontmatter":{"title":"MySQL에서의 트랜잭션과 Lock"}},"next":{"fields":{"slug":"/database/real-mysql-book-study/05-isolation-level-of-MySQL/"},"frontmatter":{"title":"MySQL의 격리 수준"}}},"pageContext":{"id":"721ee068-4784-5b22-b2e7-2cc9061a5ff8","previousPostId":"7df05c57-58b6-58b7-a6f4-826596954a26","nextPostId":"e6a467c4-0c4e-57d7-b2fb-787c767efe17"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}