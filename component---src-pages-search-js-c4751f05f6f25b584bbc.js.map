{"version":3,"file":"component---src-pages-search-js-c4751f05f6f25b584bbc.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/pages/search.js","webpack://gatsby-starter-blog/./gatsby-config.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/theme-toggle.js","webpack://gatsby-starter-blog/./src/components/search.js","webpack://gatsby-starter-blog/./src/components/layout.js"],"sourcesContent":["import * as React from \"react\"\nimport { Link, graphql, navigate } from \"gatsby\"\nimport { useLocation } from '@reach/router'\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { siteMetadata } from \"../../gatsby-config\"\n\nconst SearchPage = ({ data }) => {\n  const location = useLocation()\n  const [searchQuery, setSearchQuery] = React.useState('')\n  const [filteredPosts, setFilteredPosts] = React.useState([])\n  const [sortBy, setSortBy] = React.useState('date') // 'date', 'title', 'relevance'\n\n  const posts = data.allMarkdownRemark.nodes\n  const siteTitle = siteMetadata.title || `Title`\n\n  React.useEffect(() => {\n    const params = new URLSearchParams(location.search)\n    const query = params.get('q') || ''\n    setSearchQuery(query)\n    \n    if (query.length >= 2) {\n      const results = posts.filter(post => {\n        const title = post.frontmatter.title?.toLowerCase() || ''\n        const description = post.frontmatter.description?.toLowerCase() || ''\n        const excerpt = post.excerpt?.toLowerCase() || ''\n        const tags = post.frontmatter.tags?.join(' ').toLowerCase() || ''\n        const searchTerm = query.toLowerCase()\n\n        return title.includes(searchTerm) || \n               description.includes(searchTerm) || \n               excerpt.includes(searchTerm) ||\n               tags.includes(searchTerm)\n      })\n      setFilteredPosts(results)\n    } else {\n      setFilteredPosts([])\n    }\n  }, [location.search, posts])\n\n\n  const handleSearchChange = (e) => {\n    setSearchQuery(e.target.value)\n  }\n\n  const handleSearch = () => {\n    if (searchQuery.trim().length >= 2) {\n      // URL 업데이트\n      navigate(`/search?q=${encodeURIComponent(searchQuery.trim())}`, { replace: true })\n    } else {\n      navigate('/search', { replace: true })\n    }\n  }\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      handleSearch()\n    }\n  }\n\n  const highlightSearchTerm = (text, searchTerm) => {\n    if (!searchTerm || !text) return text\n    \n    const regex = new RegExp(`(${searchTerm.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')})`, 'gi')\n    return text.replace(regex, '<mark>$1</mark>')\n  }\n\n  const sortPosts = (posts, sortType) => {\n    switch (sortType) {\n      case 'title':\n        return [...posts].sort((a, b) => \n          a.frontmatter.title.localeCompare(b.frontmatter.title)\n        )\n      case 'date':\n        return [...posts].sort((a, b) => \n          new Date(b.frontmatter.date) - new Date(a.frontmatter.date)\n        )\n      case 'relevance':\n        // 제목에서 매치되는 것을 우선순위로\n        return [...posts].sort((a, b) => {\n          const aTitle = a.frontmatter.title?.toLowerCase() || ''\n          const bTitle = b.frontmatter.title?.toLowerCase() || ''\n          const searchTerm = searchQuery.toLowerCase()\n          \n          const aInTitle = aTitle.includes(searchTerm) ? 1 : 0\n          const bInTitle = bTitle.includes(searchTerm) ? 1 : 0\n          \n          return bInTitle - aInTitle\n        })\n      default:\n        return posts\n    }\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className=\"search-page\">\n        <div className=\"search-page-header\">\n          <h1>검색 결과</h1>\n          <div className=\"search-page-input-container\">\n            <input\n              type=\"text\"\n              placeholder=\"검색어를 입력하세요...\"\n              value={searchQuery}\n              onChange={handleSearchChange}\n              onKeyPress={handleKeyPress}\n              className=\"search-page-input\"\n              autoFocus\n            />\n            <button onClick={handleSearch} className=\"search-page-button\">\n              검색\n            </button>\n          </div>\n        </div>\n\n        <div className=\"search-page-results\">\n          {searchQuery.length >= 2 ? (\n            <>\n              <div className=\"search-results-header-section\">\n                <h2 className=\"search-results-title\">\n                  '{searchQuery}' 검색 결과 ({filteredPosts.length}개)\n                </h2>\n                {filteredPosts.length > 0 && (\n                  <div className=\"search-sort-container\">\n                    <label htmlFor=\"sort-select\">정렬:</label>\n                    <select \n                      id=\"sort-select\"\n                      value={sortBy} \n                      onChange={(e) => setSortBy(e.target.value)}\n                      className=\"search-sort-select\"\n                    >\n                      <option value=\"date\">최신순</option>\n                      <option value=\"title\">제목순</option>\n                      <option value=\"relevance\">관련도순</option>\n                    </select>\n                  </div>\n                )}\n              </div>\n              {filteredPosts.length > 0 ? (\n                <div className=\"posts-grid\">\n                  {sortPosts(filteredPosts, sortBy).map(post => {\n                    const title = post.frontmatter.title || post.fields.slug\n\n                    return (\n                      <article\n                        key={post.fields.slug}\n                        className=\"post-list-item\"\n                        itemScope\n                        itemType=\"http://schema.org/Article\"\n                      >\n                        <header>\n                          <h2>\n                            <Link to={post.fields.slug} itemProp=\"url\">\n                              <span \n                                itemProp=\"headline\"\n                                dangerouslySetInnerHTML={{\n                                  __html: highlightSearchTerm(title, searchQuery)\n                                }}\n                              />\n                            </Link>\n                          </h2>\n                          <small>{post.frontmatter.date}</small>\n                        </header>\n                        <section>\n                          {post.frontmatter.description && (\n                            <p\n                              dangerouslySetInnerHTML={{\n                                __html: highlightSearchTerm(post.frontmatter.description, searchQuery),\n                              }}\n                              itemProp=\"description\"\n                            />\n                          )}\n                          {post.frontmatter.tags && (\n                            <div className=\"post-tags\">\n                              {post.frontmatter.tags.map(tag => (\n                                <span key={tag} className=\"post-tag\">\n                                  #{tag}\n                                </span>\n                              ))}\n                            </div>\n                          )}\n                        </section>\n                      </article>\n                    )\n                  })}\n                </div>\n              ) : (\n                <div className=\"search-no-results-page\">\n                  <span>😔</span>\n                  <h3>검색 결과가 없습니다</h3>\n                  <p>'{searchQuery}'에 대한 검색 결과를 찾을 수 없습니다.</p>\n                  <ul>\n                    <li>검색어의 철자가 정확한지 확인해보세요</li>\n                    <li>다른 키워드로 검색해보세요</li>\n                    <li>더 일반적인 검색어를 사용해보세요</li>\n                  </ul>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className=\"search-page-placeholder\">\n              <span>🔍</span>\n              <h3>검색어를 입력해주세요</h3>\n              <p>제목, 설명, 내용, 태그에서 검색합니다.</p>\n              <p>최소 2글자 이상 입력해주세요.</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const Head = ({ location }) => {\n  const params = new URLSearchParams(location.search)\n  const query = params.get('q') || ''\n  \n  return (\n    <Seo \n      title={query ? `'${query}' 검색 결과` : \"포스트 검색\"}\n      description={query ? `'${query}'에 대한 검색 결과` : \"블로그 포스트를 검색하세요\"}\n    />\n  )\n}\n\nexport default SearchPage\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YYYY년 M월 D일\")\n          title\n          description\n          tags\n        }\n      }\n    }\n  }\n`\n","module.exports = {\n  pathPrefix: \"/\",\n  siteMetadata: {\n    title: `내가 재밌는 일을 하자 !`,\n    author: {\n      name: `Kim DongHo`,\n    },\n    description: `내가 좋아하고 재밌는 일을 기록하자`,\n  },\n  plugins: [\n    `gatsby-plugin-image`,\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        path: `${__dirname}/content/blog`,\n        name: `blog`,\n      },\n    },\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `images`,\n        path: `${__dirname}/src/images`,\n      },\n    },\n    {\n      resolve: `gatsby-transformer-remark`,\n      options: {\n        tableOfContents: {\n          heading: null,\n          maxDepth: 4,\n        },\n        plugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 630,\n            },\n          },\n          {\n            resolve: `gatsby-remark-responsive-iframe`,\n            options: {\n              wrapperStyle: `margin-bottom: 1.0725rem`,\n            },\n          },\n          {\n            resolve: `gatsby-remark-autolink-headers`,\n            options: {\n              offsetY: `100`,\n              icon: `<svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.65 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg>`,\n              className: `anchor-header`,\n              maintainCase: false,\n              removeAccents: true,\n              isIconAfterHeader: false,\n              elements: [`h1`, `h2`, `h3`, `h4`, `h5`, `h6`],\n            },\n          },\n          `gatsby-remark-prismjs`,\n        ],\n      },\n    },\n    `gatsby-transformer-sharp`,\n    `gatsby-plugin-sharp`,\n    {\n      resolve: `gatsby-plugin-feed`,\n      options: {\n        query: `\n          {\n            site {\n              siteMetadata {\n                title\n                description\n                siteUrl\n                site_url: siteUrl\n              }\n            }\n          }\n        `,\n        feeds: [\n          {\n            serialize: ({ query: { site, allMarkdownRemark } }) => {\n              return allMarkdownRemark.nodes.map(node => {\n                return Object.assign({}, node.frontmatter, {\n                  description: node.excerpt,\n                  date: node.frontmatter.date,\n                  url: site.siteMetadata.siteUrl + node.fields.slug,\n                  guid: site.siteMetadata.siteUrl + node.fields.slug,\n                  custom_elements: [{ \"content:encoded\": node.html }],\n                })\n              })\n            },\n            query: `{\n              allMarkdownRemark(sort: {frontmatter: {date: DESC}}) {\n                nodes {\n                  excerpt\n                  html\n                  fields {\n                    slug\n                  }\n                  frontmatter {\n                    title\n                    date(formatString: \"YYYY년 M월 D일\")\n                  }\n                }\n              }\n            }`,\n            output: \"/rss.xml\",\n            title: \"Gatsby Starter Blog RSS Feed\",\n          },\n        ],\n      },\n    },\n    {\n      resolve: `gatsby-plugin-manifest`,\n      options: {\n        name: `Gatsby Starter Blog`,\n        short_name: `Gatsby`,\n        start_url: `/`,\n        background_color: `#ffffff`,\n        // This will impact how browsers show your PWA/website\n        // https://css-tricks.com/meta-theme-color-and-trickery/\n        // theme_color: `#663399`,\n        display: `minimal-ui`,\n        icon: `src/images/profile_img.jpeg`, // This path is relative to the root of the site.\n      },\n    },\n  ],\n}\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import React, { useState, useEffect } from 'react'\n\nconst ThemeToggle = () => {\n  const [theme, setTheme] = useState('light')\n\n  useEffect(() => {\n    // 저장된 테마 또는 시스템 선호도 확인\n    const savedTheme = localStorage.getItem('theme')\n    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n    \n    const initialTheme = savedTheme || (systemPrefersDark ? 'dark' : 'light')\n    setTheme(initialTheme)\n    document.documentElement.setAttribute('data-theme', initialTheme)\n  }, [])\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light'\n    setTheme(newTheme)\n    document.documentElement.setAttribute('data-theme', newTheme)\n    localStorage.setItem('theme', newTheme)\n  }\n\n  return (\n    <button\n      onClick={toggleTheme}\n      className=\"theme-toggle\"\n      aria-label={`${theme === 'light' ? '다크' : '라이트'} 모드로 전환`}\n      title={`${theme === 'light' ? '다크' : '라이트'} 모드로 전환`}\n    >\n      <span className=\"theme-toggle-icon\">\n        {theme === 'light' ? '🌙' : '☀️'}\n      </span>\n    </button>\n  )\n}\n\nexport default ThemeToggle","import React, { useState, useRef, useEffect } from 'react'\nimport { useStaticQuery, graphql, navigate } from 'gatsby'\n\nconst Search = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [query, setQuery] = useState('')\n  const [results, setResults] = useState([])\n  const searchRef = useRef(null)\n  const inputRef = useRef(null)\n\n  const data = useStaticQuery(graphql`\n    query SearchQuery {\n      allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n        nodes {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            date(formatString: \"YYYY년 M월 D일\")\n            tags\n          }\n          excerpt(pruneLength: 100)\n        }\n      }\n    }\n  `)\n\n  const posts = data.allMarkdownRemark.nodes\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (searchRef.current && !searchRef.current.contains(event.target)) {\n        setIsOpen(false)\n      }\n    }\n\n    const handleEscape = (event) => {\n      if (event.key === 'Escape') {\n        setIsOpen(false)\n        setQuery('')\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside)\n      document.addEventListener('keydown', handleEscape)\n      inputRef.current?.focus()\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside)\n      document.removeEventListener('keydown', handleEscape)\n    }\n  }, [isOpen])\n\n  const handleSearch = (searchQuery) => {\n    setQuery(searchQuery)\n    \n    if (searchQuery.length < 2) {\n      setResults([])\n      return\n    }\n\n    const filteredPosts = posts.filter(post => {\n      const title = post.frontmatter.title?.toLowerCase() || ''\n      const description = post.frontmatter.description?.toLowerCase() || ''\n      const excerpt = post.excerpt?.toLowerCase() || ''\n      const tags = post.frontmatter.tags?.join(' ').toLowerCase() || ''\n      const searchTerm = searchQuery.toLowerCase()\n\n      return title.includes(searchTerm) || \n             description.includes(searchTerm) || \n             excerpt.includes(searchTerm) ||\n             tags.includes(searchTerm)\n    })\n\n    setResults(filteredPosts.slice(0, 5))\n  }\n\n  const handleResultClick = (slug) => {\n    navigate(slug)\n    setIsOpen(false)\n    setQuery('')\n  }\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' && query.trim().length >= 2) {\n      navigate(`/search?q=${encodeURIComponent(query.trim())}`)\n      setIsOpen(false)\n      setQuery('')\n    }\n  }\n\n  const toggleSearch = () => {\n    setIsOpen(!isOpen)\n    if (!isOpen) {\n      // 검색창이 열릴 때 최근 포스트 5개를 기본으로 보여줌\n      setResults(posts.slice(0, 5))\n      setTimeout(() => inputRef.current?.focus(), 100)\n    } else {\n      setQuery('')\n      setResults([])\n    }\n  }\n\n  return (\n    <div className=\"search-container\" ref={searchRef}>\n      <button\n        onClick={toggleSearch}\n        className=\"search-toggle\"\n        aria-label=\"검색\"\n        title=\"검색\"\n      >\n        🔍\n      </button>\n      \n      {isOpen && (\n        <div className=\"search-dropdown\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            placeholder=\"포스트 검색... (엔터로 전체 검색)\"\n            value={query}\n            onChange={(e) => handleSearch(e.target.value)}\n            onKeyPress={handleKeyPress}\n            className=\"search-input\"\n          />\n          \n          {query.length === 0 && results.length > 0 && (\n            <div className=\"search-results\">\n              <div className=\"search-results-header\">\n                <span>최근 포스트</span>\n                <small>최대 5개</small>\n              </div>\n              {results.map(post => (\n                <div\n                  key={post.fields.slug}\n                  className=\"search-result-item\"\n                  onClick={() => handleResultClick(post.fields.slug)}\n                >\n                  <h4>{post.frontmatter.title}</h4>\n                  <p>{post.frontmatter.description || post.excerpt}</p>\n                  <small>{post.frontmatter.date}</small>\n                </div>\n              ))}\n            </div>\n          )}\n\n          {query.length >= 2 && results.length > 0 && (\n            <div className=\"search-results\">\n              <div className=\"search-results-header\">\n                <span>검색 결과</span>\n                <small>{results.length}개 / 최대 5개</small>\n              </div>\n              {results.map(post => (\n                <div\n                  key={post.fields.slug}\n                  className=\"search-result-item\"\n                  onClick={() => handleResultClick(post.fields.slug)}\n                >\n                  <h4>{post.frontmatter.title}</h4>\n                  <p>{post.frontmatter.description || post.excerpt}</p>\n                  <small>{post.frontmatter.date}</small>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          {query.length >= 2 && results.length === 0 && (\n            <div className=\"search-no-results\">\n              <span>😔</span>\n              <p>검색 결과가 없습니다.</p>\n              <small>다른 키워드로 검색해보세요.</small>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Search","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport ThemeToggle from \"./theme-toggle\"\nimport Search from \"./search\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <div className=\"top-buttons\">\n        <Search />\n        <ThemeToggle />\n      </div>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      <footer style={{\n        textAlign: 'center',\n        padding: 'var(--spacing-12) 0',\n        marginTop: 'var(--spacing-16)',\n        borderTop: '1px solid var(--color-border)',\n        color: 'var(--color-text-light)',\n        fontSize: 'var(--fontSize-0)'\n      }}>\n        © {new Date().getFullYear()} kdkdhoho. Built with{` `}\n        <a \n          href=\"https://www.gatsbyjs.com\"\n          style={{\n            color: 'var(--color-primary)',\n            textDecoration: 'none',\n            fontWeight: '500'\n          }}\n        >\n          Gatsby\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n"],"names":["Head","_ref2","location","query","URLSearchParams","search","get","React","Seo","title","description","_ref","data","useLocation","searchQuery","setSearchQuery","filteredPosts","setFilteredPosts","sortBy","setSortBy","posts","allMarkdownRemark","nodes","siteTitle","siteMetadata","length","results","filter","post","_post$frontmatter$tit","_post$frontmatter$des","_post$excerpt","_post$frontmatter$tag","frontmatter","toLowerCase","excerpt","tags","join","searchTerm","includes","handleSearch","trim","navigate","encodeURIComponent","replace","highlightSearchTerm","text","regex","RegExp","Layout","className","type","placeholder","value","onChange","e","target","onKeyPress","key","autoFocus","onClick","htmlFor","id","sortPosts","sortType","_toConsumableArray","sort","a","b","localeCompare","Date","date","_a$frontmatter$title","_b$frontmatter$title","aTitle","bTitle","aInTitle","map","fields","slug","itemScope","itemType","Link","to","itemProp","dangerouslySetInnerHTML","__html","tag","module","exports","pathPrefix","author","name","plugins","resolve","options","path","tableOfContents","heading","maxDepth","maxWidth","wrapperStyle","offsetY","icon","maintainCase","removeAccents","isIconAfterHeader","elements","feeds","serialize","site","node","Object","assign","url","siteUrl","guid","custom_elements","html","output","short_name","start_url","background_color","display","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","children","useStaticQuery","metaDescription","defaultTitle","content","property","social","twitter","ThemeToggle","theme","setTheme","useState","useEffect","savedTheme","localStorage","getItem","systemPrefersDark","window","matchMedia","matches","initialTheme","document","documentElement","setAttribute","toggleTheme","newTheme","setItem","Search","isOpen","setIsOpen","setQuery","setResults","searchRef","useRef","inputRef","handleClickOutside","event","current","contains","handleEscape","_inputRef$current","addEventListener","focus","removeEventListener","handleResultClick","ref","toggleSearch","slice","setTimeout","_inputRef$current2","isRootPath","pathname","header","style","textAlign","padding","marginTop","borderTop","color","fontSize","getFullYear","href","textDecoration","fontWeight"],"sourceRoot":""}